
test22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001eca  00001f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00001f72  2**0
                  ALLOC
  3 .stab         00002724  00000000  00000000  00001f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001324  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000059bc  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000059ec  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00005f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000643d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00006457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_1>
       8:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 0c 	call	0x194e	; 0x194e <main>
      8a:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <exti0_apply_sense>:
#include "../include/EXTI0.h"

static void (*exti0_callback)(void) = 0;

static void exti0_apply_sense(EXTI0_Sense_t sense) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
    switch(sense) {
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	91 05       	cpc	r25, r1
      a8:	f9 f0       	breq	.+62     	; 0xe8 <exti0_apply_sense+0x56>
      aa:	82 30       	cpi	r24, 0x02	; 2
      ac:	91 05       	cpc	r25, r1
      ae:	1c f4       	brge	.+6      	; 0xb6 <exti0_apply_sense+0x24>
      b0:	89 2b       	or	r24, r25
      b2:	39 f0       	breq	.+14     	; 0xc2 <exti0_apply_sense+0x30>
        case EXTI0_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
            SET_BIT(MCUCR, ISC01);
            break;
    }
}
      b4:	52 c0       	rjmp	.+164    	; 0x15a <exti0_apply_sense+0xc8>
#include "../include/EXTI0.h"

static void (*exti0_callback)(void) = 0;

static void exti0_apply_sense(EXTI0_Sense_t sense) {
    switch(sense) {
      b6:	82 30       	cpi	r24, 0x02	; 2
      b8:	91 05       	cpc	r25, r1
      ba:	49 f1       	breq	.+82     	; 0x10e <exti0_apply_sense+0x7c>
      bc:	03 97       	sbiw	r24, 0x03	; 3
      be:	d1 f1       	breq	.+116    	; 0x134 <exti0_apply_sense+0xa2>
        case EXTI0_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
            SET_BIT(MCUCR, ISC01);
            break;
    }
}
      c0:	4c c0       	rjmp	.+152    	; 0x15a <exti0_apply_sense+0xc8>
static void (*exti0_callback)(void) = 0;

static void exti0_apply_sense(EXTI0_Sense_t sense) {
    switch(sense) {
        case EXTI0_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
      c2:	85 e5       	ldi	r24, 0x55	; 85
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	25 e5       	ldi	r18, 0x55	; 85
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	f9 01       	movw	r30, r18
      cc:	20 81       	ld	r18, Z
      ce:	2e 7f       	andi	r18, 0xFE	; 254
      d0:	fc 01       	movw	r30, r24
      d2:	20 83       	st	Z, r18
            CLR_BIT(MCUCR, ISC01);
      d4:	85 e5       	ldi	r24, 0x55	; 85
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	25 e5       	ldi	r18, 0x55	; 85
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	f9 01       	movw	r30, r18
      de:	20 81       	ld	r18, Z
      e0:	2d 7f       	andi	r18, 0xFD	; 253
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
            break;
      e6:	39 c0       	rjmp	.+114    	; 0x15a <exti0_apply_sense+0xc8>
        case EXTI0_ANY_CHANGE:
            SET_BIT(MCUCR, ISC00);
      e8:	85 e5       	ldi	r24, 0x55	; 85
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	25 e5       	ldi	r18, 0x55	; 85
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	21 60       	ori	r18, 0x01	; 1
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
            CLR_BIT(MCUCR, ISC01);
      fa:	85 e5       	ldi	r24, 0x55	; 85
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	25 e5       	ldi	r18, 0x55	; 85
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	2d 7f       	andi	r18, 0xFD	; 253
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
            break;
     10c:	26 c0       	rjmp	.+76     	; 0x15a <exti0_apply_sense+0xc8>
        case EXTI0_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
     10e:	85 e5       	ldi	r24, 0x55	; 85
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	25 e5       	ldi	r18, 0x55	; 85
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	f9 01       	movw	r30, r18
     118:	20 81       	ld	r18, Z
     11a:	2e 7f       	andi	r18, 0xFE	; 254
     11c:	fc 01       	movw	r30, r24
     11e:	20 83       	st	Z, r18
            SET_BIT(MCUCR, ISC01);
     120:	85 e5       	ldi	r24, 0x55	; 85
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	25 e5       	ldi	r18, 0x55	; 85
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	20 81       	ld	r18, Z
     12c:	22 60       	ori	r18, 0x02	; 2
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
            break;
     132:	13 c0       	rjmp	.+38     	; 0x15a <exti0_apply_sense+0xc8>
        case EXTI0_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
     134:	85 e5       	ldi	r24, 0x55	; 85
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	25 e5       	ldi	r18, 0x55	; 85
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	21 60       	ori	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
            SET_BIT(MCUCR, ISC01);
     146:	85 e5       	ldi	r24, 0x55	; 85
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e5       	ldi	r18, 0x55	; 85
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	22 60       	ori	r18, 0x02	; 2
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
            break;
     158:	00 00       	nop
    }
}
     15a:	00 00       	nop
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <EXTI0_init>:

void EXTI0_init(EXTI0_Sense_t sense, void (*cb)(void)) {
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <EXTI0_init+0x6>
     16a:	1f 92       	push	r1
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	7b 83       	std	Y+3, r23	; 0x03
     174:	6a 83       	std	Y+2, r22	; 0x02
    // Input with pull-up on PD2 (INT0)
    CLR_BIT(DDRD, PD2);
     176:	81 e3       	ldi	r24, 0x31	; 49
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	21 e3       	ldi	r18, 0x31	; 49
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	2b 7f       	andi	r18, 0xFB	; 251
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
    SET_BIT(PORTD, PD2); // enable internal pull-up
     188:	82 e3       	ldi	r24, 0x32	; 50
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	22 e3       	ldi	r18, 0x32	; 50
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	24 60       	ori	r18, 0x04	; 4
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18

    exti0_apply_sense(sense);
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	0e 94 49 00 	call	0x92	; 0x92 <exti0_apply_sense>
    EXTI0_clearFlag();
     1a0:	0e 94 14 01 	call	0x228	; 0x228 <EXTI0_clearFlag>
    EXTI0_setCallback(cb);
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	9b 81       	ldd	r25, Y+3	; 0x03
     1a8:	0e 94 01 01 	call	0x202	; 0x202 <EXTI0_setCallback>
    EXTI0_enable();
     1ac:	0e 94 df 00 	call	0x1be	; 0x1be <EXTI0_enable>
}
     1b0:	00 00       	nop
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <EXTI0_enable>:

void EXTI0_enable(void) {
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GICR, INT0);
     1c6:	8b e5       	ldi	r24, 0x5B	; 91
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2b e5       	ldi	r18, 0x5B	; 91
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	20 64       	ori	r18, 0x40	; 64
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
}
     1d8:	00 00       	nop
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <EXTI0_disable>:

void EXTI0_disable(void) {
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR, INT0);
     1e8:	8b e5       	ldi	r24, 0x5B	; 91
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	2b e5       	ldi	r18, 0x5B	; 91
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	f9 01       	movw	r30, r18
     1f2:	20 81       	ld	r18, Z
     1f4:	2f 7b       	andi	r18, 0xBF	; 191
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18
}
     1fa:	00 00       	nop
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <EXTI0_setCallback>:

void EXTI0_setCallback(void (*cb)(void)) {
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	00 d0       	rcall	.+0      	; 0x208 <EXTI0_setCallback+0x6>
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	89 83       	std	Y+1, r24	; 0x01
    exti0_callback = cb;
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	9a 81       	ldd	r25, Y+2	; 0x02
     214:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
     218:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
}
     21c:	00 00       	nop
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <EXTI0_clearFlag>:

void EXTI0_clearFlag(void) {
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
    // write 1 to clear
    SET_BIT(GIFR, INTF0);
     230:	8a e5       	ldi	r24, 0x5A	; 90
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	2a e5       	ldi	r18, 0x5A	; 90
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	f9 01       	movw	r30, r18
     23a:	20 81       	ld	r18, Z
     23c:	20 64       	ori	r18, 0x40	; 64
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
}
     242:	00 00       	nop
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <__vector_1>:

// ISR
ISR(INT0_vect) {
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	2f 93       	push	r18
     258:	3f 93       	push	r19
     25a:	4f 93       	push	r20
     25c:	5f 93       	push	r21
     25e:	6f 93       	push	r22
     260:	7f 93       	push	r23
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
     266:	af 93       	push	r26
     268:	bf 93       	push	r27
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
    if (exti0_callback) {
     276:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     27a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     27e:	89 2b       	or	r24, r25
     280:	31 f0       	breq	.+12     	; 0x28e <__vector_1+0x44>
        exti0_callback();
     282:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     286:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     28a:	fc 01       	movw	r30, r24
     28c:	09 95       	icall
    }
}
     28e:	00 00       	nop
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <exti1_apply_sense>:
#include "../include/EXTI1.h"

static void (*exti1_callback)(void) = 0;

static void exti1_apply_sense(EXTI1_Sense_t sense) {
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	1f 92       	push	r1
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	89 83       	std	Y+1, r24	; 0x01
    switch(sense) {
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	91 05       	cpc	r25, r1
     2ce:	f9 f0       	breq	.+62     	; 0x30e <exti1_apply_sense+0x56>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	91 05       	cpc	r25, r1
     2d4:	1c f4       	brge	.+6      	; 0x2dc <exti1_apply_sense+0x24>
     2d6:	89 2b       	or	r24, r25
     2d8:	39 f0       	breq	.+14     	; 0x2e8 <exti1_apply_sense+0x30>
        case EXTI1_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
            SET_BIT(MCUCR, ISC11);
            break;
    }
}
     2da:	52 c0       	rjmp	.+164    	; 0x380 <exti1_apply_sense+0xc8>
#include "../include/EXTI1.h"

static void (*exti1_callback)(void) = 0;

static void exti1_apply_sense(EXTI1_Sense_t sense) {
    switch(sense) {
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	91 05       	cpc	r25, r1
     2e0:	49 f1       	breq	.+82     	; 0x334 <exti1_apply_sense+0x7c>
     2e2:	03 97       	sbiw	r24, 0x03	; 3
     2e4:	d1 f1       	breq	.+116    	; 0x35a <exti1_apply_sense+0xa2>
        case EXTI1_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
            SET_BIT(MCUCR, ISC11);
            break;
    }
}
     2e6:	4c c0       	rjmp	.+152    	; 0x380 <exti1_apply_sense+0xc8>
static void (*exti1_callback)(void) = 0;

static void exti1_apply_sense(EXTI1_Sense_t sense) {
    switch(sense) {
        case EXTI1_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
     2e8:	85 e5       	ldi	r24, 0x55	; 85
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	25 e5       	ldi	r18, 0x55	; 85
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	2b 7f       	andi	r18, 0xFB	; 251
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
            CLR_BIT(MCUCR, ISC11);
     2fa:	85 e5       	ldi	r24, 0x55	; 85
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	25 e5       	ldi	r18, 0x55	; 85
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	f9 01       	movw	r30, r18
     304:	20 81       	ld	r18, Z
     306:	27 7f       	andi	r18, 0xF7	; 247
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
            break;
     30c:	39 c0       	rjmp	.+114    	; 0x380 <exti1_apply_sense+0xc8>
        case EXTI1_ANY_CHANGE:
            SET_BIT(MCUCR, ISC10);
     30e:	85 e5       	ldi	r24, 0x55	; 85
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	25 e5       	ldi	r18, 0x55	; 85
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	f9 01       	movw	r30, r18
     318:	20 81       	ld	r18, Z
     31a:	24 60       	ori	r18, 0x04	; 4
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
            CLR_BIT(MCUCR, ISC11);
     320:	85 e5       	ldi	r24, 0x55	; 85
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	25 e5       	ldi	r18, 0x55	; 85
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	f9 01       	movw	r30, r18
     32a:	20 81       	ld	r18, Z
     32c:	27 7f       	andi	r18, 0xF7	; 247
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
            break;
     332:	26 c0       	rjmp	.+76     	; 0x380 <exti1_apply_sense+0xc8>
        case EXTI1_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
     334:	85 e5       	ldi	r24, 0x55	; 85
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	25 e5       	ldi	r18, 0x55	; 85
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	f9 01       	movw	r30, r18
     33e:	20 81       	ld	r18, Z
     340:	2b 7f       	andi	r18, 0xFB	; 251
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
            SET_BIT(MCUCR, ISC11);
     346:	85 e5       	ldi	r24, 0x55	; 85
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	25 e5       	ldi	r18, 0x55	; 85
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	f9 01       	movw	r30, r18
     350:	20 81       	ld	r18, Z
     352:	28 60       	ori	r18, 0x08	; 8
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
            break;
     358:	13 c0       	rjmp	.+38     	; 0x380 <exti1_apply_sense+0xc8>
        case EXTI1_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
     35a:	85 e5       	ldi	r24, 0x55	; 85
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	25 e5       	ldi	r18, 0x55	; 85
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	f9 01       	movw	r30, r18
     364:	20 81       	ld	r18, Z
     366:	24 60       	ori	r18, 0x04	; 4
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
            SET_BIT(MCUCR, ISC11);
     36c:	85 e5       	ldi	r24, 0x55	; 85
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	25 e5       	ldi	r18, 0x55	; 85
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	20 81       	ld	r18, Z
     378:	28 60       	ori	r18, 0x08	; 8
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
            break;
     37e:	00 00       	nop
    }
}
     380:	00 00       	nop
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <EXTI1_init>:

void EXTI1_init(EXTI1_Sense_t sense, void (*cb)(void)) {
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <EXTI1_init+0x6>
     390:	1f 92       	push	r1
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	7b 83       	std	Y+3, r23	; 0x03
     39a:	6a 83       	std	Y+2, r22	; 0x02
    // Input with pull-up on PD3 (INT1)
    CLR_BIT(DDRD, PD3);
     39c:	81 e3       	ldi	r24, 0x31	; 49
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	21 e3       	ldi	r18, 0x31	; 49
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	27 7f       	andi	r18, 0xF7	; 247
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
    SET_BIT(PORTD, PD3);
     3ae:	82 e3       	ldi	r24, 0x32	; 50
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	22 e3       	ldi	r18, 0x32	; 50
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	28 60       	ori	r18, 0x08	; 8
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18

    exti1_apply_sense(sense);
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <exti1_apply_sense>
    EXTI1_clearFlag();
     3c6:	0e 94 27 02 	call	0x44e	; 0x44e <EXTI1_clearFlag>
    EXTI1_setCallback(cb);
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	9b 81       	ldd	r25, Y+3	; 0x03
     3ce:	0e 94 14 02 	call	0x428	; 0x428 <EXTI1_setCallback>
    EXTI1_enable();
     3d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <EXTI1_enable>
}
     3d6:	00 00       	nop
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <EXTI1_enable>:

void EXTI1_enable(void) {
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GICR, INT1);
     3ec:	8b e5       	ldi	r24, 0x5B	; 91
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2b e5       	ldi	r18, 0x5B	; 91
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	20 68       	ori	r18, 0x80	; 128
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
}
     3fe:	00 00       	nop
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <EXTI1_disable>:

void EXTI1_disable(void) {
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR, INT1);
     40e:	8b e5       	ldi	r24, 0x5B	; 91
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	2b e5       	ldi	r18, 0x5B	; 91
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	2f 77       	andi	r18, 0x7F	; 127
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
}
     420:	00 00       	nop
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <EXTI1_setCallback>:

void EXTI1_setCallback(void (*cb)(void)) {
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <EXTI1_setCallback+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	89 83       	std	Y+1, r24	; 0x01
    exti1_callback = cb;
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <exti1_callback+0x1>
     43e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <exti1_callback>
}
     442:	00 00       	nop
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <EXTI1_clearFlag>:

void EXTI1_clearFlag(void) {
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIFR, INTF1);
     456:	8a e5       	ldi	r24, 0x5A	; 90
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2a e5       	ldi	r18, 0x5A	; 90
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	20 68       	ori	r18, 0x80	; 128
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
}
     468:	00 00       	nop
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <__vector_2>:

// ISR
ISR(INT1_vect) {
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
    if (exti1_callback) {
     49c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <exti1_callback>
     4a0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <exti1_callback+0x1>
     4a4:	89 2b       	or	r24, r25
     4a6:	31 f0       	breq	.+12     	; 0x4b4 <__vector_2+0x44>
        exti1_callback();
     4a8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <exti1_callback>
     4ac:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <exti1_callback+0x1>
     4b0:	fc 01       	movw	r30, r24
     4b2:	09 95       	icall
    }
}
     4b4:	00 00       	nop
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <LCD_Command>:
#include "../include/lcd.h"
#include <util/delay.h>


void LCD_Command(uint8_t cmd)
{
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	cf 56       	subi	r28, 0x6F	; 111
     4ec:	d1 09       	sbc	r29, r1
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	9e 01       	movw	r18, r28
     4fa:	21 59       	subi	r18, 0x91	; 145
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	f9 01       	movw	r30, r18
     500:	80 83       	st	Z, r24
    LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0);
     502:	88 e3       	ldi	r24, 0x38	; 56
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	28 e3       	ldi	r18, 0x38	; 56
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	42 2f       	mov	r20, r18
     510:	4f 70       	andi	r20, 0x0F	; 15
     512:	9e 01       	movw	r18, r28
     514:	21 59       	subi	r18, 0x91	; 145
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	20 7f       	andi	r18, 0xF0	; 240
     51e:	24 2b       	or	r18, r20
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18
    LCD_PORT &= ~(1<<RS);
     524:	88 e3       	ldi	r24, 0x38	; 56
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	28 e3       	ldi	r18, 0x38	; 56
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	f9 01       	movw	r30, r18
     52e:	20 81       	ld	r18, Z
     530:	2d 7f       	andi	r18, 0xFD	; 253
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
     536:	88 e3       	ldi	r24, 0x38	; 56
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	28 e3       	ldi	r18, 0x38	; 56
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	21 60       	ori	r18, 0x01	; 1
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e8       	ldi	r26, 0x80	; 128
     54e:	bf e3       	ldi	r27, 0x3F	; 63
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	ab 83       	std	Y+3, r26	; 0x03
     556:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     558:	8e 01       	movw	r16, r28
     55a:	0d 5a       	subi	r16, 0xAD	; 173
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	2b ea       	ldi	r18, 0xAB	; 171
     560:	3a ea       	ldi	r19, 0xAA	; 170
     562:	4a ea       	ldi	r20, 0xAA	; 170
     564:	5e e3       	ldi	r21, 0x3E	; 62
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	f8 01       	movw	r30, r16
     578:	80 83       	st	Z, r24
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	a2 83       	std	Z+2, r26	; 0x02
     57e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     580:	8e 01       	movw	r16, r28
     582:	09 5a       	subi	r16, 0xA9	; 169
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e8       	ldi	r20, 0x80	; 128
     58c:	5e e3       	ldi	r21, 0x3E	; 62
     58e:	69 81       	ldd	r22, Y+1	; 0x01
     590:	7a 81       	ldd	r23, Y+2	; 0x02
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	9c 81       	ldd	r25, Y+4	; 0x04
     596:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	f8 01       	movw	r30, r16
     5a0:	80 83       	st	Z, r24
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	a2 83       	std	Z+2, r26	; 0x02
     5a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5a8:	ce 01       	movw	r24, r28
     5aa:	8d 5a       	subi	r24, 0xAD	; 173
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e8       	ldi	r20, 0x80	; 128
     5b4:	5f e3       	ldi	r21, 0x3F	; 63
     5b6:	fc 01       	movw	r30, r24
     5b8:	60 81       	ld	r22, Z
     5ba:	71 81       	ldd	r23, Z+1	; 0x01
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     5c4:	88 23       	and	r24, r24
     5c6:	3c f4       	brge	.+14     	; 0x5d6 <LCD_Command+0xf8>
		__ticks = 1;
     5c8:	ce 01       	movw	r24, r28
     5ca:	85 5a       	subi	r24, 0xA5	; 165
     5cc:	9f 4f       	sbci	r25, 0xFF	; 255
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
     5d4:	2c c1       	rjmp	.+600    	; 0x82e <LCD_Command+0x350>
	else if (__tmp2 > 65535)
     5d6:	ce 01       	movw	r24, r28
     5d8:	89 5a       	subi	r24, 0xA9	; 169
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	3f ef       	ldi	r19, 0xFF	; 255
     5e0:	4f e7       	ldi	r20, 0x7F	; 127
     5e2:	57 e4       	ldi	r21, 0x47	; 71
     5e4:	fc 01       	movw	r30, r24
     5e6:	60 81       	ld	r22, Z
     5e8:	71 81       	ldd	r23, Z+1	; 0x01
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	93 81       	ldd	r25, Z+3	; 0x03
     5ee:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     5f2:	18 16       	cp	r1, r24
     5f4:	0c f0       	brlt	.+2      	; 0x5f8 <LCD_Command+0x11a>
     5f6:	cd c0       	rjmp	.+410    	; 0x792 <LCD_Command+0x2b4>
	{
		_delay_ms(__us / 1000.0);
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4a e7       	ldi	r20, 0x7A	; 122
     5fe:	54 e4       	ldi	r21, 0x44	; 68
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	7a 81       	ldd	r23, Y+2	; 0x02
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	24 5a       	subi	r18, 0xA4	; 164
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     620:	8e 01       	movw	r16, r28
     622:	00 5a       	subi	r16, 0xA0	; 160
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	ce 01       	movw	r24, r28
     628:	84 5a       	subi	r24, 0xA4	; 164
     62a:	9f 4f       	sbci	r25, 0xFF	; 255
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	4a e7       	ldi	r20, 0x7A	; 122
     632:	53 e4       	ldi	r21, 0x43	; 67
     634:	fc 01       	movw	r30, r24
     636:	60 81       	ld	r22, Z
     638:	71 81       	ldd	r23, Z+1	; 0x01
     63a:	82 81       	ldd	r24, Z+2	; 0x02
     63c:	93 81       	ldd	r25, Z+3	; 0x03
     63e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	f8 01       	movw	r30, r16
     648:	80 83       	st	Z, r24
     64a:	91 83       	std	Z+1, r25	; 0x01
     64c:	a2 83       	std	Z+2, r26	; 0x02
     64e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     650:	ce 01       	movw	r24, r28
     652:	80 5a       	subi	r24, 0xA0	; 160
     654:	9f 4f       	sbci	r25, 0xFF	; 255
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e8       	ldi	r20, 0x80	; 128
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     66c:	88 23       	and	r24, r24
     66e:	4c f4       	brge	.+18     	; 0x682 <LCD_Command+0x1a4>
		__ticks = 1;
     670:	ce 01       	movw	r24, r28
     672:	8c 59       	subi	r24, 0x9C	; 156
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	31 83       	std	Z+1, r19	; 0x01
     67e:	20 83       	st	Z, r18
     680:	6d c0       	rjmp	.+218    	; 0x75c <LCD_Command+0x27e>
	else if (__tmp > 65535)
     682:	ce 01       	movw	r24, r28
     684:	80 5a       	subi	r24, 0xA0	; 160
     686:	9f 4f       	sbci	r25, 0xFF	; 255
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	4f e7       	ldi	r20, 0x7F	; 127
     68e:	57 e4       	ldi	r21, 0x47	; 71
     690:	fc 01       	movw	r30, r24
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     69e:	18 16       	cp	r1, r24
     6a0:	0c f0       	brlt	.+2      	; 0x6a4 <LCD_Command+0x1c6>
     6a2:	4a c0       	rjmp	.+148    	; 0x738 <LCD_Command+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a4:	ce 01       	movw	r24, r28
     6a6:	84 5a       	subi	r24, 0xA4	; 164
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e2       	ldi	r20, 0x20	; 32
     6b0:	51 e4       	ldi	r21, 0x41	; 65
     6b2:	fc 01       	movw	r30, r24
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	8e 01       	movw	r16, r28
     6c6:	0c 59       	subi	r16, 0x9C	; 156
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	f8 01       	movw	r30, r16
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	24 c0       	rjmp	.+72     	; 0x726 <LCD_Command+0x248>
     6de:	ce 01       	movw	r24, r28
     6e0:	8a 59       	subi	r24, 0x9A	; 154
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	29 e1       	ldi	r18, 0x19	; 25
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	31 83       	std	Z+1, r19	; 0x01
     6ec:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ee:	ce 01       	movw	r24, r28
     6f0:	8a 59       	subi	r24, 0x9A	; 154
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_Command+0x21c>
     6fe:	9e 01       	movw	r18, r28
     700:	2a 59       	subi	r18, 0x9A	; 154
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	f9 01       	movw	r30, r18
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     70a:	ce 01       	movw	r24, r28
     70c:	8c 59       	subi	r24, 0x9C	; 156
     70e:	9f 4f       	sbci	r25, 0xFF	; 255
     710:	9e 01       	movw	r18, r28
     712:	2c 59       	subi	r18, 0x9C	; 156
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	f9 01       	movw	r30, r18
     718:	20 81       	ld	r18, Z
     71a:	31 81       	ldd	r19, Z+1	; 0x01
     71c:	21 50       	subi	r18, 0x01	; 1
     71e:	31 09       	sbc	r19, r1
     720:	fc 01       	movw	r30, r24
     722:	31 83       	std	Z+1, r19	; 0x01
     724:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     726:	ce 01       	movw	r24, r28
     728:	8c 59       	subi	r24, 0x9C	; 156
     72a:	9f 4f       	sbci	r25, 0xFF	; 255
     72c:	fc 01       	movw	r30, r24
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	89 2b       	or	r24, r25
     734:	a1 f6       	brne	.-88     	; 0x6de <LCD_Command+0x200>
     736:	7b c0       	rjmp	.+246    	; 0x82e <LCD_Command+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     738:	8e 01       	movw	r16, r28
     73a:	0c 59       	subi	r16, 0x9C	; 156
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	ce 01       	movw	r24, r28
     740:	80 5a       	subi	r24, 0xA0	; 160
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	fc 01       	movw	r30, r24
     746:	60 81       	ld	r22, Z
     748:	71 81       	ldd	r23, Z+1	; 0x01
     74a:	82 81       	ldd	r24, Z+2	; 0x02
     74c:	93 81       	ldd	r25, Z+3	; 0x03
     74e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	f8 01       	movw	r30, r16
     758:	91 83       	std	Z+1, r25	; 0x01
     75a:	80 83       	st	Z, r24
     75c:	ce 01       	movw	r24, r28
     75e:	88 59       	subi	r24, 0x98	; 152
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	9e 01       	movw	r18, r28
     764:	2c 59       	subi	r18, 0x9C	; 156
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	31 81       	ldd	r19, Z+1	; 0x01
     76e:	fc 01       	movw	r30, r24
     770:	31 83       	std	Z+1, r19	; 0x01
     772:	20 83       	st	Z, r18
     774:	ce 01       	movw	r24, r28
     776:	88 59       	subi	r24, 0x98	; 152
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <LCD_Command+0x2a2>
     784:	9e 01       	movw	r18, r28
     786:	28 59       	subi	r18, 0x98	; 152
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	f9 01       	movw	r30, r18
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	80 83       	st	Z, r24
     790:	4e c0       	rjmp	.+156    	; 0x82e <LCD_Command+0x350>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     792:	ce 01       	movw	r24, r28
     794:	8d 5a       	subi	r24, 0xAD	; 173
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	4f e7       	ldi	r20, 0x7F	; 127
     79e:	53 e4       	ldi	r21, 0x43	; 67
     7a0:	fc 01       	movw	r30, r24
     7a2:	60 81       	ld	r22, Z
     7a4:	71 81       	ldd	r23, Z+1	; 0x01
     7a6:	82 81       	ldd	r24, Z+2	; 0x02
     7a8:	93 81       	ldd	r25, Z+3	; 0x03
     7aa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	6c f5       	brge	.+90     	; 0x80c <LCD_Command+0x32e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     7b2:	8e 01       	movw	r16, r28
     7b4:	06 59       	subi	r16, 0x96	; 150
     7b6:	1f 4f       	sbci	r17, 0xFF	; 255
     7b8:	ce 01       	movw	r24, r28
     7ba:	89 5a       	subi	r24, 0xA9	; 169
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	fc 01       	movw	r30, r24
     7c0:	60 81       	ld	r22, Z
     7c2:	71 81       	ldd	r23, Z+1	; 0x01
     7c4:	82 81       	ldd	r24, Z+2	; 0x02
     7c6:	93 81       	ldd	r25, Z+3	; 0x03
     7c8:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	f8 01       	movw	r30, r16
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	80 83       	st	Z, r24
     7d6:	ce 01       	movw	r24, r28
     7d8:	84 59       	subi	r24, 0x94	; 148
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
     7dc:	9e 01       	movw	r18, r28
     7de:	26 59       	subi	r18, 0x96	; 150
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	31 81       	ldd	r19, Z+1	; 0x01
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	ce 01       	movw	r24, r28
     7f0:	84 59       	subi	r24, 0x94	; 148
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_Command+0x31c>
     7fe:	9e 01       	movw	r18, r28
     800:	24 59       	subi	r18, 0x94	; 148
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	80 83       	st	Z, r24
     80a:	28 c0       	rjmp	.+80     	; 0x85c <LCD_Command+0x37e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     80c:	8e 01       	movw	r16, r28
     80e:	05 5a       	subi	r16, 0xA5	; 165
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	ce 01       	movw	r24, r28
     814:	8d 5a       	subi	r24, 0xAD	; 173
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	fc 01       	movw	r30, r24
     81a:	60 81       	ld	r22, Z
     81c:	71 81       	ldd	r23, Z+1	; 0x01
     81e:	82 81       	ldd	r24, Z+2	; 0x02
     820:	93 81       	ldd	r25, Z+3	; 0x03
     822:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	f8 01       	movw	r30, r16
     82c:	80 83       	st	Z, r24
     82e:	ce 01       	movw	r24, r28
     830:	82 59       	subi	r24, 0x92	; 146
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	9e 01       	movw	r18, r28
     836:	25 5a       	subi	r18, 0xA5	; 165
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     842:	ce 01       	movw	r24, r28
     844:	82 59       	subi	r24, 0x92	; 146
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	28 2f       	mov	r18, r24
     84e:	2a 95       	dec	r18
     850:	f1 f7       	brne	.-4      	; 0x84e <LCD_Command+0x370>
     852:	ce 01       	movw	r24, r28
     854:	82 59       	subi	r24, 0x92	; 146
     856:	9f 4f       	sbci	r25, 0xFF	; 255
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
     85c:	88 e3       	ldi	r24, 0x38	; 56
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	28 e3       	ldi	r18, 0x38	; 56
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	2e 7f       	andi	r18, 0xFE	; 254
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a8 e4       	ldi	r26, 0x48	; 72
     874:	b3 e4       	ldi	r27, 0x43	; 67
     876:	8d 83       	std	Y+5, r24	; 0x05
     878:	9e 83       	std	Y+6, r25	; 0x06
     87a:	af 83       	std	Y+7, r26	; 0x07
     87c:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     87e:	2b ea       	ldi	r18, 0xAB	; 171
     880:	3a ea       	ldi	r19, 0xAA	; 170
     882:	4a ea       	ldi	r20, 0xAA	; 170
     884:	5e e3       	ldi	r21, 0x3E	; 62
     886:	6d 81       	ldd	r22, Y+5	; 0x05
     888:	7e 81       	ldd	r23, Y+6	; 0x06
     88a:	8f 81       	ldd	r24, Y+7	; 0x07
     88c:	98 85       	ldd	r25, Y+8	; 0x08
     88e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	8f ab       	std	Y+55, r24	; 0x37
     898:	98 af       	std	Y+56, r25	; 0x38
     89a:	a9 af       	std	Y+57, r26	; 0x39
     89c:	ba af       	std	Y+58, r27	; 0x3a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	40 e8       	ldi	r20, 0x80	; 128
     8a4:	5e e3       	ldi	r21, 0x3E	; 62
     8a6:	6d 81       	ldd	r22, Y+5	; 0x05
     8a8:	7e 81       	ldd	r23, Y+6	; 0x06
     8aa:	8f 81       	ldd	r24, Y+7	; 0x07
     8ac:	98 85       	ldd	r25, Y+8	; 0x08
     8ae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	8b af       	std	Y+59, r24	; 0x3b
     8b8:	9c af       	std	Y+60, r25	; 0x3c
     8ba:	ad af       	std	Y+61, r26	; 0x3d
     8bc:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e8       	ldi	r20, 0x80	; 128
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	6f a9       	ldd	r22, Y+55	; 0x37
     8c8:	78 ad       	ldd	r23, Y+56	; 0x38
     8ca:	89 ad       	ldd	r24, Y+57	; 0x39
     8cc:	9a ad       	ldd	r25, Y+58	; 0x3a
     8ce:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     8d2:	88 23       	and	r24, r24
     8d4:	1c f4       	brge	.+6      	; 0x8dc <LCD_Command+0x3fe>
		__ticks = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8f af       	std	Y+63, r24	; 0x3f
     8da:	18 c1       	rjmp	.+560    	; 0xb0c <LCD_Command+0x62e>
	else if (__tmp2 > 65535)
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	3f ef       	ldi	r19, 0xFF	; 255
     8e0:	4f e7       	ldi	r20, 0x7F	; 127
     8e2:	57 e4       	ldi	r21, 0x47	; 71
     8e4:	6b ad       	ldd	r22, Y+59	; 0x3b
     8e6:	7c ad       	ldd	r23, Y+60	; 0x3c
     8e8:	8d ad       	ldd	r24, Y+61	; 0x3d
     8ea:	9e ad       	ldd	r25, Y+62	; 0x3e
     8ec:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     8f0:	18 16       	cp	r1, r24
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <LCD_Command+0x418>
     8f4:	cd c0       	rjmp	.+410    	; 0xa90 <LCD_Command+0x5b2>
	{
		_delay_ms(__us / 1000.0);
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4a e7       	ldi	r20, 0x7A	; 122
     8fc:	54 e4       	ldi	r21, 0x44	; 68
     8fe:	6d 81       	ldd	r22, Y+5	; 0x05
     900:	7e 81       	ldd	r23, Y+6	; 0x06
     902:	8f 81       	ldd	r24, Y+7	; 0x07
     904:	98 85       	ldd	r25, Y+8	; 0x08
     906:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	9e 01       	movw	r18, r28
     910:	20 5c       	subi	r18, 0xC0	; 192
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	f9 01       	movw	r30, r18
     916:	80 83       	st	Z, r24
     918:	91 83       	std	Z+1, r25	; 0x01
     91a:	a2 83       	std	Z+2, r26	; 0x02
     91c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     91e:	8e 01       	movw	r16, r28
     920:	0c 5b       	subi	r16, 0xBC	; 188
     922:	1f 4f       	sbci	r17, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	80 5c       	subi	r24, 0xC0	; 192
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	4a e7       	ldi	r20, 0x7A	; 122
     930:	53 e4       	ldi	r21, 0x43	; 67
     932:	fc 01       	movw	r30, r24
     934:	60 81       	ld	r22, Z
     936:	71 81       	ldd	r23, Z+1	; 0x01
     938:	82 81       	ldd	r24, Z+2	; 0x02
     93a:	93 81       	ldd	r25, Z+3	; 0x03
     93c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	f8 01       	movw	r30, r16
     946:	80 83       	st	Z, r24
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	a2 83       	std	Z+2, r26	; 0x02
     94c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     94e:	ce 01       	movw	r24, r28
     950:	8c 5b       	subi	r24, 0xBC	; 188
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e8       	ldi	r20, 0x80	; 128
     95a:	5f e3       	ldi	r21, 0x3F	; 63
     95c:	fc 01       	movw	r30, r24
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	93 81       	ldd	r25, Z+3	; 0x03
     966:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     96a:	88 23       	and	r24, r24
     96c:	4c f4       	brge	.+18     	; 0x980 <LCD_Command+0x4a2>
		__ticks = 1;
     96e:	ce 01       	movw	r24, r28
     970:	88 5b       	subi	r24, 0xB8	; 184
     972:	9f 4f       	sbci	r25, 0xFF	; 255
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	20 83       	st	Z, r18
     97e:	6d c0       	rjmp	.+218    	; 0xa5a <LCD_Command+0x57c>
	else if (__tmp > 65535)
     980:	ce 01       	movw	r24, r28
     982:	8c 5b       	subi	r24, 0xBC	; 188
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	3f ef       	ldi	r19, 0xFF	; 255
     98a:	4f e7       	ldi	r20, 0x7F	; 127
     98c:	57 e4       	ldi	r21, 0x47	; 71
     98e:	fc 01       	movw	r30, r24
     990:	60 81       	ld	r22, Z
     992:	71 81       	ldd	r23, Z+1	; 0x01
     994:	82 81       	ldd	r24, Z+2	; 0x02
     996:	93 81       	ldd	r25, Z+3	; 0x03
     998:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     99c:	18 16       	cp	r1, r24
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <LCD_Command+0x4c4>
     9a0:	4a c0       	rjmp	.+148    	; 0xa36 <LCD_Command+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a2:	ce 01       	movw	r24, r28
     9a4:	80 5c       	subi	r24, 0xC0	; 192
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	fc 01       	movw	r30, r24
     9b2:	60 81       	ld	r22, Z
     9b4:	71 81       	ldd	r23, Z+1	; 0x01
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	8e 01       	movw	r16, r28
     9c4:	08 5b       	subi	r16, 0xB8	; 184
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	f8 01       	movw	r30, r16
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	80 83       	st	Z, r24
     9da:	24 c0       	rjmp	.+72     	; 0xa24 <LCD_Command+0x546>
     9dc:	ce 01       	movw	r24, r28
     9de:	86 5b       	subi	r24, 0xB6	; 182
     9e0:	9f 4f       	sbci	r25, 0xFF	; 255
     9e2:	29 e1       	ldi	r18, 0x19	; 25
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	fc 01       	movw	r30, r24
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9ec:	ce 01       	movw	r24, r28
     9ee:	86 5b       	subi	r24, 0xB6	; 182
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCD_Command+0x51a>
     9fc:	9e 01       	movw	r18, r28
     9fe:	26 5b       	subi	r18, 0xB6	; 182
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	f9 01       	movw	r30, r18
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a08:	ce 01       	movw	r24, r28
     a0a:	88 5b       	subi	r24, 0xB8	; 184
     a0c:	9f 4f       	sbci	r25, 0xFF	; 255
     a0e:	9e 01       	movw	r18, r28
     a10:	28 5b       	subi	r18, 0xB8	; 184
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	f9 01       	movw	r30, r18
     a16:	20 81       	ld	r18, Z
     a18:	31 81       	ldd	r19, Z+1	; 0x01
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	31 09       	sbc	r19, r1
     a1e:	fc 01       	movw	r30, r24
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a24:	ce 01       	movw	r24, r28
     a26:	88 5b       	subi	r24, 0xB8	; 184
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	89 2b       	or	r24, r25
     a32:	a1 f6       	brne	.-88     	; 0x9dc <LCD_Command+0x4fe>
     a34:	6b c0       	rjmp	.+214    	; 0xb0c <LCD_Command+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a36:	8e 01       	movw	r16, r28
     a38:	08 5b       	subi	r16, 0xB8	; 184
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	ce 01       	movw	r24, r28
     a3e:	8c 5b       	subi	r24, 0xBC	; 188
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	fc 01       	movw	r30, r24
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	82 81       	ldd	r24, Z+2	; 0x02
     a4a:	93 81       	ldd	r25, Z+3	; 0x03
     a4c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	f8 01       	movw	r30, r16
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
     a5a:	ce 01       	movw	r24, r28
     a5c:	84 5b       	subi	r24, 0xB4	; 180
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	9e 01       	movw	r18, r28
     a62:	28 5b       	subi	r18, 0xB8	; 184
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	f9 01       	movw	r30, r18
     a68:	20 81       	ld	r18, Z
     a6a:	31 81       	ldd	r19, Z+1	; 0x01
     a6c:	fc 01       	movw	r30, r24
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	20 83       	st	Z, r18
     a72:	ce 01       	movw	r24, r28
     a74:	84 5b       	subi	r24, 0xB4	; 180
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <LCD_Command+0x5a0>
     a82:	9e 01       	movw	r18, r28
     a84:	24 5b       	subi	r18, 0xB4	; 180
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
     a8e:	3e c0       	rjmp	.+124    	; 0xb0c <LCD_Command+0x62e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	4f e7       	ldi	r20, 0x7F	; 127
     a96:	53 e4       	ldi	r21, 0x43	; 67
     a98:	6f a9       	ldd	r22, Y+55	; 0x37
     a9a:	78 ad       	ldd	r23, Y+56	; 0x38
     a9c:	89 ad       	ldd	r24, Y+57	; 0x39
     a9e:	9a ad       	ldd	r25, Y+58	; 0x3a
     aa0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     aa4:	18 16       	cp	r1, r24
     aa6:	4c f5       	brge	.+82     	; 0xafa <LCD_Command+0x61c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     aa8:	8e 01       	movw	r16, r28
     aaa:	02 5b       	subi	r16, 0xB2	; 178
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	6b ad       	ldd	r22, Y+59	; 0x3b
     ab0:	7c ad       	ldd	r23, Y+60	; 0x3c
     ab2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ab4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ab6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	f8 01       	movw	r30, r16
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
     ac4:	ce 01       	movw	r24, r28
     ac6:	80 5b       	subi	r24, 0xB0	; 176
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	9e 01       	movw	r18, r28
     acc:	22 5b       	subi	r18, 0xB2	; 178
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	f9 01       	movw	r30, r18
     ad2:	20 81       	ld	r18, Z
     ad4:	31 81       	ldd	r19, Z+1	; 0x01
     ad6:	fc 01       	movw	r30, r24
     ad8:	31 83       	std	Z+1, r19	; 0x01
     ada:	20 83       	st	Z, r18
     adc:	ce 01       	movw	r24, r28
     ade:	80 5b       	subi	r24, 0xB0	; 176
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <LCD_Command+0x60a>
     aec:	9e 01       	movw	r18, r28
     aee:	20 5b       	subi	r18, 0xB0	; 176
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	f9 01       	movw	r30, r18
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	1c c0       	rjmp	.+56     	; 0xb32 <LCD_Command+0x654>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     afa:	6f a9       	ldd	r22, Y+55	; 0x37
     afc:	78 ad       	ldd	r23, Y+56	; 0x38
     afe:	89 ad       	ldd	r24, Y+57	; 0x39
     b00:	9a ad       	ldd	r25, Y+58	; 0x3a
     b02:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8f af       	std	Y+63, r24	; 0x3f
     b0c:	ce 01       	movw	r24, r28
     b0e:	8e 5a       	subi	r24, 0xAE	; 174
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	2f ad       	ldd	r18, Y+63	; 0x3f
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b18:	ce 01       	movw	r24, r28
     b1a:	8e 5a       	subi	r24, 0xAE	; 174
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	28 2f       	mov	r18, r24
     b24:	2a 95       	dec	r18
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_Command+0x646>
     b28:	ce 01       	movw	r24, r28
     b2a:	8e 5a       	subi	r24, 0xAE	; 174
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
    _delay_us(200);

    LCD_PORT = (LCD_PORT & 0x0F) | (cmd<<4);
     b32:	88 e3       	ldi	r24, 0x38	; 56
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	28 e3       	ldi	r18, 0x38	; 56
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	f9 01       	movw	r30, r18
     b3c:	20 81       	ld	r18, Z
     b3e:	42 2f       	mov	r20, r18
     b40:	4f 70       	andi	r20, 0x0F	; 15
     b42:	9e 01       	movw	r18, r28
     b44:	21 59       	subi	r18, 0x91	; 145
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	f9 01       	movw	r30, r18
     b4a:	20 81       	ld	r18, Z
     b4c:	22 2f       	mov	r18, r18
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	22 95       	swap	r18
     b52:	32 95       	swap	r19
     b54:	30 7f       	andi	r19, 0xF0	; 240
     b56:	32 27       	eor	r19, r18
     b58:	20 7f       	andi	r18, 0xF0	; 240
     b5a:	32 27       	eor	r19, r18
     b5c:	24 2b       	or	r18, r20
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
     b62:	88 e3       	ldi	r24, 0x38	; 56
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	28 e3       	ldi	r18, 0x38	; 56
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	20 81       	ld	r18, Z
     b6e:	21 60       	ori	r18, 0x01	; 1
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e8       	ldi	r26, 0x80	; 128
     b7a:	bf e3       	ldi	r27, 0x3F	; 63
     b7c:	89 87       	std	Y+9, r24	; 0x09
     b7e:	9a 87       	std	Y+10, r25	; 0x0a
     b80:	ab 87       	std	Y+11, r26	; 0x0b
     b82:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b84:	2b ea       	ldi	r18, 0xAB	; 171
     b86:	3a ea       	ldi	r19, 0xAA	; 170
     b88:	4a ea       	ldi	r20, 0xAA	; 170
     b8a:	5e e3       	ldi	r21, 0x3E	; 62
     b8c:	69 85       	ldd	r22, Y+9	; 0x09
     b8e:	7a 85       	ldd	r23, Y+10	; 0x0a
     b90:	8b 85       	ldd	r24, Y+11	; 0x0b
     b92:	9c 85       	ldd	r25, Y+12	; 0x0c
     b94:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	8b 8f       	std	Y+27, r24	; 0x1b
     b9e:	9c 8f       	std	Y+28, r25	; 0x1c
     ba0:	ad 8f       	std	Y+29, r26	; 0x1d
     ba2:	be 8f       	std	Y+30, r27	; 0x1e
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5e e3       	ldi	r21, 0x3E	; 62
     bac:	69 85       	ldd	r22, Y+9	; 0x09
     bae:	7a 85       	ldd	r23, Y+10	; 0x0a
     bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8f 8f       	std	Y+31, r24	; 0x1f
     bbe:	98 a3       	std	Y+32, r25	; 0x20
     bc0:	a9 a3       	std	Y+33, r26	; 0x21
     bc2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e8       	ldi	r20, 0x80	; 128
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bce:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bd4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     bd8:	88 23       	and	r24, r24
     bda:	1c f4       	brge	.+6      	; 0xbe2 <LCD_Command+0x704>
		__ticks = 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8b a3       	std	Y+35, r24	; 0x23
     be0:	b2 c0       	rjmp	.+356    	; 0xd46 <LCD_Command+0x868>
	else if (__tmp2 > 65535)
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	57 e4       	ldi	r21, 0x47	; 71
     bea:	6f 8d       	ldd	r22, Y+31	; 0x1f
     bec:	78 a1       	ldd	r23, Y+32	; 0x20
     bee:	89 a1       	ldd	r24, Y+33	; 0x21
     bf0:	9a a1       	ldd	r25, Y+34	; 0x22
     bf2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <LCD_Command+0x71e>
     bfa:	7b c0       	rjmp	.+246    	; 0xcf2 <LCD_Command+0x814>
	{
		_delay_ms(__us / 1000.0);
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	54 e4       	ldi	r21, 0x44	; 68
     c04:	69 85       	ldd	r22, Y+9	; 0x09
     c06:	7a 85       	ldd	r23, Y+10	; 0x0a
     c08:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8c a3       	std	Y+36, r24	; 0x24
     c16:	9d a3       	std	Y+37, r25	; 0x25
     c18:	ae a3       	std	Y+38, r26	; 0x26
     c1a:	bf a3       	std	Y+39, r27	; 0x27

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	4a e7       	ldi	r20, 0x7A	; 122
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	6c a1       	ldd	r22, Y+36	; 0x24
     c26:	7d a1       	ldd	r23, Y+37	; 0x25
     c28:	8e a1       	ldd	r24, Y+38	; 0x26
     c2a:	9f a1       	ldd	r25, Y+39	; 0x27
     c2c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	88 a7       	std	Y+40, r24	; 0x28
     c36:	99 a7       	std	Y+41, r25	; 0x29
     c38:	aa a7       	std	Y+42, r26	; 0x2a
     c3a:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e8       	ldi	r20, 0x80	; 128
     c42:	5f e3       	ldi	r21, 0x3F	; 63
     c44:	68 a5       	ldd	r22, Y+40	; 0x28
     c46:	79 a5       	ldd	r23, Y+41	; 0x29
     c48:	8a a5       	ldd	r24, Y+42	; 0x2a
     c4a:	9b a5       	ldd	r25, Y+43	; 0x2b
     c4c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     c50:	88 23       	and	r24, r24
     c52:	2c f4       	brge	.+10     	; 0xc5e <LCD_Command+0x780>
		__ticks = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9d a7       	std	Y+45, r25	; 0x2d
     c5a:	8c a7       	std	Y+44, r24	; 0x2c
     c5c:	3f c0       	rjmp	.+126    	; 0xcdc <LCD_Command+0x7fe>
	else if (__tmp > 65535)
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	3f ef       	ldi	r19, 0xFF	; 255
     c62:	4f e7       	ldi	r20, 0x7F	; 127
     c64:	57 e4       	ldi	r21, 0x47	; 71
     c66:	68 a5       	ldd	r22, Y+40	; 0x28
     c68:	79 a5       	ldd	r23, Y+41	; 0x29
     c6a:	8a a5       	ldd	r24, Y+42	; 0x2a
     c6c:	9b a5       	ldd	r25, Y+43	; 0x2b
     c6e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     c72:	18 16       	cp	r1, r24
     c74:	4c f5       	brge	.+82     	; 0xcc8 <LCD_Command+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e2       	ldi	r20, 0x20	; 32
     c7c:	51 e4       	ldi	r21, 0x41	; 65
     c7e:	6c a1       	ldd	r22, Y+36	; 0x24
     c80:	7d a1       	ldd	r23, Y+37	; 0x25
     c82:	8e a1       	ldd	r24, Y+38	; 0x26
     c84:	9f a1       	ldd	r25, Y+39	; 0x27
     c86:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9d a7       	std	Y+45, r25	; 0x2d
     c9c:	8c a7       	std	Y+44, r24	; 0x2c
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <LCD_Command+0x7e0>
     ca0:	89 e1       	ldi	r24, 0x19	; 25
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9f a7       	std	Y+47, r25	; 0x2f
     ca6:	8e a7       	std	Y+46, r24	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca8:	8e a5       	ldd	r24, Y+46	; 0x2e
     caa:	9f a5       	ldd	r25, Y+47	; 0x2f
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCD_Command+0x7ce>
     cb0:	9f a7       	std	Y+47, r25	; 0x2f
     cb2:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	8c a5       	ldd	r24, Y+44	; 0x2c
     cb6:	9d a5       	ldd	r25, Y+45	; 0x2d
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9d a7       	std	Y+45, r25	; 0x2d
     cbc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	8c a5       	ldd	r24, Y+44	; 0x2c
     cc0:	9d a5       	ldd	r25, Y+45	; 0x2d
     cc2:	89 2b       	or	r24, r25
     cc4:	69 f7       	brne	.-38     	; 0xca0 <LCD_Command+0x7c2>
     cc6:	3f c0       	rjmp	.+126    	; 0xd46 <LCD_Command+0x868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	68 a5       	ldd	r22, Y+40	; 0x28
     cca:	79 a5       	ldd	r23, Y+41	; 0x29
     ccc:	8a a5       	ldd	r24, Y+42	; 0x2a
     cce:	9b a5       	ldd	r25, Y+43	; 0x2b
     cd0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	9d a7       	std	Y+45, r25	; 0x2d
     cda:	8c a7       	std	Y+44, r24	; 0x2c
     cdc:	8c a5       	ldd	r24, Y+44	; 0x2c
     cde:	9d a5       	ldd	r25, Y+45	; 0x2d
     ce0:	99 ab       	std	Y+49, r25	; 0x31
     ce2:	88 ab       	std	Y+48, r24	; 0x30
     ce4:	88 a9       	ldd	r24, Y+48	; 0x30
     ce6:	99 a9       	ldd	r25, Y+49	; 0x31
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <LCD_Command+0x80a>
     cec:	99 ab       	std	Y+49, r25	; 0x31
     cee:	88 ab       	std	Y+48, r24	; 0x30
     cf0:	2a c0       	rjmp	.+84     	; 0xd46 <LCD_Command+0x868>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4f e7       	ldi	r20, 0x7F	; 127
     cf8:	53 e4       	ldi	r21, 0x43	; 67
     cfa:	6b 8d       	ldd	r22, Y+27	; 0x1b
     cfc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d00:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d02:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     d06:	18 16       	cp	r1, r24
     d08:	ac f4       	brge	.+42     	; 0xd34 <LCD_Command+0x856>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     d0c:	78 a1       	ldd	r23, Y+32	; 0x20
     d0e:	89 a1       	ldd	r24, Y+33	; 0x21
     d10:	9a a1       	ldd	r25, Y+34	; 0x22
     d12:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9b ab       	std	Y+51, r25	; 0x33
     d1c:	8a ab       	std	Y+50, r24	; 0x32
     d1e:	8a a9       	ldd	r24, Y+50	; 0x32
     d20:	9b a9       	ldd	r25, Y+51	; 0x33
     d22:	9d ab       	std	Y+53, r25	; 0x35
     d24:	8c ab       	std	Y+52, r24	; 0x34
     d26:	8c a9       	ldd	r24, Y+52	; 0x34
     d28:	9d a9       	ldd	r25, Y+53	; 0x35
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <LCD_Command+0x84c>
     d2e:	9d ab       	std	Y+53, r25	; 0x35
     d30:	8c ab       	std	Y+52, r24	; 0x34
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <LCD_Command+0x874>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d34:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d36:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d3c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8b a3       	std	Y+35, r24	; 0x23
     d46:	8b a1       	ldd	r24, Y+35	; 0x23
     d48:	8e ab       	std	Y+54, r24	; 0x36
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d4a:	8e a9       	ldd	r24, Y+54	; 0x36
     d4c:	8a 95       	dec	r24
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <LCD_Command+0x86e>
     d50:	8e ab       	std	Y+54, r24	; 0x36
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
     d52:	88 e3       	ldi	r24, 0x38	; 56
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	28 e3       	ldi	r18, 0x38	; 56
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	2e 7f       	andi	r18, 0xFE	; 254
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e4       	ldi	r27, 0x40	; 64
     d6c:	8d 87       	std	Y+13, r24	; 0x0d
     d6e:	9e 87       	std	Y+14, r25	; 0x0e
     d70:	af 87       	std	Y+15, r26	; 0x0f
     d72:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a e7       	ldi	r20, 0x7A	; 122
     d7a:	53 e4       	ldi	r21, 0x43	; 67
     d7c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d7e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	98 89       	ldd	r25, Y+16	; 0x10
     d84:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	89 8b       	std	Y+17, r24	; 0x11
     d8e:	9a 8b       	std	Y+18, r25	; 0x12
     d90:	ab 8b       	std	Y+19, r26	; 0x13
     d92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	69 89       	ldd	r22, Y+17	; 0x11
     d9e:	7a 89       	ldd	r23, Y+18	; 0x12
     da0:	8b 89       	ldd	r24, Y+19	; 0x13
     da2:	9c 89       	ldd	r25, Y+20	; 0x14
     da4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	2c f4       	brge	.+10     	; 0xdb6 <LCD_Command+0x8d8>
		__ticks = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9e 8b       	std	Y+22, r25	; 0x16
     db2:	8d 8b       	std	Y+21, r24	; 0x15
     db4:	3f c0       	rjmp	.+126    	; 0xe34 <LCD_Command+0x956>
	else if (__tmp > 65535)
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	4f e7       	ldi	r20, 0x7F	; 127
     dbc:	57 e4       	ldi	r21, 0x47	; 71
     dbe:	69 89       	ldd	r22, Y+17	; 0x11
     dc0:	7a 89       	ldd	r23, Y+18	; 0x12
     dc2:	8b 89       	ldd	r24, Y+19	; 0x13
     dc4:	9c 89       	ldd	r25, Y+20	; 0x14
     dc6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     dca:	18 16       	cp	r1, r24
     dcc:	4c f5       	brge	.+82     	; 0xe20 <LCD_Command+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	6d 85       	ldd	r22, Y+13	; 0x0d
     dd8:	7e 85       	ldd	r23, Y+14	; 0x0e
     dda:	8f 85       	ldd	r24, Y+15	; 0x0f
     ddc:	98 89       	ldd	r25, Y+16	; 0x10
     dde:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <LCD_Command+0x938>
     df8:	89 e1       	ldi	r24, 0x19	; 25
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	98 8f       	std	Y+24, r25	; 0x18
     dfe:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e00:	8f 89       	ldd	r24, Y+23	; 0x17
     e02:	98 8d       	ldd	r25, Y+24	; 0x18
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <LCD_Command+0x926>
     e08:	98 8f       	std	Y+24, r25	; 0x18
     e0a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	8d 89       	ldd	r24, Y+21	; 0x15
     e0e:	9e 89       	ldd	r25, Y+22	; 0x16
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	9e 8b       	std	Y+22, r25	; 0x16
     e14:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	8d 89       	ldd	r24, Y+21	; 0x15
     e18:	9e 89       	ldd	r25, Y+22	; 0x16
     e1a:	89 2b       	or	r24, r25
     e1c:	69 f7       	brne	.-38     	; 0xdf8 <LCD_Command+0x91a>
    _delay_ms(2);
}
     e1e:	14 c0       	rjmp	.+40     	; 0xe48 <LCD_Command+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e20:	69 89       	ldd	r22, Y+17	; 0x11
     e22:	7a 89       	ldd	r23, Y+18	; 0x12
     e24:	8b 89       	ldd	r24, Y+19	; 0x13
     e26:	9c 89       	ldd	r25, Y+20	; 0x14
     e28:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9e 8b       	std	Y+22, r25	; 0x16
     e32:	8d 8b       	std	Y+21, r24	; 0x15
     e34:	8d 89       	ldd	r24, Y+21	; 0x15
     e36:	9e 89       	ldd	r25, Y+22	; 0x16
     e38:	9a 8f       	std	Y+26, r25	; 0x1a
     e3a:	89 8f       	std	Y+25, r24	; 0x19
     e3c:	89 8d       	ldd	r24, Y+25	; 0x19
     e3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <LCD_Command+0x962>
     e44:	9a 8f       	std	Y+26, r25	; 0x1a
     e46:	89 8f       	std	Y+25, r24	; 0x19
     e48:	00 00       	nop
     e4a:	c1 59       	subi	r28, 0x91	; 145
     e4c:	df 4f       	sbci	r29, 0xFF	; 255
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <LCD_Init>:

void LCD_Init(void)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	2e 97       	sbiw	r28, 0x0e	; 14
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
    LCD_DDR = 0xFF;
     e76:	87 e3       	ldi	r24, 0x37	; 55
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 ea       	ldi	r26, 0xA0	; 160
     e86:	b1 e4       	ldi	r27, 0x41	; 65
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	ab 83       	std	Y+3, r26	; 0x03
     e8e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a e7       	ldi	r20, 0x7A	; 122
     e96:	53 e4       	ldi	r21, 0x43	; 67
     e98:	69 81       	ldd	r22, Y+1	; 0x01
     e9a:	7a 81       	ldd	r23, Y+2	; 0x02
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	af 83       	std	Y+7, r26	; 0x07
     eae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	6d 81       	ldd	r22, Y+5	; 0x05
     eba:	7e 81       	ldd	r23, Y+6	; 0x06
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <LCD_Init+0x70>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9a 87       	std	Y+10, r25	; 0x0a
     ece:	89 87       	std	Y+9, r24	; 0x09
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <LCD_Init+0xee>
	else if (__tmp > 65535)
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	6d 81       	ldd	r22, Y+5	; 0x05
     edc:	7e 81       	ldd	r23, Y+6	; 0x06
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <LCD_Init+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	69 81       	ldd	r22, Y+1	; 0x01
     ef4:	7a 81       	ldd	r23, Y+2	; 0x02
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9a 87       	std	Y+10, r25	; 0x0a
     f10:	89 87       	std	Y+9, r24	; 0x09
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <LCD_Init+0xd0>
     f14:	89 e1       	ldi	r24, 0x19	; 25
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9c 87       	std	Y+12, r25	; 0x0c
     f1a:	8b 87       	std	Y+11, r24	; 0x0b
     f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCD_Init+0xbe>
     f24:	9c 87       	std	Y+12, r25	; 0x0c
     f26:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9a 87       	std	Y+10, r25	; 0x0a
     f30:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	89 2b       	or	r24, r25
     f38:	69 f7       	brne	.-38     	; 0xf14 <LCD_Init+0xb2>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <LCD_Init+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	6d 81       	ldd	r22, Y+5	; 0x05
     f3e:	7e 81       	ldd	r23, Y+6	; 0x06
     f40:	8f 81       	ldd	r24, Y+7	; 0x07
     f42:	98 85       	ldd	r25, Y+8	; 0x08
     f44:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9a 87       	std	Y+10, r25	; 0x0a
     f4e:	89 87       	std	Y+9, r24	; 0x09
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	9e 87       	std	Y+14, r25	; 0x0e
     f56:	8d 87       	std	Y+13, r24	; 0x0d
     f58:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_Init+0xfa>
     f60:	9e 87       	std	Y+14, r25	; 0x0e
     f62:	8d 87       	std	Y+13, r24	; 0x0d
    _delay_ms(20);
    LCD_Command(0x02);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    LCD_Command(0x28);
     f6a:	88 e2       	ldi	r24, 0x28	; 40
     f6c:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    LCD_Command(0x0C);
     f70:	8c e0       	ldi	r24, 0x0C	; 12
     f72:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    LCD_Command(0x06);
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    LCD_Command(0x01);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
}
     f82:	00 00       	nop
     f84:	2e 96       	adiw	r28, 0x0e	; 14
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <LCD_Clear>:

void LCD_Clear(void)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
    LCD_Command(0x01);     // Clear display
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a0 ea       	ldi	r26, 0xA0	; 160
     fb6:	b0 e4       	ldi	r27, 0x40	; 64
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	ab 83       	std	Y+3, r26	; 0x03
     fbe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4a e7       	ldi	r20, 0x7A	; 122
     fc6:	53 e4       	ldi	r21, 0x43	; 67
     fc8:	69 81       	ldd	r22, Y+1	; 0x01
     fca:	7a 81       	ldd	r23, Y+2	; 0x02
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	8b 8b       	std	Y+19, r24	; 0x13
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	ad 8b       	std	Y+21, r26	; 0x15
     fde:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	6b 89       	ldd	r22, Y+19	; 0x13
     fea:	7c 89       	ldd	r23, Y+20	; 0x14
     fec:	8d 89       	ldd	r24, Y+21	; 0x15
     fee:	9e 89       	ldd	r25, Y+22	; 0x16
     ff0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
     ff4:	88 23       	and	r24, r24
     ff6:	2c f4       	brge	.+10     	; 0x1002 <LCD_Clear+0x6c>
		__ticks = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	98 8f       	std	Y+24, r25	; 0x18
     ffe:	8f 8b       	std	Y+23, r24	; 0x17
    1000:	3f c0       	rjmp	.+126    	; 0x1080 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	4f e7       	ldi	r20, 0x7F	; 127
    1008:	57 e4       	ldi	r21, 0x47	; 71
    100a:	6b 89       	ldd	r22, Y+19	; 0x13
    100c:	7c 89       	ldd	r23, Y+20	; 0x14
    100e:	8d 89       	ldd	r24, Y+21	; 0x15
    1010:	9e 89       	ldd	r25, Y+22	; 0x16
    1012:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    1016:	18 16       	cp	r1, r24
    1018:	4c f5       	brge	.+82     	; 0x106c <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e2       	ldi	r20, 0x20	; 32
    1020:	51 e4       	ldi	r21, 0x41	; 65
    1022:	69 81       	ldd	r22, Y+1	; 0x01
    1024:	7a 81       	ldd	r23, Y+2	; 0x02
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	98 8f       	std	Y+24, r25	; 0x18
    1040:	8f 8b       	std	Y+23, r24	; 0x17
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <LCD_Clear+0xcc>
    1044:	89 e1       	ldi	r24, 0x19	; 25
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9a 8f       	std	Y+26, r25	; 0x1a
    104a:	89 8f       	std	Y+25, r24	; 0x19
    104c:	89 8d       	ldd	r24, Y+25	; 0x19
    104e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <LCD_Clear+0xba>
    1054:	9a 8f       	std	Y+26, r25	; 0x1a
    1056:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	98 8f       	std	Y+24, r25	; 0x18
    1060:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	8f 89       	ldd	r24, Y+23	; 0x17
    1064:	98 8d       	ldd	r25, Y+24	; 0x18
    1066:	89 2b       	or	r24, r25
    1068:	69 f7       	brne	.-38     	; 0x1044 <LCD_Clear+0xae>
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106c:	6b 89       	ldd	r22, Y+19	; 0x13
    106e:	7c 89       	ldd	r23, Y+20	; 0x14
    1070:	8d 89       	ldd	r24, Y+21	; 0x15
    1072:	9e 89       	ldd	r25, Y+22	; 0x16
    1074:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	98 8f       	std	Y+24, r25	; 0x18
    107e:	8f 8b       	std	Y+23, r24	; 0x17
    1080:	8f 89       	ldd	r24, Y+23	; 0x17
    1082:	98 8d       	ldd	r25, Y+24	; 0x18
    1084:	9c 8f       	std	Y+28, r25	; 0x1c
    1086:	8b 8f       	std	Y+27, r24	; 0x1b
    1088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    108a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <LCD_Clear+0xf6>
    1090:	9c 8f       	std	Y+28, r25	; 0x1c
    1092:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(5);          // بدل 2ms خلّيها 5ms للآمان
    LCD_Command(0x80);     // Go to DDRAM address 0 (Home)
    1094:	80 e8       	ldi	r24, 0x80	; 128
    1096:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e8       	ldi	r26, 0x80	; 128
    10a0:	bf e3       	ldi	r27, 0x3F	; 63
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	af 83       	std	Y+7, r26	; 0x07
    10a8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	53 e4       	ldi	r21, 0x43	; 67
    10b2:	6d 81       	ldd	r22, Y+5	; 0x05
    10b4:	7e 81       	ldd	r23, Y+6	; 0x06
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	89 87       	std	Y+9, r24	; 0x09
    10c4:	9a 87       	std	Y+10, r25	; 0x0a
    10c6:	ab 87       	std	Y+11, r26	; 0x0b
    10c8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	69 85       	ldd	r22, Y+9	; 0x09
    10d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10da:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    10de:	88 23       	and	r24, r24
    10e0:	2c f4       	brge	.+10     	; 0x10ec <LCD_Clear+0x156>
		__ticks = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9e 87       	std	Y+14, r25	; 0x0e
    10e8:	8d 87       	std	Y+13, r24	; 0x0d
    10ea:	3f c0       	rjmp	.+126    	; 0x116a <LCD_Clear+0x1d4>
	else if (__tmp > 65535)
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	69 85       	ldd	r22, Y+9	; 0x09
    10f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    10f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    10fc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    1100:	18 16       	cp	r1, r24
    1102:	4c f5       	brge	.+82     	; 0x1156 <LCD_Clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	6d 81       	ldd	r22, Y+5	; 0x05
    110e:	7e 81       	ldd	r23, Y+6	; 0x06
    1110:	8f 81       	ldd	r24, Y+7	; 0x07
    1112:	98 85       	ldd	r25, Y+8	; 0x08
    1114:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 87       	std	Y+14, r25	; 0x0e
    112a:	8d 87       	std	Y+13, r24	; 0x0d
    112c:	0f c0       	rjmp	.+30     	; 0x114c <LCD_Clear+0x1b6>
    112e:	89 e1       	ldi	r24, 0x19	; 25
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	98 8b       	std	Y+16, r25	; 0x10
    1134:	8f 87       	std	Y+15, r24	; 0x0f
    1136:	8f 85       	ldd	r24, Y+15	; 0x0f
    1138:	98 89       	ldd	r25, Y+16	; 0x10
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <LCD_Clear+0x1a4>
    113e:	98 8b       	std	Y+16, r25	; 0x10
    1140:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	9e 85       	ldd	r25, Y+14	; 0x0e
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	9e 87       	std	Y+14, r25	; 0x0e
    114a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	89 2b       	or	r24, r25
    1152:	69 f7       	brne	.-38     	; 0x112e <LCD_Clear+0x198>
    _delay_ms(1);
}
    1154:	14 c0       	rjmp	.+40     	; 0x117e <LCD_Clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1156:	69 85       	ldd	r22, Y+9	; 0x09
    1158:	7a 85       	ldd	r23, Y+10	; 0x0a
    115a:	8b 85       	ldd	r24, Y+11	; 0x0b
    115c:	9c 85       	ldd	r25, Y+12	; 0x0c
    115e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9e 87       	std	Y+14, r25	; 0x0e
    1168:	8d 87       	std	Y+13, r24	; 0x0d
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	9a 8b       	std	Y+18, r25	; 0x12
    1170:	89 8b       	std	Y+17, r24	; 0x11
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	9a 89       	ldd	r25, Y+18	; 0x12
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <LCD_Clear+0x1e0>
    117a:	9a 8b       	std	Y+18, r25	; 0x12
    117c:	89 8b       	std	Y+17, r24	; 0x11
    117e:	00 00       	nop
    1180:	6c 96       	adiw	r28, 0x1c	; 28
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <LCD_WriteChar>:

void LCD_WriteChar(char c)
{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	cf 54       	subi	r28, 0x4F	; 79
    11a0:	d1 09       	sbc	r29, r1
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	9e 01       	movw	r18, r28
    11ae:	21 5b       	subi	r18, 0xB1	; 177
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	f9 01       	movw	r30, r18
    11b4:	80 83       	st	Z, r24
    LCD_PORT = (LCD_PORT & 0x0F) | (c & 0xF0);
    11b6:	88 e3       	ldi	r24, 0x38	; 56
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e3       	ldi	r18, 0x38	; 56
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	42 2f       	mov	r20, r18
    11c4:	4f 70       	andi	r20, 0x0F	; 15
    11c6:	9e 01       	movw	r18, r28
    11c8:	21 5b       	subi	r18, 0xB1	; 177
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	f9 01       	movw	r30, r18
    11ce:	20 81       	ld	r18, Z
    11d0:	20 7f       	andi	r18, 0xF0	; 240
    11d2:	24 2b       	or	r18, r20
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
    LCD_PORT |= (1<<RS);
    11d8:	88 e3       	ldi	r24, 0x38	; 56
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	28 e3       	ldi	r18, 0x38	; 56
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	f9 01       	movw	r30, r18
    11e2:	20 81       	ld	r18, Z
    11e4:	22 60       	ori	r18, 0x02	; 2
    11e6:	fc 01       	movw	r30, r24
    11e8:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
    11ea:	88 e3       	ldi	r24, 0x38	; 56
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	28 e3       	ldi	r18, 0x38	; 56
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	f9 01       	movw	r30, r18
    11f4:	20 81       	ld	r18, Z
    11f6:	21 60       	ori	r18, 0x01	; 1
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e8       	ldi	r26, 0x80	; 128
    1202:	bf e3       	ldi	r27, 0x3F	; 63
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	ab 83       	std	Y+3, r26	; 0x03
    120a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    120c:	2b ea       	ldi	r18, 0xAB	; 171
    120e:	3a ea       	ldi	r19, 0xAA	; 170
    1210:	4a ea       	ldi	r20, 0xAA	; 170
    1212:	5e e3       	ldi	r21, 0x3E	; 62
    1214:	69 81       	ldd	r22, Y+1	; 0x01
    1216:	7a 81       	ldd	r23, Y+2	; 0x02
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8b ab       	std	Y+51, r24	; 0x33
    1226:	9c ab       	std	Y+52, r25	; 0x34
    1228:	ad ab       	std	Y+53, r26	; 0x35
    122a:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5e e3       	ldi	r21, 0x3E	; 62
    1234:	69 81       	ldd	r22, Y+1	; 0x01
    1236:	7a 81       	ldd	r23, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f ab       	std	Y+55, r24	; 0x37
    1246:	98 af       	std	Y+56, r25	; 0x38
    1248:	a9 af       	std	Y+57, r26	; 0x39
    124a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	6b a9       	ldd	r22, Y+51	; 0x33
    1256:	7c a9       	ldd	r23, Y+52	; 0x34
    1258:	8d a9       	ldd	r24, Y+53	; 0x35
    125a:	9e a9       	ldd	r25, Y+54	; 0x36
    125c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    1260:	88 23       	and	r24, r24
    1262:	1c f4       	brge	.+6      	; 0x126a <LCD_WriteChar+0xd8>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	8b af       	std	Y+59, r24	; 0x3b
    1268:	0c c1       	rjmp	.+536    	; 0x1482 <LCD_WriteChar+0x2f0>
	else if (__tmp2 > 65535)
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	6f a9       	ldd	r22, Y+55	; 0x37
    1274:	78 ad       	ldd	r23, Y+56	; 0x38
    1276:	89 ad       	ldd	r24, Y+57	; 0x39
    1278:	9a ad       	ldd	r25, Y+58	; 0x3a
    127a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    127e:	18 16       	cp	r1, r24
    1280:	0c f0       	brlt	.+2      	; 0x1284 <LCD_WriteChar+0xf2>
    1282:	c1 c0       	rjmp	.+386    	; 0x1406 <LCD_WriteChar+0x274>
	{
		_delay_ms(__us / 1000.0);
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	7a 81       	ldd	r23, Y+2	; 0x02
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8c af       	std	Y+60, r24	; 0x3c
    129e:	9d af       	std	Y+61, r25	; 0x3d
    12a0:	ae af       	std	Y+62, r26	; 0x3e
    12a2:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	8e 01       	movw	r16, r28
    12a6:	00 5c       	subi	r16, 0xC0	; 192
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a e7       	ldi	r20, 0x7A	; 122
    12b0:	53 e4       	ldi	r21, 0x43	; 67
    12b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    12b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    12b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12ba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	f8 01       	movw	r30, r16
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12cc:	ce 01       	movw	r24, r28
    12ce:	80 5c       	subi	r24, 0xC0	; 192
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	fc 01       	movw	r30, r24
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	4c f4       	brge	.+18     	; 0x12fe <LCD_WriteChar+0x16c>
		__ticks = 1;
    12ec:	ce 01       	movw	r24, r28
    12ee:	8c 5b       	subi	r24, 0xBC	; 188
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	21 e0       	ldi	r18, 0x01	; 1
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	fc 01       	movw	r30, r24
    12f8:	31 83       	std	Z+1, r19	; 0x01
    12fa:	20 83       	st	Z, r18
    12fc:	69 c0       	rjmp	.+210    	; 0x13d0 <LCD_WriteChar+0x23e>
	else if (__tmp > 65535)
    12fe:	ce 01       	movw	r24, r28
    1300:	80 5c       	subi	r24, 0xC0	; 192
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	fc 01       	movw	r30, r24
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    131a:	18 16       	cp	r1, r24
    131c:	0c f0       	brlt	.+2      	; 0x1320 <LCD_WriteChar+0x18e>
    131e:	46 c0       	rjmp	.+140    	; 0x13ac <LCD_WriteChar+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	6c ad       	ldd	r22, Y+60	; 0x3c
    132a:	7d ad       	ldd	r23, Y+61	; 0x3d
    132c:	8e ad       	ldd	r24, Y+62	; 0x3e
    132e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1330:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8e 01       	movw	r16, r28
    133a:	0c 5b       	subi	r16, 0xBC	; 188
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	f8 01       	movw	r30, r16
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
    1350:	24 c0       	rjmp	.+72     	; 0x139a <LCD_WriteChar+0x208>
    1352:	ce 01       	movw	r24, r28
    1354:	8a 5b       	subi	r24, 0xBA	; 186
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	29 e1       	ldi	r18, 0x19	; 25
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	fc 01       	movw	r30, r24
    135e:	31 83       	std	Z+1, r19	; 0x01
    1360:	20 83       	st	Z, r18
    1362:	ce 01       	movw	r24, r28
    1364:	8a 5b       	subi	r24, 0xBA	; 186
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	fc 01       	movw	r30, r24
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_WriteChar+0x1dc>
    1372:	9e 01       	movw	r18, r28
    1374:	2a 5b       	subi	r18, 0xBA	; 186
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	f9 01       	movw	r30, r18
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	ce 01       	movw	r24, r28
    1380:	8c 5b       	subi	r24, 0xBC	; 188
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	9e 01       	movw	r18, r28
    1386:	2c 5b       	subi	r18, 0xBC	; 188
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	f9 01       	movw	r30, r18
    138c:	20 81       	ld	r18, Z
    138e:	31 81       	ldd	r19, Z+1	; 0x01
    1390:	21 50       	subi	r18, 0x01	; 1
    1392:	31 09       	sbc	r19, r1
    1394:	fc 01       	movw	r30, r24
    1396:	31 83       	std	Z+1, r19	; 0x01
    1398:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	ce 01       	movw	r24, r28
    139c:	8c 5b       	subi	r24, 0xBC	; 188
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	89 2b       	or	r24, r25
    13a8:	a1 f6       	brne	.-88     	; 0x1352 <LCD_WriteChar+0x1c0>
    13aa:	6b c0       	rjmp	.+214    	; 0x1482 <LCD_WriteChar+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	8e 01       	movw	r16, r28
    13ae:	0c 5b       	subi	r16, 0xBC	; 188
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	ce 01       	movw	r24, r28
    13b4:	80 5c       	subi	r24, 0xC0	; 192
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	fc 01       	movw	r30, r24
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	f8 01       	movw	r30, r16
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
    13d0:	ce 01       	movw	r24, r28
    13d2:	88 5b       	subi	r24, 0xB8	; 184
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	9e 01       	movw	r18, r28
    13d8:	2c 5b       	subi	r18, 0xBC	; 188
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	31 81       	ldd	r19, Z+1	; 0x01
    13e2:	fc 01       	movw	r30, r24
    13e4:	31 83       	std	Z+1, r19	; 0x01
    13e6:	20 83       	st	Z, r18
    13e8:	ce 01       	movw	r24, r28
    13ea:	88 5b       	subi	r24, 0xB8	; 184
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_WriteChar+0x262>
    13f8:	9e 01       	movw	r18, r28
    13fa:	28 5b       	subi	r18, 0xB8	; 184
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	f9 01       	movw	r30, r18
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
    1404:	3e c0       	rjmp	.+124    	; 0x1482 <LCD_WriteChar+0x2f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	6b a9       	ldd	r22, Y+51	; 0x33
    1410:	7c a9       	ldd	r23, Y+52	; 0x34
    1412:	8d a9       	ldd	r24, Y+53	; 0x35
    1414:	9e a9       	ldd	r25, Y+54	; 0x36
    1416:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <LCD_WriteChar+0x2de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    141e:	8e 01       	movw	r16, r28
    1420:	06 5b       	subi	r16, 0xB6	; 182
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	6f a9       	ldd	r22, Y+55	; 0x37
    1426:	78 ad       	ldd	r23, Y+56	; 0x38
    1428:	89 ad       	ldd	r24, Y+57	; 0x39
    142a:	9a ad       	ldd	r25, Y+58	; 0x3a
    142c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	ce 01       	movw	r24, r28
    143c:	84 5b       	subi	r24, 0xB4	; 180
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	9e 01       	movw	r18, r28
    1442:	26 5b       	subi	r18, 0xB6	; 182
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	31 81       	ldd	r19, Z+1	; 0x01
    144c:	fc 01       	movw	r30, r24
    144e:	31 83       	std	Z+1, r19	; 0x01
    1450:	20 83       	st	Z, r18
    1452:	ce 01       	movw	r24, r28
    1454:	84 5b       	subi	r24, 0xB4	; 180
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <LCD_WriteChar+0x2cc>
    1462:	9e 01       	movw	r18, r28
    1464:	24 5b       	subi	r18, 0xB4	; 180
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	f9 01       	movw	r30, r18
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	1c c0       	rjmp	.+56     	; 0x14a8 <LCD_WriteChar+0x316>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1470:	6b a9       	ldd	r22, Y+51	; 0x33
    1472:	7c a9       	ldd	r23, Y+52	; 0x34
    1474:	8d a9       	ldd	r24, Y+53	; 0x35
    1476:	9e a9       	ldd	r25, Y+54	; 0x36
    1478:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8b af       	std	Y+59, r24	; 0x3b
    1482:	ce 01       	movw	r24, r28
    1484:	82 5b       	subi	r24, 0xB2	; 178
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	2b ad       	ldd	r18, Y+59	; 0x3b
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    148e:	ce 01       	movw	r24, r28
    1490:	82 5b       	subi	r24, 0xB2	; 178
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	fc 01       	movw	r30, r24
    1496:	80 81       	ld	r24, Z
    1498:	28 2f       	mov	r18, r24
    149a:	2a 95       	dec	r18
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_WriteChar+0x308>
    149e:	ce 01       	movw	r24, r28
    14a0:	82 5b       	subi	r24, 0xB2	; 178
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
    14a8:	88 e3       	ldi	r24, 0x38	; 56
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	28 e3       	ldi	r18, 0x38	; 56
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	2e 7f       	andi	r18, 0xFE	; 254
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18

    LCD_PORT = (LCD_PORT & 0x0F) | (c<<4);
    14ba:	88 e3       	ldi	r24, 0x38	; 56
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	28 e3       	ldi	r18, 0x38	; 56
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	42 2f       	mov	r20, r18
    14c8:	4f 70       	andi	r20, 0x0F	; 15
    14ca:	9e 01       	movw	r18, r28
    14cc:	21 5b       	subi	r18, 0xB1	; 177
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	f9 01       	movw	r30, r18
    14d2:	20 81       	ld	r18, Z
    14d4:	22 2f       	mov	r18, r18
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	22 95       	swap	r18
    14da:	32 95       	swap	r19
    14dc:	30 7f       	andi	r19, 0xF0	; 240
    14de:	32 27       	eor	r19, r18
    14e0:	20 7f       	andi	r18, 0xF0	; 240
    14e2:	32 27       	eor	r19, r18
    14e4:	24 2b       	or	r18, r20
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
    14ea:	88 e3       	ldi	r24, 0x38	; 56
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	28 e3       	ldi	r18, 0x38	; 56
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 81       	ld	r18, Z
    14f6:	21 60       	ori	r18, 0x01	; 1
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e8       	ldi	r26, 0x80	; 128
    1502:	bf e3       	ldi	r27, 0x3F	; 63
    1504:	8d 83       	std	Y+5, r24	; 0x05
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	af 83       	std	Y+7, r26	; 0x07
    150a:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    150c:	2b ea       	ldi	r18, 0xAB	; 171
    150e:	3a ea       	ldi	r19, 0xAA	; 170
    1510:	4a ea       	ldi	r20, 0xAA	; 170
    1512:	5e e3       	ldi	r21, 0x3E	; 62
    1514:	6d 81       	ldd	r22, Y+5	; 0x05
    1516:	7e 81       	ldd	r23, Y+6	; 0x06
    1518:	8f 81       	ldd	r24, Y+7	; 0x07
    151a:	98 85       	ldd	r25, Y+8	; 0x08
    151c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8f 8b       	std	Y+23, r24	; 0x17
    1526:	98 8f       	std	Y+24, r25	; 0x18
    1528:	a9 8f       	std	Y+25, r26	; 0x19
    152a:	ba 8f       	std	Y+26, r27	; 0x1a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5e e3       	ldi	r21, 0x3E	; 62
    1534:	6d 81       	ldd	r22, Y+5	; 0x05
    1536:	7e 81       	ldd	r23, Y+6	; 0x06
    1538:	8f 81       	ldd	r24, Y+7	; 0x07
    153a:	98 85       	ldd	r25, Y+8	; 0x08
    153c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8b 8f       	std	Y+27, r24	; 0x1b
    1546:	9c 8f       	std	Y+28, r25	; 0x1c
    1548:	ad 8f       	std	Y+29, r26	; 0x1d
    154a:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	6f 89       	ldd	r22, Y+23	; 0x17
    1556:	78 8d       	ldd	r23, Y+24	; 0x18
    1558:	89 8d       	ldd	r24, Y+25	; 0x19
    155a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    155c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    1560:	88 23       	and	r24, r24
    1562:	1c f4       	brge	.+6      	; 0x156a <LCD_WriteChar+0x3d8>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	8f 8f       	std	Y+31, r24	; 0x1f
    1568:	b2 c0       	rjmp	.+356    	; 0x16ce <LCD_WriteChar+0x53c>
	else if (__tmp2 > 65535)
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1574:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    157e:	18 16       	cp	r1, r24
    1580:	0c f0       	brlt	.+2      	; 0x1584 <LCD_WriteChar+0x3f2>
    1582:	7b c0       	rjmp	.+246    	; 0x167a <LCD_WriteChar+0x4e8>
	{
		_delay_ms(__us / 1000.0);
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a e7       	ldi	r20, 0x7A	; 122
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	6d 81       	ldd	r22, Y+5	; 0x05
    158e:	7e 81       	ldd	r23, Y+6	; 0x06
    1590:	8f 81       	ldd	r24, Y+7	; 0x07
    1592:	98 85       	ldd	r25, Y+8	; 0x08
    1594:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	88 a3       	std	Y+32, r24	; 0x20
    159e:	99 a3       	std	Y+33, r25	; 0x21
    15a0:	aa a3       	std	Y+34, r26	; 0x22
    15a2:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	68 a1       	ldd	r22, Y+32	; 0x20
    15ae:	79 a1       	ldd	r23, Y+33	; 0x21
    15b0:	8a a1       	ldd	r24, Y+34	; 0x22
    15b2:	9b a1       	ldd	r25, Y+35	; 0x23
    15b4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8c a3       	std	Y+36, r24	; 0x24
    15be:	9d a3       	std	Y+37, r25	; 0x25
    15c0:	ae a3       	std	Y+38, r26	; 0x26
    15c2:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	6c a1       	ldd	r22, Y+36	; 0x24
    15ce:	7d a1       	ldd	r23, Y+37	; 0x25
    15d0:	8e a1       	ldd	r24, Y+38	; 0x26
    15d2:	9f a1       	ldd	r25, Y+39	; 0x27
    15d4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <LCD_WriteChar+0x454>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	99 a7       	std	Y+41, r25	; 0x29
    15e2:	88 a7       	std	Y+40, r24	; 0x28
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <LCD_WriteChar+0x4d2>
	else if (__tmp > 65535)
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	6c a1       	ldd	r22, Y+36	; 0x24
    15f0:	7d a1       	ldd	r23, Y+37	; 0x25
    15f2:	8e a1       	ldd	r24, Y+38	; 0x26
    15f4:	9f a1       	ldd	r25, Y+39	; 0x27
    15f6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <LCD_WriteChar+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	68 a1       	ldd	r22, Y+32	; 0x20
    1608:	79 a1       	ldd	r23, Y+33	; 0x21
    160a:	8a a1       	ldd	r24, Y+34	; 0x22
    160c:	9b a1       	ldd	r25, Y+35	; 0x23
    160e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	99 a7       	std	Y+41, r25	; 0x29
    1624:	88 a7       	std	Y+40, r24	; 0x28
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <LCD_WriteChar+0x4b4>
    1628:	89 e1       	ldi	r24, 0x19	; 25
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9b a7       	std	Y+43, r25	; 0x2b
    162e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1630:	8a a5       	ldd	r24, Y+42	; 0x2a
    1632:	9b a5       	ldd	r25, Y+43	; 0x2b
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_WriteChar+0x4a2>
    1638:	9b a7       	std	Y+43, r25	; 0x2b
    163a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	88 a5       	ldd	r24, Y+40	; 0x28
    163e:	99 a5       	ldd	r25, Y+41	; 0x29
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	99 a7       	std	Y+41, r25	; 0x29
    1644:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	88 a5       	ldd	r24, Y+40	; 0x28
    1648:	99 a5       	ldd	r25, Y+41	; 0x29
    164a:	89 2b       	or	r24, r25
    164c:	69 f7       	brne	.-38     	; 0x1628 <LCD_WriteChar+0x496>
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <LCD_WriteChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6c a1       	ldd	r22, Y+36	; 0x24
    1652:	7d a1       	ldd	r23, Y+37	; 0x25
    1654:	8e a1       	ldd	r24, Y+38	; 0x26
    1656:	9f a1       	ldd	r25, Y+39	; 0x27
    1658:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	99 a7       	std	Y+41, r25	; 0x29
    1662:	88 a7       	std	Y+40, r24	; 0x28
    1664:	88 a5       	ldd	r24, Y+40	; 0x28
    1666:	99 a5       	ldd	r25, Y+41	; 0x29
    1668:	9d a7       	std	Y+45, r25	; 0x2d
    166a:	8c a7       	std	Y+44, r24	; 0x2c
    166c:	8c a5       	ldd	r24, Y+44	; 0x2c
    166e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_WriteChar+0x4de>
    1674:	9d a7       	std	Y+45, r25	; 0x2d
    1676:	8c a7       	std	Y+44, r24	; 0x2c
    1678:	2a c0       	rjmp	.+84     	; 0x16ce <LCD_WriteChar+0x53c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	6f 89       	ldd	r22, Y+23	; 0x17
    1684:	78 8d       	ldd	r23, Y+24	; 0x18
    1686:	89 8d       	ldd	r24, Y+25	; 0x19
    1688:	9a 8d       	ldd	r25, Y+26	; 0x1a
    168a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    168e:	18 16       	cp	r1, r24
    1690:	ac f4       	brge	.+42     	; 0x16bc <LCD_WriteChar+0x52a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1692:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1694:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1698:	9e 8d       	ldd	r25, Y+30	; 0x1e
    169a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9f a7       	std	Y+47, r25	; 0x2f
    16a4:	8e a7       	std	Y+46, r24	; 0x2e
    16a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    16a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    16aa:	99 ab       	std	Y+49, r25	; 0x31
    16ac:	88 ab       	std	Y+48, r24	; 0x30
    16ae:	88 a9       	ldd	r24, Y+48	; 0x30
    16b0:	99 a9       	ldd	r25, Y+49	; 0x31
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_WriteChar+0x520>
    16b6:	99 ab       	std	Y+49, r25	; 0x31
    16b8:	88 ab       	std	Y+48, r24	; 0x30
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <LCD_WriteChar+0x548>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16bc:	6f 89       	ldd	r22, Y+23	; 0x17
    16be:	78 8d       	ldd	r23, Y+24	; 0x18
    16c0:	89 8d       	ldd	r24, Y+25	; 0x19
    16c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16c4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 8f       	std	Y+31, r24	; 0x1f
    16ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16d0:	8a ab       	std	Y+50, r24	; 0x32
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16d2:	8a a9       	ldd	r24, Y+50	; 0x32
    16d4:	8a 95       	dec	r24
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_WriteChar+0x542>
    16d8:	8a ab       	std	Y+50, r24	; 0x32
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
    16da:	88 e3       	ldi	r24, 0x38	; 56
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	28 e3       	ldi	r18, 0x38	; 56
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	f9 01       	movw	r30, r18
    16e4:	20 81       	ld	r18, Z
    16e6:	2e 7f       	andi	r18, 0xFE	; 254
    16e8:	fc 01       	movw	r30, r24
    16ea:	20 83       	st	Z, r18
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e4       	ldi	r27, 0x40	; 64
    16f4:	89 87       	std	Y+9, r24	; 0x09
    16f6:	9a 87       	std	Y+10, r25	; 0x0a
    16f8:	ab 87       	std	Y+11, r26	; 0x0b
    16fa:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a e7       	ldi	r20, 0x7A	; 122
    1702:	53 e4       	ldi	r21, 0x43	; 67
    1704:	69 85       	ldd	r22, Y+9	; 0x09
    1706:	7a 85       	ldd	r23, Y+10	; 0x0a
    1708:	8b 85       	ldd	r24, Y+11	; 0x0b
    170a:	9c 85       	ldd	r25, Y+12	; 0x0c
    170c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8d 87       	std	Y+13, r24	; 0x0d
    1716:	9e 87       	std	Y+14, r25	; 0x0e
    1718:	af 87       	std	Y+15, r26	; 0x0f
    171a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	6d 85       	ldd	r22, Y+13	; 0x0d
    1726:	7e 85       	ldd	r23, Y+14	; 0x0e
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    1730:	88 23       	and	r24, r24
    1732:	2c f4       	brge	.+10     	; 0x173e <LCD_WriteChar+0x5ac>
		__ticks = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9a 8b       	std	Y+18, r25	; 0x12
    173a:	89 8b       	std	Y+17, r24	; 0x11
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <LCD_WriteChar+0x62a>
	else if (__tmp > 65535)
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	6d 85       	ldd	r22, Y+13	; 0x0d
    1748:	7e 85       	ldd	r23, Y+14	; 0x0e
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	98 89       	ldd	r25, Y+16	; 0x10
    174e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    1752:	18 16       	cp	r1, r24
    1754:	4c f5       	brge	.+82     	; 0x17a8 <LCD_WriteChar+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	69 85       	ldd	r22, Y+9	; 0x09
    1760:	7a 85       	ldd	r23, Y+10	; 0x0a
    1762:	8b 85       	ldd	r24, Y+11	; 0x0b
    1764:	9c 85       	ldd	r25, Y+12	; 0x0c
    1766:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9a 8b       	std	Y+18, r25	; 0x12
    177c:	89 8b       	std	Y+17, r24	; 0x11
    177e:	0f c0       	rjmp	.+30     	; 0x179e <LCD_WriteChar+0x60c>
    1780:	89 e1       	ldi	r24, 0x19	; 25
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_WriteChar+0x5fa>
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1794:	89 89       	ldd	r24, Y+17	; 0x11
    1796:	9a 89       	ldd	r25, Y+18	; 0x12
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	9a 8b       	std	Y+18, r25	; 0x12
    179c:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	9a 89       	ldd	r25, Y+18	; 0x12
    17a2:	89 2b       	or	r24, r25
    17a4:	69 f7       	brne	.-38     	; 0x1780 <LCD_WriteChar+0x5ee>
    _delay_ms(2);
}
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <LCD_WriteChar+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    17aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	98 89       	ldd	r25, Y+16	; 0x10
    17b0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9a 8b       	std	Y+18, r25	; 0x12
    17ba:	89 8b       	std	Y+17, r24	; 0x11
    17bc:	89 89       	ldd	r24, Y+17	; 0x11
    17be:	9a 89       	ldd	r25, Y+18	; 0x12
    17c0:	9e 8b       	std	Y+22, r25	; 0x16
    17c2:	8d 8b       	std	Y+21, r24	; 0x15
    17c4:	8d 89       	ldd	r24, Y+21	; 0x15
    17c6:	9e 89       	ldd	r25, Y+22	; 0x16
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_WriteChar+0x636>
    17cc:	9e 8b       	std	Y+22, r25	; 0x16
    17ce:	8d 8b       	std	Y+21, r24	; 0x15
    17d0:	00 00       	nop
    17d2:	c1 5b       	subi	r28, 0xB1	; 177
    17d4:	df 4f       	sbci	r29, 0xFF	; 255
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <LCD_WriteString>:

void LCD_WriteString(const char* str)
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <LCD_WriteString+0x6>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
    while(*str)
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <LCD_WriteString+0x26>
    {
        LCD_WriteChar(*str++);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	9c 01       	movw	r18, r24
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	3a 83       	std	Y+2, r19	; 0x02
    1806:	29 83       	std	Y+1, r18	; 0x01
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCD_WriteChar>
    _delay_ms(2);
}

void LCD_WriteString(const char* str)
{
    while(*str)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	fc 01       	movw	r30, r24
    1816:	80 81       	ld	r24, Z
    1818:	88 23       	and	r24, r24
    181a:	79 f7       	brne	.-34     	; 0x17fa <LCD_WriteString+0x10>
    {
        LCD_WriteChar(*str++);
    }
}
    181c:	00 00       	nop
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <LCD_WriteInteger>:

void LCD_WriteInteger(int num)
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	62 97       	sbiw	r28, 0x12	; 18
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	9a 8b       	std	Y+18, r25	; 0x12
    183e:	89 8b       	std	Y+17, r24	; 0x11
    char buffer[16];
    itoa(num, buffer, 10);
    1840:	89 89       	ldd	r24, Y+17	; 0x11
    1842:	9a 89       	ldd	r25, Y+18	; 0x12
    1844:	4a e0       	ldi	r20, 0x0A	; 10
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	9e 01       	movw	r18, r28
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	b9 01       	movw	r22, r18
    1850:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <itoa>
    LCD_WriteString(buffer);
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_WriteString>
}
    185c:	00 00       	nop
    185e:	62 96       	adiw	r28, 0x12	; 18
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <LCD_CreateCustomChar>:

void LCD_CreateCustomChar(uint8_t location, uint8_t *pattern)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	00 d0       	rcall	.+0      	; 0x1876 <LCD_CreateCustomChar+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <LCD_CreateCustomChar+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	7c 83       	std	Y+4, r23	; 0x04
    1880:	6b 83       	std	Y+3, r22	; 0x03
    location &= 0x07;                 // مسموح 0..7
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	87 70       	andi	r24, 0x07	; 7
    1886:	8a 83       	std	Y+2, r24	; 0x02
    LCD_Command(0x40 | (location<<3)); // عنوان CGRAM = 0x40 + (loc*8)
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
    for (uint8_t i = 0; i < 8; i++)
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <LCD_CreateCustomChar+0x50>
        LCD_WriteChar(pattern[i]);    // نكتب صفوف الباترن كـ Data
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	82 0f       	add	r24, r18
    18b0:	93 1f       	adc	r25, r19
    18b2:	fc 01       	movw	r30, r24
    18b4:	80 81       	ld	r24, Z
    18b6:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCD_WriteChar>

void LCD_CreateCustomChar(uint8_t location, uint8_t *pattern)
{
    location &= 0x07;                 // مسموح 0..7
    LCD_Command(0x40 | (location<<3)); // عنوان CGRAM = 0x40 + (loc*8)
    for (uint8_t i = 0; i < 8; i++)
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	78 f3       	brcs	.-34     	; 0x18a4 <LCD_CreateCustomChar+0x34>
        LCD_WriteChar(pattern[i]);    // نكتب صفوف الباترن كـ Data
    LCD_Command(0x80);                // رجوع لـ DDRAM
    18c6:	80 e8       	ldi	r24, 0x80	; 128
    18c8:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
}
    18cc:	00 00       	nop
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <LCD_GoTo>:

void LCD_GoTo(uint8_t row, uint8_t col)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <LCD_GoTo+0x6>
    18e2:	1f 92       	push	r1
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	6b 83       	std	Y+3, r22	; 0x03
    // row: 0 أو 1 / col: 0..15
    uint8_t base = (row == 0) ? 0x00 : 0x40;
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	88 23       	and	r24, r24
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <LCD_GoTo+0x1a>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <LCD_GoTo+0x1c>
    18f6:	80 e4       	ldi	r24, 0x40	; 64
    18f8:	89 83       	std	Y+1, r24	; 0x01
    LCD_Command(0x80 | (base + col));
    18fa:	99 81       	ldd	r25, Y+1	; 0x01
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	89 0f       	add	r24, r25
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Command>
}
    1906:	00 00       	nop
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <on_button_toggle_led>:
#define LED_DDR  DDRD
#define LED_PIN  PD5

volatile uint8_t counter = 1;

static void on_button_toggle_led(void) {
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    // INT0 -> toggle LED
    TOG_BIT(LED_PORT, LED_PIN);
    191c:	82 e3       	ldi	r24, 0x32	; 50
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	22 e3       	ldi	r18, 0x32	; 50
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	f9 01       	movw	r30, r18
    1926:	30 81       	ld	r19, Z
    1928:	20 e2       	ldi	r18, 0x20	; 32
    192a:	23 27       	eor	r18, r19
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
}
    1930:	00 00       	nop
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	08 95       	ret

00001938 <on_button_reset_counter>:

static void on_button_reset_counter(void) {
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    // INT1 -> reset counter to 1
    counter = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
    1946:	00 00       	nop
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <main>:

int main(void) {
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	2e 97       	sbiw	r28, 0x0e	; 14
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    // LED pin output
    SET_BIT(LED_DDR, LED_PIN);
    1962:	81 e3       	ldi	r24, 0x31	; 49
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	21 e3       	ldi	r18, 0x31	; 49
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	20 62       	ori	r18, 0x20	; 32
    1970:	fc 01       	movw	r30, r24
    1972:	20 83       	st	Z, r18
    CLR_BIT(LED_PORT, LED_PIN);
    1974:	82 e3       	ldi	r24, 0x32	; 50
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	22 e3       	ldi	r18, 0x32	; 50
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	2f 7d       	andi	r18, 0xDF	; 223
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18


    LCD_Init();
    1986:	0e 94 31 07 	call	0xe62	; 0xe62 <LCD_Init>
    sevenseg_init();
    198a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <sevenseg_init>

    EXTI0_init(EXTI0_FALLING_EDGE, on_button_toggle_led); // PD2 with pull-up
    198e:	6a e8       	ldi	r22, 0x8A	; 138
    1990:	7c e0       	ldi	r23, 0x0C	; 12
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	0e 94 b2 00 	call	0x164	; 0x164 <EXTI0_init>
    EXTI1_init(EXTI1_FALLING_EDGE, on_button_reset_counter); // PD3 with pull-up
    1998:	6c e9       	ldi	r22, 0x9C	; 156
    199a:	7c e0       	ldi	r23, 0x0C	; 12
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	0e 94 c5 01 	call	0x38a	; 0x38a <EXTI1_init>

    sei(); // global enable
    19a2:	78 94       	sei

    LCD_WriteString("CNT:");
    19a4:	81 e6       	ldi	r24, 0x61	; 97
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_WriteString>
    while (1) {
        // Show counter on LCD and 7-seg
    	LCD_GoTo(0, 4);
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_GoTo>
    	LCD_WriteString("   ");
    19b4:	86 e6       	ldi	r24, 0x66	; 102
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_WriteString>
        LCD_GoTo(0, 4);
    19bc:	64 e0       	ldi	r22, 0x04	; 4
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_GoTo>
        LCD_WriteInteger(counter);
    19c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_WriteInteger>

        sevenseg_show(counter);
    19d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19d4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <sevenseg_show>

        // advance 1..9
        counter++;
    19d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        if (counter > 9) counter = 1;
    19e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19e6:	8a 30       	cpi	r24, 0x0A	; 10
    19e8:	18 f0       	brcs	.+6      	; 0x19f0 <main+0xa2>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	af ea       	ldi	r26, 0xAF	; 175
    19f6:	b3 e4       	ldi	r27, 0x43	; 67
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	ab 83       	std	Y+3, r26	; 0x03
    19fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	53 e4       	ldi	r21, 0x43	; 67
    1a08:	69 81       	ldd	r22, Y+1	; 0x01
    1a0a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	af 83       	std	Y+7, r26	; 0x07
    1a1e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2e:	98 85       	ldd	r25, Y+8	; 0x08
    1a30:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__cmpsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <main+0xf4>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9a 87       	std	Y+10, r25	; 0x0a
    1a3e:	89 87       	std	Y+9, r24	; 0x09
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <main+0x172>
	else if (__tmp > 65535)
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a50:	98 85       	ldd	r25, Y+8	; 0x08
    1a52:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gesf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	69 81       	ldd	r22, Y+1	; 0x01
    1a64:	7a 81       	ldd	r23, Y+2	; 0x02
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9a 87       	std	Y+10, r25	; 0x0a
    1a80:	89 87       	std	Y+9, r24	; 0x09
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <main+0x154>
    1a84:	89 e1       	ldi	r24, 0x19	; 25
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <main+0x142>
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9a 87       	std	Y+10, r25	; 0x0a
    1aa0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	89 2b       	or	r24, r25
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <main+0x136>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6d 81       	ldd	r22, Y+5	; 0x05
    1aae:	7e 81       	ldd	r23, Y+6	; 0x06
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9a 87       	std	Y+10, r25	; 0x0a
    1abe:	89 87       	std	Y+9, r24	; 0x09
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	9e 87       	std	Y+14, r25	; 0x0e
    1ac6:	8d 87       	std	Y+13, r24	; 0x0d
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <main+0x17e>
    1ad0:	9e 87       	std	Y+14, r25	; 0x0e
    1ad2:	8d 87       	std	Y+13, r24	; 0x0d

        _delay_ms(350);
    }
    1ad4:	6b cf       	rjmp	.-298    	; 0x19ac <main+0x5e>

00001ad6 <sevenseg_init>:
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

void sevenseg_init(void) {
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    SEG_DDR = 0x7F;     // PC0..PC6 outputs
    1ade:	84 e3       	ldi	r24, 0x34	; 52
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	2f e7       	ldi	r18, 0x7F	; 127
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18
    SEG_PORT = 0x00;    // all off
    1ae8:	85 e3       	ldi	r24, 0x35	; 53
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	fc 01       	movw	r30, r24
    1aee:	10 82       	st	Z, r1
}
    1af0:	00 00       	nop
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <sevenseg_show>:

void sevenseg_show(uint8_t digit) {
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	1f 92       	push	r1
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    if (digit > 9) digit = 0;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	8a 30       	cpi	r24, 0x0A	; 10
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <sevenseg_show+0x14>
    1b0a:	19 82       	std	Y+1, r1	; 0x01
    SEG_PORT = seg_cc_patterns[digit];
    1b0c:	85 e3       	ldi	r24, 0x35	; 53
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	29 81       	ldd	r18, Y+1	; 0x01
    1b12:	22 2f       	mov	r18, r18
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	26 59       	subi	r18, 0x96	; 150
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
}
    1b22:	00 00       	nop
    1b24:	0f 90       	pop	r0
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <__cmpsf2>:
    1b2c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_cmp>
    1b30:	08 f4       	brcc	.+2      	; 0x1b34 <__cmpsf2+0x8>
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	08 95       	ret

00001b36 <__divsf3>:
    1b36:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3x>
    1b3a:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_round>
    1b3e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_pscB>
    1b42:	58 f0       	brcs	.+22     	; 0x1b5a <__divsf3+0x24>
    1b44:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fp_pscA>
    1b48:	40 f0       	brcs	.+16     	; 0x1b5a <__divsf3+0x24>
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <__divsf3+0x20>
    1b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <__divsf3+0x24>
    1b50:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_inf>
    1b54:	51 11       	cpse	r21, r1
    1b56:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_szero>
    1b5a:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__fp_nan>

00001b5e <__divsf3x>:
    1b5e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fp_split3>
    1b62:	68 f3       	brcs	.-38     	; 0x1b3e <__divsf3+0x8>

00001b64 <__divsf3_pse>:
    1b64:	99 23       	and	r25, r25
    1b66:	b1 f3       	breq	.-20     	; 0x1b54 <__divsf3+0x1e>
    1b68:	55 23       	and	r21, r21
    1b6a:	91 f3       	breq	.-28     	; 0x1b50 <__divsf3+0x1a>
    1b6c:	95 1b       	sub	r25, r21
    1b6e:	55 0b       	sbc	r21, r21
    1b70:	bb 27       	eor	r27, r27
    1b72:	aa 27       	eor	r26, r26
    1b74:	62 17       	cp	r22, r18
    1b76:	73 07       	cpc	r23, r19
    1b78:	84 07       	cpc	r24, r20
    1b7a:	38 f0       	brcs	.+14     	; 0x1b8a <__divsf3_pse+0x26>
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	44 1f       	adc	r20, r20
    1b86:	aa 1f       	adc	r26, r26
    1b88:	a9 f3       	breq	.-22     	; 0x1b74 <__divsf3_pse+0x10>
    1b8a:	35 d0       	rcall	.+106    	; 0x1bf6 <__divsf3_pse+0x92>
    1b8c:	0e 2e       	mov	r0, r30
    1b8e:	3a f0       	brmi	.+14     	; 0x1b9e <__divsf3_pse+0x3a>
    1b90:	e0 e8       	ldi	r30, 0x80	; 128
    1b92:	32 d0       	rcall	.+100    	; 0x1bf8 <__divsf3_pse+0x94>
    1b94:	91 50       	subi	r25, 0x01	; 1
    1b96:	50 40       	sbci	r21, 0x00	; 0
    1b98:	e6 95       	lsr	r30
    1b9a:	00 1c       	adc	r0, r0
    1b9c:	ca f7       	brpl	.-14     	; 0x1b90 <__divsf3_pse+0x2c>
    1b9e:	2b d0       	rcall	.+86     	; 0x1bf6 <__divsf3_pse+0x92>
    1ba0:	fe 2f       	mov	r31, r30
    1ba2:	29 d0       	rcall	.+82     	; 0x1bf6 <__divsf3_pse+0x92>
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	bb 1f       	adc	r27, r27
    1bac:	26 17       	cp	r18, r22
    1bae:	37 07       	cpc	r19, r23
    1bb0:	48 07       	cpc	r20, r24
    1bb2:	ab 07       	cpc	r26, r27
    1bb4:	b0 e8       	ldi	r27, 0x80	; 128
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <__divsf3_pse+0x56>
    1bb8:	bb 0b       	sbc	r27, r27
    1bba:	80 2d       	mov	r24, r0
    1bbc:	bf 01       	movw	r22, r30
    1bbe:	ff 27       	eor	r31, r31
    1bc0:	93 58       	subi	r25, 0x83	; 131
    1bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc4:	3a f0       	brmi	.+14     	; 0x1bd4 <__divsf3_pse+0x70>
    1bc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc8:	51 05       	cpc	r21, r1
    1bca:	78 f0       	brcs	.+30     	; 0x1bea <__divsf3_pse+0x86>
    1bcc:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_inf>
    1bd0:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_szero>
    1bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd6:	e4 f3       	brlt	.-8      	; 0x1bd0 <__divsf3_pse+0x6c>
    1bd8:	98 3e       	cpi	r25, 0xE8	; 232
    1bda:	d4 f3       	brlt	.-12     	; 0x1bd0 <__divsf3_pse+0x6c>
    1bdc:	86 95       	lsr	r24
    1bde:	77 95       	ror	r23
    1be0:	67 95       	ror	r22
    1be2:	b7 95       	ror	r27
    1be4:	f7 95       	ror	r31
    1be6:	9f 5f       	subi	r25, 0xFF	; 255
    1be8:	c9 f7       	brne	.-14     	; 0x1bdc <__divsf3_pse+0x78>
    1bea:	88 0f       	add	r24, r24
    1bec:	91 1d       	adc	r25, r1
    1bee:	96 95       	lsr	r25
    1bf0:	87 95       	ror	r24
    1bf2:	97 f9       	bld	r25, 7
    1bf4:	08 95       	ret
    1bf6:	e1 e0       	ldi	r30, 0x01	; 1
    1bf8:	66 0f       	add	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	88 1f       	adc	r24, r24
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	62 17       	cp	r22, r18
    1c02:	73 07       	cpc	r23, r19
    1c04:	84 07       	cpc	r24, r20
    1c06:	ba 07       	cpc	r27, r26
    1c08:	20 f0       	brcs	.+8      	; 0x1c12 <__divsf3_pse+0xae>
    1c0a:	62 1b       	sub	r22, r18
    1c0c:	73 0b       	sbc	r23, r19
    1c0e:	84 0b       	sbc	r24, r20
    1c10:	ba 0b       	sbc	r27, r26
    1c12:	ee 1f       	adc	r30, r30
    1c14:	88 f7       	brcc	.-30     	; 0x1bf8 <__divsf3_pse+0x94>
    1c16:	e0 95       	com	r30
    1c18:	08 95       	ret

00001c1a <__fixunssfsi>:
    1c1a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_splitA>
    1c1e:	88 f0       	brcs	.+34     	; 0x1c42 <__fixunssfsi+0x28>
    1c20:	9f 57       	subi	r25, 0x7F	; 127
    1c22:	98 f0       	brcs	.+38     	; 0x1c4a <__fixunssfsi+0x30>
    1c24:	b9 2f       	mov	r27, r25
    1c26:	99 27       	eor	r25, r25
    1c28:	b7 51       	subi	r27, 0x17	; 23
    1c2a:	b0 f0       	brcs	.+44     	; 0x1c58 <__fixunssfsi+0x3e>
    1c2c:	e1 f0       	breq	.+56     	; 0x1c66 <__fixunssfsi+0x4c>
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	1a f0       	brmi	.+6      	; 0x1c3e <__fixunssfsi+0x24>
    1c38:	ba 95       	dec	r27
    1c3a:	c9 f7       	brne	.-14     	; 0x1c2e <__fixunssfsi+0x14>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <__fixunssfsi+0x4c>
    1c3e:	b1 30       	cpi	r27, 0x01	; 1
    1c40:	91 f0       	breq	.+36     	; 0x1c66 <__fixunssfsi+0x4c>
    1c42:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_zero>
    1c46:	b1 e0       	ldi	r27, 0x01	; 1
    1c48:	08 95       	ret
    1c4a:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_zero>
    1c4e:	67 2f       	mov	r22, r23
    1c50:	78 2f       	mov	r23, r24
    1c52:	88 27       	eor	r24, r24
    1c54:	b8 5f       	subi	r27, 0xF8	; 248
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <__fixunssfsi+0x4c>
    1c58:	b9 3f       	cpi	r27, 0xF9	; 249
    1c5a:	cc f3       	brlt	.-14     	; 0x1c4e <__fixunssfsi+0x34>
    1c5c:	86 95       	lsr	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b3 95       	inc	r27
    1c64:	d9 f7       	brne	.-10     	; 0x1c5c <__fixunssfsi+0x42>
    1c66:	3e f4       	brtc	.+14     	; 0x1c76 <__fixunssfsi+0x5c>
    1c68:	90 95       	com	r25
    1c6a:	80 95       	com	r24
    1c6c:	70 95       	com	r23
    1c6e:	61 95       	neg	r22
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	08 95       	ret

00001c78 <__fp_cmp>:
    1c78:	99 0f       	add	r25, r25
    1c7a:	00 08       	sbc	r0, r0
    1c7c:	55 0f       	add	r21, r21
    1c7e:	aa 0b       	sbc	r26, r26
    1c80:	e0 e8       	ldi	r30, 0x80	; 128
    1c82:	fe ef       	ldi	r31, 0xFE	; 254
    1c84:	16 16       	cp	r1, r22
    1c86:	17 06       	cpc	r1, r23
    1c88:	e8 07       	cpc	r30, r24
    1c8a:	f9 07       	cpc	r31, r25
    1c8c:	c0 f0       	brcs	.+48     	; 0x1cbe <__fp_cmp+0x46>
    1c8e:	12 16       	cp	r1, r18
    1c90:	13 06       	cpc	r1, r19
    1c92:	e4 07       	cpc	r30, r20
    1c94:	f5 07       	cpc	r31, r21
    1c96:	98 f0       	brcs	.+38     	; 0x1cbe <__fp_cmp+0x46>
    1c98:	62 1b       	sub	r22, r18
    1c9a:	73 0b       	sbc	r23, r19
    1c9c:	84 0b       	sbc	r24, r20
    1c9e:	95 0b       	sbc	r25, r21
    1ca0:	39 f4       	brne	.+14     	; 0x1cb0 <__fp_cmp+0x38>
    1ca2:	0a 26       	eor	r0, r26
    1ca4:	61 f0       	breq	.+24     	; 0x1cbe <__fp_cmp+0x46>
    1ca6:	23 2b       	or	r18, r19
    1ca8:	24 2b       	or	r18, r20
    1caa:	25 2b       	or	r18, r21
    1cac:	21 f4       	brne	.+8      	; 0x1cb6 <__fp_cmp+0x3e>
    1cae:	08 95       	ret
    1cb0:	0a 26       	eor	r0, r26
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__fp_cmp+0x3e>
    1cb4:	a1 40       	sbci	r26, 0x01	; 1
    1cb6:	a6 95       	lsr	r26
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	81 1d       	adc	r24, r1
    1cbc:	81 1d       	adc	r24, r1
    1cbe:	08 95       	ret

00001cc0 <__fp_inf>:
    1cc0:	97 f9       	bld	r25, 7
    1cc2:	9f 67       	ori	r25, 0x7F	; 127
    1cc4:	80 e8       	ldi	r24, 0x80	; 128
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	08 95       	ret

00001ccc <__fp_nan>:
    1ccc:	9f ef       	ldi	r25, 0xFF	; 255
    1cce:	80 ec       	ldi	r24, 0xC0	; 192
    1cd0:	08 95       	ret

00001cd2 <__fp_pscA>:
    1cd2:	00 24       	eor	r0, r0
    1cd4:	0a 94       	dec	r0
    1cd6:	16 16       	cp	r1, r22
    1cd8:	17 06       	cpc	r1, r23
    1cda:	18 06       	cpc	r1, r24
    1cdc:	09 06       	cpc	r0, r25
    1cde:	08 95       	ret

00001ce0 <__fp_pscB>:
    1ce0:	00 24       	eor	r0, r0
    1ce2:	0a 94       	dec	r0
    1ce4:	12 16       	cp	r1, r18
    1ce6:	13 06       	cpc	r1, r19
    1ce8:	14 06       	cpc	r1, r20
    1cea:	05 06       	cpc	r0, r21
    1cec:	08 95       	ret

00001cee <__fp_round>:
    1cee:	09 2e       	mov	r0, r25
    1cf0:	03 94       	inc	r0
    1cf2:	00 0c       	add	r0, r0
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <__fp_round+0xc>
    1cf6:	88 23       	and	r24, r24
    1cf8:	52 f0       	brmi	.+20     	; 0x1d0e <__fp_round+0x20>
    1cfa:	bb 0f       	add	r27, r27
    1cfc:	40 f4       	brcc	.+16     	; 0x1d0e <__fp_round+0x20>
    1cfe:	bf 2b       	or	r27, r31
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <__fp_round+0x18>
    1d02:	60 ff       	sbrs	r22, 0
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <__fp_round+0x20>
    1d06:	6f 5f       	subi	r22, 0xFF	; 255
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	08 95       	ret

00001d10 <__fp_split3>:
    1d10:	57 fd       	sbrc	r21, 7
    1d12:	90 58       	subi	r25, 0x80	; 128
    1d14:	44 0f       	add	r20, r20
    1d16:	55 1f       	adc	r21, r21
    1d18:	59 f0       	breq	.+22     	; 0x1d30 <__fp_splitA+0x10>
    1d1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d1c:	71 f0       	breq	.+28     	; 0x1d3a <__fp_splitA+0x1a>
    1d1e:	47 95       	ror	r20

00001d20 <__fp_splitA>:
    1d20:	88 0f       	add	r24, r24
    1d22:	97 fb       	bst	r25, 7
    1d24:	99 1f       	adc	r25, r25
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <__fp_splitA+0x20>
    1d28:	9f 3f       	cpi	r25, 0xFF	; 255
    1d2a:	79 f0       	breq	.+30     	; 0x1d4a <__fp_splitA+0x2a>
    1d2c:	87 95       	ror	r24
    1d2e:	08 95       	ret
    1d30:	12 16       	cp	r1, r18
    1d32:	13 06       	cpc	r1, r19
    1d34:	14 06       	cpc	r1, r20
    1d36:	55 1f       	adc	r21, r21
    1d38:	f2 cf       	rjmp	.-28     	; 0x1d1e <__fp_split3+0xe>
    1d3a:	46 95       	lsr	r20
    1d3c:	f1 df       	rcall	.-30     	; 0x1d20 <__fp_splitA>
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <__fp_splitA+0x30>
    1d40:	16 16       	cp	r1, r22
    1d42:	17 06       	cpc	r1, r23
    1d44:	18 06       	cpc	r1, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	f1 cf       	rjmp	.-30     	; 0x1d2c <__fp_splitA+0xc>
    1d4a:	86 95       	lsr	r24
    1d4c:	71 05       	cpc	r23, r1
    1d4e:	61 05       	cpc	r22, r1
    1d50:	08 94       	sec
    1d52:	08 95       	ret

00001d54 <__fp_zero>:
    1d54:	e8 94       	clt

00001d56 <__fp_szero>:
    1d56:	bb 27       	eor	r27, r27
    1d58:	66 27       	eor	r22, r22
    1d5a:	77 27       	eor	r23, r23
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	97 f9       	bld	r25, 7
    1d60:	08 95       	ret

00001d62 <__gesf2>:
    1d62:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_cmp>
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <__gesf2+0x8>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	08 95       	ret

00001d6c <__mulsf3>:
    1d6c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__mulsf3x>
    1d70:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_round>
    1d74:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fp_pscA>
    1d78:	38 f0       	brcs	.+14     	; 0x1d88 <__mulsf3+0x1c>
    1d7a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_pscB>
    1d7e:	20 f0       	brcs	.+8      	; 0x1d88 <__mulsf3+0x1c>
    1d80:	95 23       	and	r25, r21
    1d82:	11 f0       	breq	.+4      	; 0x1d88 <__mulsf3+0x1c>
    1d84:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_inf>
    1d88:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__fp_nan>
    1d8c:	11 24       	eor	r1, r1
    1d8e:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_szero>

00001d92 <__mulsf3x>:
    1d92:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fp_split3>
    1d96:	70 f3       	brcs	.-36     	; 0x1d74 <__mulsf3+0x8>

00001d98 <__mulsf3_pse>:
    1d98:	95 9f       	mul	r25, r21
    1d9a:	c1 f3       	breq	.-16     	; 0x1d8c <__mulsf3+0x20>
    1d9c:	95 0f       	add	r25, r21
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	55 1f       	adc	r21, r21
    1da2:	62 9f       	mul	r22, r18
    1da4:	f0 01       	movw	r30, r0
    1da6:	72 9f       	mul	r23, r18
    1da8:	bb 27       	eor	r27, r27
    1daa:	f0 0d       	add	r31, r0
    1dac:	b1 1d       	adc	r27, r1
    1dae:	63 9f       	mul	r22, r19
    1db0:	aa 27       	eor	r26, r26
    1db2:	f0 0d       	add	r31, r0
    1db4:	b1 1d       	adc	r27, r1
    1db6:	aa 1f       	adc	r26, r26
    1db8:	64 9f       	mul	r22, r20
    1dba:	66 27       	eor	r22, r22
    1dbc:	b0 0d       	add	r27, r0
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	66 1f       	adc	r22, r22
    1dc2:	82 9f       	mul	r24, r18
    1dc4:	22 27       	eor	r18, r18
    1dc6:	b0 0d       	add	r27, r0
    1dc8:	a1 1d       	adc	r26, r1
    1dca:	62 1f       	adc	r22, r18
    1dcc:	73 9f       	mul	r23, r19
    1dce:	b0 0d       	add	r27, r0
    1dd0:	a1 1d       	adc	r26, r1
    1dd2:	62 1f       	adc	r22, r18
    1dd4:	83 9f       	mul	r24, r19
    1dd6:	a0 0d       	add	r26, r0
    1dd8:	61 1d       	adc	r22, r1
    1dda:	22 1f       	adc	r18, r18
    1ddc:	74 9f       	mul	r23, r20
    1dde:	33 27       	eor	r19, r19
    1de0:	a0 0d       	add	r26, r0
    1de2:	61 1d       	adc	r22, r1
    1de4:	23 1f       	adc	r18, r19
    1de6:	84 9f       	mul	r24, r20
    1de8:	60 0d       	add	r22, r0
    1dea:	21 1d       	adc	r18, r1
    1dec:	82 2f       	mov	r24, r18
    1dee:	76 2f       	mov	r23, r22
    1df0:	6a 2f       	mov	r22, r26
    1df2:	11 24       	eor	r1, r1
    1df4:	9f 57       	subi	r25, 0x7F	; 127
    1df6:	50 40       	sbci	r21, 0x00	; 0
    1df8:	9a f0       	brmi	.+38     	; 0x1e20 <__mulsf3_pse+0x88>
    1dfa:	f1 f0       	breq	.+60     	; 0x1e38 <__mulsf3_pse+0xa0>
    1dfc:	88 23       	and	r24, r24
    1dfe:	4a f0       	brmi	.+18     	; 0x1e12 <__mulsf3_pse+0x7a>
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	bb 1f       	adc	r27, r27
    1e06:	66 1f       	adc	r22, r22
    1e08:	77 1f       	adc	r23, r23
    1e0a:	88 1f       	adc	r24, r24
    1e0c:	91 50       	subi	r25, 0x01	; 1
    1e0e:	50 40       	sbci	r21, 0x00	; 0
    1e10:	a9 f7       	brne	.-22     	; 0x1dfc <__mulsf3_pse+0x64>
    1e12:	9e 3f       	cpi	r25, 0xFE	; 254
    1e14:	51 05       	cpc	r21, r1
    1e16:	80 f0       	brcs	.+32     	; 0x1e38 <__mulsf3_pse+0xa0>
    1e18:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_inf>
    1e1c:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_szero>
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	e4 f3       	brlt	.-8      	; 0x1e1c <__mulsf3_pse+0x84>
    1e24:	98 3e       	cpi	r25, 0xE8	; 232
    1e26:	d4 f3       	brlt	.-12     	; 0x1e1c <__mulsf3_pse+0x84>
    1e28:	86 95       	lsr	r24
    1e2a:	77 95       	ror	r23
    1e2c:	67 95       	ror	r22
    1e2e:	b7 95       	ror	r27
    1e30:	f7 95       	ror	r31
    1e32:	e7 95       	ror	r30
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	c1 f7       	brne	.-16     	; 0x1e28 <__mulsf3_pse+0x90>
    1e38:	fe 2b       	or	r31, r30
    1e3a:	88 0f       	add	r24, r24
    1e3c:	91 1d       	adc	r25, r1
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	97 f9       	bld	r25, 7
    1e44:	08 95       	ret

00001e46 <itoa>:
    1e46:	45 32       	cpi	r20, 0x25	; 37
    1e48:	51 05       	cpc	r21, r1
    1e4a:	20 f4       	brcc	.+8      	; 0x1e54 <itoa+0xe>
    1e4c:	42 30       	cpi	r20, 0x02	; 2
    1e4e:	10 f0       	brcs	.+4      	; 0x1e54 <itoa+0xe>
    1e50:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__itoa_ncheck>
    1e54:	fb 01       	movw	r30, r22
    1e56:	10 82       	st	Z, r1
    1e58:	cb 01       	movw	r24, r22
    1e5a:	08 95       	ret

00001e5c <__itoa_ncheck>:
    1e5c:	bb 27       	eor	r27, r27
    1e5e:	4a 30       	cpi	r20, 0x0A	; 10
    1e60:	31 f4       	brne	.+12     	; 0x1e6e <__itoa_ncheck+0x12>
    1e62:	99 23       	and	r25, r25
    1e64:	22 f4       	brpl	.+8      	; 0x1e6e <__itoa_ncheck+0x12>
    1e66:	bd e2       	ldi	r27, 0x2D	; 45
    1e68:	90 95       	com	r25
    1e6a:	81 95       	neg	r24
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__utoa_common>

00001e72 <__utoa_ncheck>:
    1e72:	bb 27       	eor	r27, r27

00001e74 <__utoa_common>:
    1e74:	fb 01       	movw	r30, r22
    1e76:	55 27       	eor	r21, r21
    1e78:	aa 27       	eor	r26, r26
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	aa 1f       	adc	r26, r26
    1e80:	a4 17       	cp	r26, r20
    1e82:	10 f0       	brcs	.+4      	; 0x1e88 <__utoa_common+0x14>
    1e84:	a4 1b       	sub	r26, r20
    1e86:	83 95       	inc	r24
    1e88:	50 51       	subi	r21, 0x10	; 16
    1e8a:	b9 f7       	brne	.-18     	; 0x1e7a <__utoa_common+0x6>
    1e8c:	a0 5d       	subi	r26, 0xD0	; 208
    1e8e:	aa 33       	cpi	r26, 0x3A	; 58
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <__utoa_common+0x20>
    1e92:	a9 5d       	subi	r26, 0xD9	; 217
    1e94:	a1 93       	st	Z+, r26
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	79 f7       	brne	.-34     	; 0x1e78 <__utoa_common+0x4>
    1e9a:	b1 11       	cpse	r27, r1
    1e9c:	b1 93       	st	Z+, r27
    1e9e:	11 92       	st	Z+, r1
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <strrev>

00001ea6 <strrev>:
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	67 2f       	mov	r22, r23
    1eac:	71 91       	ld	r23, Z+
    1eae:	77 23       	and	r23, r23
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <strrev+0x4>
    1eb2:	32 97       	sbiw	r30, 0x02	; 2
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <strrev+0x18>
    1eb6:	7c 91       	ld	r23, X
    1eb8:	6d 93       	st	X+, r22
    1eba:	70 83       	st	Z, r23
    1ebc:	62 91       	ld	r22, -Z
    1ebe:	ae 17       	cp	r26, r30
    1ec0:	bf 07       	cpc	r27, r31
    1ec2:	c8 f3       	brcs	.-14     	; 0x1eb6 <strrev+0x10>
    1ec4:	08 95       	ret

00001ec6 <_exit>:
    1ec6:	f8 94       	cli

00001ec8 <__stop_program>:
    1ec8:	ff cf       	rjmp	.-2      	; 0x1ec8 <__stop_program>
