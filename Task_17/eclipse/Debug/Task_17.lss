
Task_17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002378  000023ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021d8  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001294  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000005c  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000058e0  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00005e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00006331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000634b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 b1 0b 	call	0x1762	; 0x1762 <main>
      7a:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_init>:
#include "../include/registers.h"
#include "../include/adc.h"
#include <avr/io.h>

void adc_init(void)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	/* Use default channel ADC0 (PA0). Ensure PORTA pin is input (default). */
    DDRA &= ~(1 << PA0);
      8a:	8a e3       	ldi	r24, 0x3A	; 58
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	2a e3       	ldi	r18, 0x3A	; 58
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	f9 01       	movw	r30, r18
      94:	20 81       	ld	r18, Z
      96:	2e 7f       	andi	r18, 0xFE	; 254
      98:	fc 01       	movw	r30, r24
      9a:	20 83       	st	Z, r18
    /* Select reference: AVCC with external capacitor at AREF pin */
    ADMUX = (1 << REFS0); /* REFS1=0, REFS0=1 => AVCC, right adjusted by default */
      9c:	87 e2       	ldi	r24, 0x27	; 39
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	20 e4       	ldi	r18, 0x40	; 64
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18

    /* ADC prescaler  */
    ADCSRA |=(1 << ADEN)  ;
      a6:	86 e2       	ldi	r24, 0x26	; 38
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	26 e2       	ldi	r18, 0x26	; 38
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	f9 01       	movw	r30, r18
      b0:	20 81       	ld	r18, Z
      b2:	20 68       	ori	r18, 0x80	; 128
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18

}
      b8:	00 00       	nop
      ba:	df 91       	pop	r29
      bc:	cf 91       	pop	r28
      be:	08 95       	ret

000000c0 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	00 d0       	rcall	.+0      	; 0xc6 <adc_read+0x6>
      c6:	1f 92       	push	r1
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	8b 83       	std	Y+3, r24	; 0x03
    ch &= 0x07;                /* Only channels 0..7 on ATmega32 */
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
      d0:	87 70       	andi	r24, 0x07	; 7
      d2:	8b 83       	std	Y+3, r24	; 0x03
    ADMUX = (ADMUX & 0xE0) | ch; /* Keep REFS bits, set MUX */
      d4:	87 e2       	ldi	r24, 0x27	; 39
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	27 e2       	ldi	r18, 0x27	; 39
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	f9 01       	movw	r30, r18
      de:	20 81       	ld	r18, Z
      e0:	32 2f       	mov	r19, r18
      e2:	30 7e       	andi	r19, 0xE0	; 224
      e4:	2b 81       	ldd	r18, Y+3	; 0x03
      e6:	23 2b       	or	r18, r19
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADSC);     /* Start conversion */
      ec:	86 e2       	ldi	r24, 0x26	; 38
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	26 e2       	ldi	r18, 0x26	; 38
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18

    while (ADCSRA & (1 << ADSC)) { /* Wait for conversion to complete */ }
      fe:	00 00       	nop
     100:	86 e2       	ldi	r24, 0x26	; 38
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
     108:	88 2f       	mov	r24, r24
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	80 74       	andi	r24, 0x40	; 64
     10e:	99 27       	eor	r25, r25
     110:	89 2b       	or	r24, r25
     112:	b1 f7       	brne	.-20     	; 0x100 <adc_read+0x40>

    /* Read ADCL first then ADCH (10-bit result) */
    uint8_t low = ADCL;
     114:	84 e2       	ldi	r24, 0x24	; 36
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	80 81       	ld	r24, Z
     11c:	89 83       	std	Y+1, r24	; 0x01
    uint8_t high = ADCH;
     11e:	85 e2       	ldi	r24, 0x25	; 37
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	8a 83       	std	Y+2, r24	; 0x02
    return (uint16_t)((high << 8) | low);
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	38 2f       	mov	r19, r24
     130:	22 27       	eor	r18, r18
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	82 2b       	or	r24, r18
     13a:	93 2b       	or	r25, r19
}
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <leds_init>:
#include "../include/registers.h"
#include "../include/gpio.h"
#include <avr/io.h>

void leds_init(void)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
    /* Configure LED pins as outputs */
    LED_DDR |= 0xFF; /* PC0..PC7 as outputs */
     150:	84 e3       	ldi	r24, 0x34	; 52
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	80 81       	ld	r24, Z
     158:	84 e3       	ldi	r24, 0x34	; 52
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18

    LED_PORT &= ~(0xFF);
     162:	85 e3       	ldi	r24, 0x35	; 53
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	fc 01       	movw	r30, r24
     168:	80 81       	ld	r24, Z
     16a:	85 e3       	ldi	r24, 0x35	; 53
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	10 82       	st	Z, r1

}
     172:	00 00       	nop
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <leds_write_raw>:

void leds_write_raw(uint8_t pattern)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	1f 92       	push	r1
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & ~0xFF) | (pattern & 0xFF);
     186:	85 e3       	ldi	r24, 0x35	; 53
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	fc 01       	movw	r30, r24
     18c:	80 81       	ld	r24, Z
     18e:	85 e3       	ldi	r24, 0x35	; 53
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	29 81       	ldd	r18, Y+1	; 0x01
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
}
     198:	00 00       	nop
     19a:	0f 90       	pop	r0
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <leds_set_count>:

void leds_set_count(uint8_t count)
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <leds_set_count+0x6>
     1a8:	1f 92       	push	r1
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	8b 83       	std	Y+3, r24	; 0x03
    if (count > LED_COUNT) count = LED_COUNT;
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	89 30       	cpi	r24, 0x09	; 9
     1b4:	10 f0       	brcs	.+4      	; 0x1ba <leds_set_count+0x18>
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t pattern = 0;
     1ba:	19 82       	std	Y+1, r1	; 0x01
    for (uint8_t i = 0; i < count; ++i) pattern |= (1 << i);
     1bc:	1a 82       	std	Y+2, r1	; 0x02
     1be:	11 c0       	rjmp	.+34     	; 0x1e2 <leds_set_count+0x40>
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <leds_set_count+0x2e>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	2a 95       	dec	r18
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <leds_set_count+0x2a>
     1d4:	98 2f       	mov	r25, r24
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	89 2b       	or	r24, r25
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	8a 81       	ldd	r24, Y+2	; 0x02
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	8a 83       	std	Y+2, r24	; 0x02
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	98 17       	cp	r25, r24
     1e8:	58 f3       	brcs	.-42     	; 0x1c0 <leds_set_count+0x1e>
    leds_write_raw(pattern);
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	0e 94 bd 00 	call	0x17a	; 0x17a <leds_write_raw>
}
     1f0:	00 00       	nop
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <LCD_Command>:
#include "../include/lcd.h"
#include <util/delay.h>


void LCD_Command(uint8_t cmd)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	cf 56       	subi	r28, 0x6F	; 111
     20c:	d1 09       	sbc	r29, r1
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	9e 01       	movw	r18, r28
     21a:	21 59       	subi	r18, 0x91	; 145
     21c:	3f 4f       	sbci	r19, 0xFF	; 255
     21e:	f9 01       	movw	r30, r18
     220:	80 83       	st	Z, r24
    LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0);
     222:	88 e3       	ldi	r24, 0x38	; 56
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	28 e3       	ldi	r18, 0x38	; 56
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	42 2f       	mov	r20, r18
     230:	4f 70       	andi	r20, 0x0F	; 15
     232:	9e 01       	movw	r18, r28
     234:	21 59       	subi	r18, 0x91	; 145
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	f9 01       	movw	r30, r18
     23a:	20 81       	ld	r18, Z
     23c:	20 7f       	andi	r18, 0xF0	; 240
     23e:	24 2b       	or	r18, r20
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
    LCD_PORT &= ~(1<<RS);
     244:	88 e3       	ldi	r24, 0x38	; 56
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e3       	ldi	r18, 0x38	; 56
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2d 7f       	andi	r18, 0xFD	; 253
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
     256:	88 e3       	ldi	r24, 0x38	; 56
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e3       	ldi	r18, 0x38	; 56
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	21 60       	ori	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a0 e8       	ldi	r26, 0x80	; 128
     26e:	bf e3       	ldi	r27, 0x3F	; 63
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	ab 83       	std	Y+3, r26	; 0x03
     276:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     278:	8e 01       	movw	r16, r28
     27a:	0d 5a       	subi	r16, 0xAD	; 173
     27c:	1f 4f       	sbci	r17, 0xFF	; 255
     27e:	2b ea       	ldi	r18, 0xAB	; 171
     280:	3a ea       	ldi	r19, 0xAA	; 170
     282:	4a ea       	ldi	r20, 0xAA	; 170
     284:	5e e3       	ldi	r21, 0x3E	; 62
     286:	69 81       	ldd	r22, Y+1	; 0x01
     288:	7a 81       	ldd	r23, Y+2	; 0x02
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	9c 81       	ldd	r25, Y+4	; 0x04
     28e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	f8 01       	movw	r30, r16
     298:	80 83       	st	Z, r24
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	a2 83       	std	Z+2, r26	; 0x02
     29e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     2a0:	8e 01       	movw	r16, r28
     2a2:	09 5a       	subi	r16, 0xA9	; 169
     2a4:	1f 4f       	sbci	r17, 0xFF	; 255
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e8       	ldi	r20, 0x80	; 128
     2ac:	5e e3       	ldi	r21, 0x3E	; 62
     2ae:	69 81       	ldd	r22, Y+1	; 0x01
     2b0:	7a 81       	ldd	r23, Y+2	; 0x02
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	9c 81       	ldd	r25, Y+4	; 0x04
     2b6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	f8 01       	movw	r30, r16
     2c0:	80 83       	st	Z, r24
     2c2:	91 83       	std	Z+1, r25	; 0x01
     2c4:	a2 83       	std	Z+2, r26	; 0x02
     2c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2c8:	ce 01       	movw	r24, r28
     2ca:	8d 5a       	subi	r24, 0xAD	; 173
     2cc:	9f 4f       	sbci	r25, 0xFF	; 255
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e8       	ldi	r20, 0x80	; 128
     2d4:	5f e3       	ldi	r21, 0x3F	; 63
     2d6:	fc 01       	movw	r30, r24
     2d8:	60 81       	ld	r22, Z
     2da:	71 81       	ldd	r23, Z+1	; 0x01
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     2e4:	88 23       	and	r24, r24
     2e6:	3c f4       	brge	.+14     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
		__ticks = 1;
     2e8:	ce 01       	movw	r24, r28
     2ea:	85 5a       	subi	r24, 0xA5	; 165
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
     2f4:	2c c1       	rjmp	.+600    	; 0x54e <__stack+0xef>
	else if (__tmp2 > 65535)
     2f6:	ce 01       	movw	r24, r28
     2f8:	89 5a       	subi	r24, 0xA9	; 169
     2fa:	9f 4f       	sbci	r25, 0xFF	; 255
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	3f ef       	ldi	r19, 0xFF	; 255
     300:	4f e7       	ldi	r20, 0x7F	; 127
     302:	57 e4       	ldi	r21, 0x47	; 71
     304:	fc 01       	movw	r30, r24
     306:	60 81       	ld	r22, Z
     308:	71 81       	ldd	r23, Z+1	; 0x01
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     312:	18 16       	cp	r1, r24
     314:	0c f0       	brlt	.+2      	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
     316:	cd c0       	rjmp	.+410    	; 0x4b2 <__stack+0x53>
	{
		_delay_ms(__us / 1000.0);
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a e7       	ldi	r20, 0x7A	; 122
     31e:	54 e4       	ldi	r21, 0x44	; 68
     320:	69 81       	ldd	r22, Y+1	; 0x01
     322:	7a 81       	ldd	r23, Y+2	; 0x02
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	9e 01       	movw	r18, r28
     332:	24 5a       	subi	r18, 0xA4	; 164
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	f9 01       	movw	r30, r18
     338:	80 83       	st	Z, r24
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	a2 83       	std	Z+2, r26	; 0x02
     33e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     340:	8e 01       	movw	r16, r28
     342:	00 5a       	subi	r16, 0xA0	; 160
     344:	1f 4f       	sbci	r17, 0xFF	; 255
     346:	ce 01       	movw	r24, r28
     348:	84 5a       	subi	r24, 0xA4	; 164
     34a:	9f 4f       	sbci	r25, 0xFF	; 255
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	4a e7       	ldi	r20, 0x7A	; 122
     352:	53 e4       	ldi	r21, 0x43	; 67
     354:	fc 01       	movw	r30, r24
     356:	60 81       	ld	r22, Z
     358:	71 81       	ldd	r23, Z+1	; 0x01
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	f8 01       	movw	r30, r16
     368:	80 83       	st	Z, r24
     36a:	91 83       	std	Z+1, r25	; 0x01
     36c:	a2 83       	std	Z+2, r26	; 0x02
     36e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     370:	ce 01       	movw	r24, r28
     372:	80 5a       	subi	r24, 0xA0	; 160
     374:	9f 4f       	sbci	r25, 0xFF	; 255
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	fc 01       	movw	r30, r24
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     38c:	88 23       	and	r24, r24
     38e:	4c f4       	brge	.+18     	; 0x3a2 <__EEPROM_REGION_LENGTH__+0x1a2>
		__ticks = 1;
     390:	ce 01       	movw	r24, r28
     392:	8c 59       	subi	r24, 0x9C	; 156
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	31 83       	std	Z+1, r19	; 0x01
     39e:	20 83       	st	Z, r18
     3a0:	6d c0       	rjmp	.+218    	; 0x47c <__stack+0x1d>
	else if (__tmp > 65535)
     3a2:	ce 01       	movw	r24, r28
     3a4:	80 5a       	subi	r24, 0xA0	; 160
     3a6:	9f 4f       	sbci	r25, 0xFF	; 255
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	3f ef       	ldi	r19, 0xFF	; 255
     3ac:	4f e7       	ldi	r20, 0x7F	; 127
     3ae:	57 e4       	ldi	r21, 0x47	; 71
     3b0:	fc 01       	movw	r30, r24
     3b2:	60 81       	ld	r22, Z
     3b4:	71 81       	ldd	r23, Z+1	; 0x01
     3b6:	82 81       	ldd	r24, Z+2	; 0x02
     3b8:	93 81       	ldd	r25, Z+3	; 0x03
     3ba:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     3be:	18 16       	cp	r1, r24
     3c0:	0c f0       	brlt	.+2      	; 0x3c4 <__EEPROM_REGION_LENGTH__+0x1c4>
     3c2:	4a c0       	rjmp	.+148    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c4:	ce 01       	movw	r24, r28
     3c6:	84 5a       	subi	r24, 0xA4	; 164
     3c8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e2       	ldi	r20, 0x20	; 32
     3d0:	51 e4       	ldi	r21, 0x41	; 65
     3d2:	fc 01       	movw	r30, r24
     3d4:	60 81       	ld	r22, Z
     3d6:	71 81       	ldd	r23, Z+1	; 0x01
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	8e 01       	movw	r16, r28
     3e6:	0c 59       	subi	r16, 0x9C	; 156
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	bc 01       	movw	r22, r24
     3ec:	cd 01       	movw	r24, r26
     3ee:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	f8 01       	movw	r30, r16
     3f8:	91 83       	std	Z+1, r25	; 0x01
     3fa:	80 83       	st	Z, r24
     3fc:	24 c0       	rjmp	.+72     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
     3fe:	ce 01       	movw	r24, r28
     400:	8a 59       	subi	r24, 0x9A	; 154
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	29 e1       	ldi	r18, 0x19	; 25
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     40e:	ce 01       	movw	r24, r28
     410:	8a 59       	subi	r24, 0x9A	; 154
     412:	9f 4f       	sbci	r25, 0xFF	; 255
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	91 81       	ldd	r25, Z+1	; 0x01
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     41e:	9e 01       	movw	r18, r28
     420:	2a 59       	subi	r18, 0x9A	; 154
     422:	3f 4f       	sbci	r19, 0xFF	; 255
     424:	f9 01       	movw	r30, r18
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     42a:	ce 01       	movw	r24, r28
     42c:	8c 59       	subi	r24, 0x9C	; 156
     42e:	9f 4f       	sbci	r25, 0xFF	; 255
     430:	9e 01       	movw	r18, r28
     432:	2c 59       	subi	r18, 0x9C	; 156
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	31 81       	ldd	r19, Z+1	; 0x01
     43c:	21 50       	subi	r18, 0x01	; 1
     43e:	31 09       	sbc	r19, r1
     440:	fc 01       	movw	r30, r24
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	ce 01       	movw	r24, r28
     448:	8c 59       	subi	r24, 0x9C	; 156
     44a:	9f 4f       	sbci	r25, 0xFF	; 255
     44c:	fc 01       	movw	r30, r24
     44e:	80 81       	ld	r24, Z
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	89 2b       	or	r24, r25
     454:	a1 f6       	brne	.-88     	; 0x3fe <__EEPROM_REGION_LENGTH__+0x1fe>
     456:	7b c0       	rjmp	.+246    	; 0x54e <__stack+0xef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     458:	8e 01       	movw	r16, r28
     45a:	0c 59       	subi	r16, 0x9C	; 156
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	ce 01       	movw	r24, r28
     460:	80 5a       	subi	r24, 0xA0	; 160
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	fc 01       	movw	r30, r24
     466:	60 81       	ld	r22, Z
     468:	71 81       	ldd	r23, Z+1	; 0x01
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	93 81       	ldd	r25, Z+3	; 0x03
     46e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	f8 01       	movw	r30, r16
     478:	91 83       	std	Z+1, r25	; 0x01
     47a:	80 83       	st	Z, r24
     47c:	ce 01       	movw	r24, r28
     47e:	88 59       	subi	r24, 0x98	; 152
     480:	9f 4f       	sbci	r25, 0xFF	; 255
     482:	9e 01       	movw	r18, r28
     484:	2c 59       	subi	r18, 0x9C	; 156
     486:	3f 4f       	sbci	r19, 0xFF	; 255
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	31 81       	ldd	r19, Z+1	; 0x01
     48e:	fc 01       	movw	r30, r24
     490:	31 83       	std	Z+1, r19	; 0x01
     492:	20 83       	st	Z, r18
     494:	ce 01       	movw	r24, r28
     496:	88 59       	subi	r24, 0x98	; 152
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__stack+0x41>
     4a4:	9e 01       	movw	r18, r28
     4a6:	28 59       	subi	r18, 0x98	; 152
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	f9 01       	movw	r30, r18
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
     4b0:	4e c0       	rjmp	.+156    	; 0x54e <__stack+0xef>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     4b2:	ce 01       	movw	r24, r28
     4b4:	8d 5a       	subi	r24, 0xAD	; 173
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4f e7       	ldi	r20, 0x7F	; 127
     4be:	53 e4       	ldi	r21, 0x43	; 67
     4c0:	fc 01       	movw	r30, r24
     4c2:	60 81       	ld	r22, Z
     4c4:	71 81       	ldd	r23, Z+1	; 0x01
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	93 81       	ldd	r25, Z+3	; 0x03
     4ca:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	6c f5       	brge	.+90     	; 0x52c <__stack+0xcd>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     4d2:	8e 01       	movw	r16, r28
     4d4:	06 59       	subi	r16, 0x96	; 150
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	ce 01       	movw	r24, r28
     4da:	89 5a       	subi	r24, 0xA9	; 169
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	fc 01       	movw	r30, r24
     4e0:	60 81       	ld	r22, Z
     4e2:	71 81       	ldd	r23, Z+1	; 0x01
     4e4:	82 81       	ldd	r24, Z+2	; 0x02
     4e6:	93 81       	ldd	r25, Z+3	; 0x03
     4e8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	f8 01       	movw	r30, r16
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	80 83       	st	Z, r24
     4f6:	ce 01       	movw	r24, r28
     4f8:	84 59       	subi	r24, 0x94	; 148
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	9e 01       	movw	r18, r28
     4fe:	26 59       	subi	r18, 0x96	; 150
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	31 81       	ldd	r19, Z+1	; 0x01
     508:	fc 01       	movw	r30, r24
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
     50e:	ce 01       	movw	r24, r28
     510:	84 59       	subi	r24, 0x94	; 148
     512:	9f 4f       	sbci	r25, 0xFF	; 255
     514:	fc 01       	movw	r30, r24
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <__stack+0xbb>
     51e:	9e 01       	movw	r18, r28
     520:	24 59       	subi	r18, 0x94	; 148
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	f9 01       	movw	r30, r18
     526:	91 83       	std	Z+1, r25	; 0x01
     528:	80 83       	st	Z, r24
     52a:	28 c0       	rjmp	.+80     	; 0x57c <__stack+0x11d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     52c:	8e 01       	movw	r16, r28
     52e:	05 5a       	subi	r16, 0xA5	; 165
     530:	1f 4f       	sbci	r17, 0xFF	; 255
     532:	ce 01       	movw	r24, r28
     534:	8d 5a       	subi	r24, 0xAD	; 173
     536:	9f 4f       	sbci	r25, 0xFF	; 255
     538:	fc 01       	movw	r30, r24
     53a:	60 81       	ld	r22, Z
     53c:	71 81       	ldd	r23, Z+1	; 0x01
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	93 81       	ldd	r25, Z+3	; 0x03
     542:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	f8 01       	movw	r30, r16
     54c:	80 83       	st	Z, r24
     54e:	ce 01       	movw	r24, r28
     550:	82 59       	subi	r24, 0x92	; 146
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	9e 01       	movw	r18, r28
     556:	25 5a       	subi	r18, 0xA5	; 165
     558:	3f 4f       	sbci	r19, 0xFF	; 255
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     562:	ce 01       	movw	r24, r28
     564:	82 59       	subi	r24, 0x92	; 146
     566:	9f 4f       	sbci	r25, 0xFF	; 255
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	28 2f       	mov	r18, r24
     56e:	2a 95       	dec	r18
     570:	f1 f7       	brne	.-4      	; 0x56e <__stack+0x10f>
     572:	ce 01       	movw	r24, r28
     574:	82 59       	subi	r24, 0x92	; 146
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
     57c:	88 e3       	ldi	r24, 0x38	; 56
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	28 e3       	ldi	r18, 0x38	; 56
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	2e 7f       	andi	r18, 0xFE	; 254
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	a8 e4       	ldi	r26, 0x48	; 72
     594:	b3 e4       	ldi	r27, 0x43	; 67
     596:	8d 83       	std	Y+5, r24	; 0x05
     598:	9e 83       	std	Y+6, r25	; 0x06
     59a:	af 83       	std	Y+7, r26	; 0x07
     59c:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     59e:	2b ea       	ldi	r18, 0xAB	; 171
     5a0:	3a ea       	ldi	r19, 0xAA	; 170
     5a2:	4a ea       	ldi	r20, 0xAA	; 170
     5a4:	5e e3       	ldi	r21, 0x3E	; 62
     5a6:	6d 81       	ldd	r22, Y+5	; 0x05
     5a8:	7e 81       	ldd	r23, Y+6	; 0x06
     5aa:	8f 81       	ldd	r24, Y+7	; 0x07
     5ac:	98 85       	ldd	r25, Y+8	; 0x08
     5ae:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     5b2:	dc 01       	movw	r26, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	8f ab       	std	Y+55, r24	; 0x37
     5b8:	98 af       	std	Y+56, r25	; 0x38
     5ba:	a9 af       	std	Y+57, r26	; 0x39
     5bc:	ba af       	std	Y+58, r27	; 0x3a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e8       	ldi	r20, 0x80	; 128
     5c4:	5e e3       	ldi	r21, 0x3E	; 62
     5c6:	6d 81       	ldd	r22, Y+5	; 0x05
     5c8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ca:	8f 81       	ldd	r24, Y+7	; 0x07
     5cc:	98 85       	ldd	r25, Y+8	; 0x08
     5ce:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	8b af       	std	Y+59, r24	; 0x3b
     5d8:	9c af       	std	Y+60, r25	; 0x3c
     5da:	ad af       	std	Y+61, r26	; 0x3d
     5dc:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	5f e3       	ldi	r21, 0x3F	; 63
     5e6:	6f a9       	ldd	r22, Y+55	; 0x37
     5e8:	78 ad       	ldd	r23, Y+56	; 0x38
     5ea:	89 ad       	ldd	r24, Y+57	; 0x39
     5ec:	9a ad       	ldd	r25, Y+58	; 0x3a
     5ee:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     5f2:	88 23       	and	r24, r24
     5f4:	1c f4       	brge	.+6      	; 0x5fc <__stack+0x19d>
		__ticks = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	8f af       	std	Y+63, r24	; 0x3f
     5fa:	18 c1       	rjmp	.+560    	; 0x82c <__stack+0x3cd>
	else if (__tmp2 > 65535)
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	3f ef       	ldi	r19, 0xFF	; 255
     600:	4f e7       	ldi	r20, 0x7F	; 127
     602:	57 e4       	ldi	r21, 0x47	; 71
     604:	6b ad       	ldd	r22, Y+59	; 0x3b
     606:	7c ad       	ldd	r23, Y+60	; 0x3c
     608:	8d ad       	ldd	r24, Y+61	; 0x3d
     60a:	9e ad       	ldd	r25, Y+62	; 0x3e
     60c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	0c f0       	brlt	.+2      	; 0x616 <__stack+0x1b7>
     614:	cd c0       	rjmp	.+410    	; 0x7b0 <__stack+0x351>
	{
		_delay_ms(__us / 1000.0);
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a e7       	ldi	r20, 0x7A	; 122
     61c:	54 e4       	ldi	r21, 0x44	; 68
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	9e 01       	movw	r18, r28
     630:	20 5c       	subi	r18, 0xC0	; 192
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	f9 01       	movw	r30, r18
     636:	80 83       	st	Z, r24
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	a2 83       	std	Z+2, r26	; 0x02
     63c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     63e:	8e 01       	movw	r16, r28
     640:	0c 5b       	subi	r16, 0xBC	; 188
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	80 5c       	subi	r24, 0xC0	; 192
     648:	9f 4f       	sbci	r25, 0xFF	; 255
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	4a e7       	ldi	r20, 0x7A	; 122
     650:	53 e4       	ldi	r21, 0x43	; 67
     652:	fc 01       	movw	r30, r24
     654:	60 81       	ld	r22, Z
     656:	71 81       	ldd	r23, Z+1	; 0x01
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	f8 01       	movw	r30, r16
     666:	80 83       	st	Z, r24
     668:	91 83       	std	Z+1, r25	; 0x01
     66a:	a2 83       	std	Z+2, r26	; 0x02
     66c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     66e:	ce 01       	movw	r24, r28
     670:	8c 5b       	subi	r24, 0xBC	; 188
     672:	9f 4f       	sbci	r25, 0xFF	; 255
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	fc 01       	movw	r30, r24
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	93 81       	ldd	r25, Z+3	; 0x03
     686:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	4c f4       	brge	.+18     	; 0x6a0 <__stack+0x241>
		__ticks = 1;
     68e:	ce 01       	movw	r24, r28
     690:	88 5b       	subi	r24, 0xB8	; 184
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	31 83       	std	Z+1, r19	; 0x01
     69c:	20 83       	st	Z, r18
     69e:	6d c0       	rjmp	.+218    	; 0x77a <__stack+0x31b>
	else if (__tmp > 65535)
     6a0:	ce 01       	movw	r24, r28
     6a2:	8c 5b       	subi	r24, 0xBC	; 188
     6a4:	9f 4f       	sbci	r25, 0xFF	; 255
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	3f ef       	ldi	r19, 0xFF	; 255
     6aa:	4f e7       	ldi	r20, 0x7F	; 127
     6ac:	57 e4       	ldi	r21, 0x47	; 71
     6ae:	fc 01       	movw	r30, r24
     6b0:	60 81       	ld	r22, Z
     6b2:	71 81       	ldd	r23, Z+1	; 0x01
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	93 81       	ldd	r25, Z+3	; 0x03
     6b8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <__stack+0x263>
     6c0:	4a c0       	rjmp	.+148    	; 0x756 <__stack+0x2f7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c2:	ce 01       	movw	r24, r28
     6c4:	80 5c       	subi	r24, 0xC0	; 192
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	fc 01       	movw	r30, r24
     6d2:	60 81       	ld	r22, Z
     6d4:	71 81       	ldd	r23, Z+1	; 0x01
     6d6:	82 81       	ldd	r24, Z+2	; 0x02
     6d8:	93 81       	ldd	r25, Z+3	; 0x03
     6da:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	8e 01       	movw	r16, r28
     6e4:	08 5b       	subi	r16, 0xB8	; 184
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	f8 01       	movw	r30, r16
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	80 83       	st	Z, r24
     6fa:	24 c0       	rjmp	.+72     	; 0x744 <__stack+0x2e5>
     6fc:	ce 01       	movw	r24, r28
     6fe:	86 5b       	subi	r24, 0xB6	; 182
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	29 e1       	ldi	r18, 0x19	; 25
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     70c:	ce 01       	movw	r24, r28
     70e:	86 5b       	subi	r24, 0xB6	; 182
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <__stack+0x2b9>
     71c:	9e 01       	movw	r18, r28
     71e:	26 5b       	subi	r18, 0xB6	; 182
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	f9 01       	movw	r30, r18
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	ce 01       	movw	r24, r28
     72a:	88 5b       	subi	r24, 0xB8	; 184
     72c:	9f 4f       	sbci	r25, 0xFF	; 255
     72e:	9e 01       	movw	r18, r28
     730:	28 5b       	subi	r18, 0xB8	; 184
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	31 81       	ldd	r19, Z+1	; 0x01
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	31 09       	sbc	r19, r1
     73e:	fc 01       	movw	r30, r24
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     744:	ce 01       	movw	r24, r28
     746:	88 5b       	subi	r24, 0xB8	; 184
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	89 2b       	or	r24, r25
     752:	a1 f6       	brne	.-88     	; 0x6fc <__stack+0x29d>
     754:	6b c0       	rjmp	.+214    	; 0x82c <__stack+0x3cd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	8e 01       	movw	r16, r28
     758:	08 5b       	subi	r16, 0xB8	; 184
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	ce 01       	movw	r24, r28
     75e:	8c 5b       	subi	r24, 0xBC	; 188
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	fc 01       	movw	r30, r24
     764:	60 81       	ld	r22, Z
     766:	71 81       	ldd	r23, Z+1	; 0x01
     768:	82 81       	ldd	r24, Z+2	; 0x02
     76a:	93 81       	ldd	r25, Z+3	; 0x03
     76c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	f8 01       	movw	r30, r16
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
     77a:	ce 01       	movw	r24, r28
     77c:	84 5b       	subi	r24, 0xB4	; 180
     77e:	9f 4f       	sbci	r25, 0xFF	; 255
     780:	9e 01       	movw	r18, r28
     782:	28 5b       	subi	r18, 0xB8	; 184
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	31 81       	ldd	r19, Z+1	; 0x01
     78c:	fc 01       	movw	r30, r24
     78e:	31 83       	std	Z+1, r19	; 0x01
     790:	20 83       	st	Z, r18
     792:	ce 01       	movw	r24, r28
     794:	84 5b       	subi	r24, 0xB4	; 180
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <__stack+0x33f>
     7a2:	9e 01       	movw	r18, r28
     7a4:	24 5b       	subi	r18, 0xB4	; 180
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	f9 01       	movw	r30, r18
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
     7ae:	3e c0       	rjmp	.+124    	; 0x82c <__stack+0x3cd>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	4f e7       	ldi	r20, 0x7F	; 127
     7b6:	53 e4       	ldi	r21, 0x43	; 67
     7b8:	6f a9       	ldd	r22, Y+55	; 0x37
     7ba:	78 ad       	ldd	r23, Y+56	; 0x38
     7bc:	89 ad       	ldd	r24, Y+57	; 0x39
     7be:	9a ad       	ldd	r25, Y+58	; 0x3a
     7c0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	4c f5       	brge	.+82     	; 0x81a <__stack+0x3bb>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     7c8:	8e 01       	movw	r16, r28
     7ca:	02 5b       	subi	r16, 0xB2	; 178
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	6b ad       	ldd	r22, Y+59	; 0x3b
     7d0:	7c ad       	ldd	r23, Y+60	; 0x3c
     7d2:	8d ad       	ldd	r24, Y+61	; 0x3d
     7d4:	9e ad       	ldd	r25, Y+62	; 0x3e
     7d6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	f8 01       	movw	r30, r16
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
     7e4:	ce 01       	movw	r24, r28
     7e6:	80 5b       	subi	r24, 0xB0	; 176
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	9e 01       	movw	r18, r28
     7ec:	22 5b       	subi	r18, 0xB2	; 178
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	31 81       	ldd	r19, Z+1	; 0x01
     7f6:	fc 01       	movw	r30, r24
     7f8:	31 83       	std	Z+1, r19	; 0x01
     7fa:	20 83       	st	Z, r18
     7fc:	ce 01       	movw	r24, r28
     7fe:	80 5b       	subi	r24, 0xB0	; 176
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <__stack+0x3a9>
     80c:	9e 01       	movw	r18, r28
     80e:	20 5b       	subi	r18, 0xB0	; 176
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	f9 01       	movw	r30, r18
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
     818:	1c c0       	rjmp	.+56     	; 0x852 <__stack+0x3f3>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     81a:	6f a9       	ldd	r22, Y+55	; 0x37
     81c:	78 ad       	ldd	r23, Y+56	; 0x38
     81e:	89 ad       	ldd	r24, Y+57	; 0x39
     820:	9a ad       	ldd	r25, Y+58	; 0x3a
     822:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	8f af       	std	Y+63, r24	; 0x3f
     82c:	ce 01       	movw	r24, r28
     82e:	8e 5a       	subi	r24, 0xAE	; 174
     830:	9f 4f       	sbci	r25, 0xFF	; 255
     832:	2f ad       	ldd	r18, Y+63	; 0x3f
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     838:	ce 01       	movw	r24, r28
     83a:	8e 5a       	subi	r24, 0xAE	; 174
     83c:	9f 4f       	sbci	r25, 0xFF	; 255
     83e:	fc 01       	movw	r30, r24
     840:	80 81       	ld	r24, Z
     842:	28 2f       	mov	r18, r24
     844:	2a 95       	dec	r18
     846:	f1 f7       	brne	.-4      	; 0x844 <__stack+0x3e5>
     848:	ce 01       	movw	r24, r28
     84a:	8e 5a       	subi	r24, 0xAE	; 174
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
    _delay_us(200);

    LCD_PORT = (LCD_PORT & 0x0F) | (cmd<<4);
     852:	88 e3       	ldi	r24, 0x38	; 56
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	28 e3       	ldi	r18, 0x38	; 56
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	f9 01       	movw	r30, r18
     85c:	20 81       	ld	r18, Z
     85e:	42 2f       	mov	r20, r18
     860:	4f 70       	andi	r20, 0x0F	; 15
     862:	9e 01       	movw	r18, r28
     864:	21 59       	subi	r18, 0x91	; 145
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	f9 01       	movw	r30, r18
     86a:	20 81       	ld	r18, Z
     86c:	22 2f       	mov	r18, r18
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	22 95       	swap	r18
     872:	32 95       	swap	r19
     874:	30 7f       	andi	r19, 0xF0	; 240
     876:	32 27       	eor	r19, r18
     878:	20 7f       	andi	r18, 0xF0	; 240
     87a:	32 27       	eor	r19, r18
     87c:	24 2b       	or	r18, r20
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
     882:	88 e3       	ldi	r24, 0x38	; 56
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	28 e3       	ldi	r18, 0x38	; 56
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	f9 01       	movw	r30, r18
     88c:	20 81       	ld	r18, Z
     88e:	21 60       	ori	r18, 0x01	; 1
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a0 e8       	ldi	r26, 0x80	; 128
     89a:	bf e3       	ldi	r27, 0x3F	; 63
     89c:	89 87       	std	Y+9, r24	; 0x09
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	ab 87       	std	Y+11, r26	; 0x0b
     8a2:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     8a4:	2b ea       	ldi	r18, 0xAB	; 171
     8a6:	3a ea       	ldi	r19, 0xAA	; 170
     8a8:	4a ea       	ldi	r20, 0xAA	; 170
     8aa:	5e e3       	ldi	r21, 0x3E	; 62
     8ac:	69 85       	ldd	r22, Y+9	; 0x09
     8ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	8b 8f       	std	Y+27, r24	; 0x1b
     8be:	9c 8f       	std	Y+28, r25	; 0x1c
     8c0:	ad 8f       	std	Y+29, r26	; 0x1d
     8c2:	be 8f       	std	Y+30, r27	; 0x1e
	__tmp2 = ((F_CPU) / 4e6) * __us;
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	5e e3       	ldi	r21, 0x3E	; 62
     8cc:	69 85       	ldd	r22, Y+9	; 0x09
     8ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     8d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	8f 8f       	std	Y+31, r24	; 0x1f
     8de:	98 a3       	std	Y+32, r25	; 0x20
     8e0:	a9 a3       	std	Y+33, r26	; 0x21
     8e2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e8       	ldi	r20, 0x80	; 128
     8ea:	5f e3       	ldi	r21, 0x3F	; 63
     8ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
     8ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
     8f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	1c f4       	brge	.+6      	; 0x902 <__stack+0x4a3>
		__ticks = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	8b a3       	std	Y+35, r24	; 0x23
     900:	b2 c0       	rjmp	.+356    	; 0xa66 <__stack+0x607>
	else if (__tmp2 > 65535)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     90c:	78 a1       	ldd	r23, Y+32	; 0x20
     90e:	89 a1       	ldd	r24, Y+33	; 0x21
     910:	9a a1       	ldd	r25, Y+34	; 0x22
     912:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     916:	18 16       	cp	r1, r24
     918:	0c f0       	brlt	.+2      	; 0x91c <__stack+0x4bd>
     91a:	7b c0       	rjmp	.+246    	; 0xa12 <__stack+0x5b3>
	{
		_delay_ms(__us / 1000.0);
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	4a e7       	ldi	r20, 0x7A	; 122
     922:	54 e4       	ldi	r21, 0x44	; 68
     924:	69 85       	ldd	r22, Y+9	; 0x09
     926:	7a 85       	ldd	r23, Y+10	; 0x0a
     928:	8b 85       	ldd	r24, Y+11	; 0x0b
     92a:	9c 85       	ldd	r25, Y+12	; 0x0c
     92c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	8c a3       	std	Y+36, r24	; 0x24
     936:	9d a3       	std	Y+37, r25	; 0x25
     938:	ae a3       	std	Y+38, r26	; 0x26
     93a:	bf a3       	std	Y+39, r27	; 0x27

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4a e7       	ldi	r20, 0x7A	; 122
     942:	53 e4       	ldi	r21, 0x43	; 67
     944:	6c a1       	ldd	r22, Y+36	; 0x24
     946:	7d a1       	ldd	r23, Y+37	; 0x25
     948:	8e a1       	ldd	r24, Y+38	; 0x26
     94a:	9f a1       	ldd	r25, Y+39	; 0x27
     94c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	88 a7       	std	Y+40, r24	; 0x28
     956:	99 a7       	std	Y+41, r25	; 0x29
     958:	aa a7       	std	Y+42, r26	; 0x2a
     95a:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e8       	ldi	r20, 0x80	; 128
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	68 a5       	ldd	r22, Y+40	; 0x28
     966:	79 a5       	ldd	r23, Y+41	; 0x29
     968:	8a a5       	ldd	r24, Y+42	; 0x2a
     96a:	9b a5       	ldd	r25, Y+43	; 0x2b
     96c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	2c f4       	brge	.+10     	; 0x97e <__stack+0x51f>
		__ticks = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9d a7       	std	Y+45, r25	; 0x2d
     97a:	8c a7       	std	Y+44, r24	; 0x2c
     97c:	3f c0       	rjmp	.+126    	; 0x9fc <__stack+0x59d>
	else if (__tmp > 65535)
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	3f ef       	ldi	r19, 0xFF	; 255
     982:	4f e7       	ldi	r20, 0x7F	; 127
     984:	57 e4       	ldi	r21, 0x47	; 71
     986:	68 a5       	ldd	r22, Y+40	; 0x28
     988:	79 a5       	ldd	r23, Y+41	; 0x29
     98a:	8a a5       	ldd	r24, Y+42	; 0x2a
     98c:	9b a5       	ldd	r25, Y+43	; 0x2b
     98e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     992:	18 16       	cp	r1, r24
     994:	4c f5       	brge	.+82     	; 0x9e8 <__stack+0x589>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	51 e4       	ldi	r21, 0x41	; 65
     99e:	6c a1       	ldd	r22, Y+36	; 0x24
     9a0:	7d a1       	ldd	r23, Y+37	; 0x25
     9a2:	8e a1       	ldd	r24, Y+38	; 0x26
     9a4:	9f a1       	ldd	r25, Y+39	; 0x27
     9a6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9d a7       	std	Y+45, r25	; 0x2d
     9bc:	8c a7       	std	Y+44, r24	; 0x2c
     9be:	0f c0       	rjmp	.+30     	; 0x9de <__stack+0x57f>
     9c0:	89 e1       	ldi	r24, 0x19	; 25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	9f a7       	std	Y+47, r25	; 0x2f
     9c6:	8e a7       	std	Y+46, r24	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9c8:	8e a5       	ldd	r24, Y+46	; 0x2e
     9ca:	9f a5       	ldd	r25, Y+47	; 0x2f
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <__stack+0x56d>
     9d0:	9f a7       	std	Y+47, r25	; 0x2f
     9d2:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d4:	8c a5       	ldd	r24, Y+44	; 0x2c
     9d6:	9d a5       	ldd	r25, Y+45	; 0x2d
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9d a7       	std	Y+45, r25	; 0x2d
     9dc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9de:	8c a5       	ldd	r24, Y+44	; 0x2c
     9e0:	9d a5       	ldd	r25, Y+45	; 0x2d
     9e2:	89 2b       	or	r24, r25
     9e4:	69 f7       	brne	.-38     	; 0x9c0 <__stack+0x561>
     9e6:	3f c0       	rjmp	.+126    	; 0xa66 <__stack+0x607>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e8:	68 a5       	ldd	r22, Y+40	; 0x28
     9ea:	79 a5       	ldd	r23, Y+41	; 0x29
     9ec:	8a a5       	ldd	r24, Y+42	; 0x2a
     9ee:	9b a5       	ldd	r25, Y+43	; 0x2b
     9f0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9d a7       	std	Y+45, r25	; 0x2d
     9fa:	8c a7       	std	Y+44, r24	; 0x2c
     9fc:	8c a5       	ldd	r24, Y+44	; 0x2c
     9fe:	9d a5       	ldd	r25, Y+45	; 0x2d
     a00:	99 ab       	std	Y+49, r25	; 0x31
     a02:	88 ab       	std	Y+48, r24	; 0x30
     a04:	88 a9       	ldd	r24, Y+48	; 0x30
     a06:	99 a9       	ldd	r25, Y+49	; 0x31
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <__stack+0x5a9>
     a0c:	99 ab       	std	Y+49, r25	; 0x31
     a0e:	88 ab       	std	Y+48, r24	; 0x30
     a10:	2a c0       	rjmp	.+84     	; 0xa66 <__stack+0x607>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	4f e7       	ldi	r20, 0x7F	; 127
     a18:	53 e4       	ldi	r21, 0x43	; 67
     a1a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a1c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a22:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     a26:	18 16       	cp	r1, r24
     a28:	ac f4       	brge	.+42     	; 0xa54 <__stack+0x5f5>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a2c:	78 a1       	ldd	r23, Y+32	; 0x20
     a2e:	89 a1       	ldd	r24, Y+33	; 0x21
     a30:	9a a1       	ldd	r25, Y+34	; 0x22
     a32:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	9b ab       	std	Y+51, r25	; 0x33
     a3c:	8a ab       	std	Y+50, r24	; 0x32
     a3e:	8a a9       	ldd	r24, Y+50	; 0x32
     a40:	9b a9       	ldd	r25, Y+51	; 0x33
     a42:	9d ab       	std	Y+53, r25	; 0x35
     a44:	8c ab       	std	Y+52, r24	; 0x34
     a46:	8c a9       	ldd	r24, Y+52	; 0x34
     a48:	9d a9       	ldd	r25, Y+53	; 0x35
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <__stack+0x5eb>
     a4e:	9d ab       	std	Y+53, r25	; 0x35
     a50:	8c ab       	std	Y+52, r24	; 0x34
     a52:	0f c0       	rjmp	.+30     	; 0xa72 <__stack+0x613>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a54:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a56:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a5c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     a60:	dc 01       	movw	r26, r24
     a62:	cb 01       	movw	r24, r22
     a64:	8b a3       	std	Y+35, r24	; 0x23
     a66:	8b a1       	ldd	r24, Y+35	; 0x23
     a68:	8e ab       	std	Y+54, r24	; 0x36
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a6a:	8e a9       	ldd	r24, Y+54	; 0x36
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <__stack+0x60d>
     a70:	8e ab       	std	Y+54, r24	; 0x36
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
     a72:	88 e3       	ldi	r24, 0x38	; 56
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	28 e3       	ldi	r18, 0x38	; 56
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	2e 7f       	andi	r18, 0xFE	; 254
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e4       	ldi	r27, 0x40	; 64
     a8c:	8d 87       	std	Y+13, r24	; 0x0d
     a8e:	9e 87       	std	Y+14, r25	; 0x0e
     a90:	af 87       	std	Y+15, r26	; 0x0f
     a92:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	4a e7       	ldi	r20, 0x7A	; 122
     a9a:	53 e4       	ldi	r21, 0x43	; 67
     a9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     a9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa2:	98 89       	ldd	r25, Y+16	; 0x10
     aa4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	89 8b       	std	Y+17, r24	; 0x11
     aae:	9a 8b       	std	Y+18, r25	; 0x12
     ab0:	ab 8b       	std	Y+19, r26	; 0x13
     ab2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e8       	ldi	r20, 0x80	; 128
     aba:	5f e3       	ldi	r21, 0x3F	; 63
     abc:	69 89       	ldd	r22, Y+17	; 0x11
     abe:	7a 89       	ldd	r23, Y+18	; 0x12
     ac0:	8b 89       	ldd	r24, Y+19	; 0x13
     ac2:	9c 89       	ldd	r25, Y+20	; 0x14
     ac4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     ac8:	88 23       	and	r24, r24
     aca:	2c f4       	brge	.+10     	; 0xad6 <__stack+0x677>
		__ticks = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9e 8b       	std	Y+22, r25	; 0x16
     ad2:	8d 8b       	std	Y+21, r24	; 0x15
     ad4:	3f c0       	rjmp	.+126    	; 0xb54 <__stack+0x6f5>
	else if (__tmp > 65535)
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	3f ef       	ldi	r19, 0xFF	; 255
     ada:	4f e7       	ldi	r20, 0x7F	; 127
     adc:	57 e4       	ldi	r21, 0x47	; 71
     ade:	69 89       	ldd	r22, Y+17	; 0x11
     ae0:	7a 89       	ldd	r23, Y+18	; 0x12
     ae2:	8b 89       	ldd	r24, Y+19	; 0x13
     ae4:	9c 89       	ldd	r25, Y+20	; 0x14
     ae6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     aea:	18 16       	cp	r1, r24
     aec:	4c f5       	brge	.+82     	; 0xb40 <__stack+0x6e1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e2       	ldi	r20, 0x20	; 32
     af4:	51 e4       	ldi	r21, 0x41	; 65
     af6:	6d 85       	ldd	r22, Y+13	; 0x0d
     af8:	7e 85       	ldd	r23, Y+14	; 0x0e
     afa:	8f 85       	ldd	r24, Y+15	; 0x0f
     afc:	98 89       	ldd	r25, Y+16	; 0x10
     afe:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	bc 01       	movw	r22, r24
     b08:	cd 01       	movw	r24, r26
     b0a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	9e 8b       	std	Y+22, r25	; 0x16
     b14:	8d 8b       	std	Y+21, r24	; 0x15
     b16:	0f c0       	rjmp	.+30     	; 0xb36 <__stack+0x6d7>
     b18:	89 e1       	ldi	r24, 0x19	; 25
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	98 8f       	std	Y+24, r25	; 0x18
     b1e:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b20:	8f 89       	ldd	r24, Y+23	; 0x17
     b22:	98 8d       	ldd	r25, Y+24	; 0x18
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <__stack+0x6c5>
     b28:	98 8f       	std	Y+24, r25	; 0x18
     b2a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2c:	8d 89       	ldd	r24, Y+21	; 0x15
     b2e:	9e 89       	ldd	r25, Y+22	; 0x16
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	9e 8b       	std	Y+22, r25	; 0x16
     b34:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b36:	8d 89       	ldd	r24, Y+21	; 0x15
     b38:	9e 89       	ldd	r25, Y+22	; 0x16
     b3a:	89 2b       	or	r24, r25
     b3c:	69 f7       	brne	.-38     	; 0xb18 <__stack+0x6b9>
    _delay_ms(2);
}
     b3e:	14 c0       	rjmp	.+40     	; 0xb68 <__stack+0x709>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b40:	69 89       	ldd	r22, Y+17	; 0x11
     b42:	7a 89       	ldd	r23, Y+18	; 0x12
     b44:	8b 89       	ldd	r24, Y+19	; 0x13
     b46:	9c 89       	ldd	r25, Y+20	; 0x14
     b48:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9e 8b       	std	Y+22, r25	; 0x16
     b52:	8d 8b       	std	Y+21, r24	; 0x15
     b54:	8d 89       	ldd	r24, Y+21	; 0x15
     b56:	9e 89       	ldd	r25, Y+22	; 0x16
     b58:	9a 8f       	std	Y+26, r25	; 0x1a
     b5a:	89 8f       	std	Y+25, r24	; 0x19
     b5c:	89 8d       	ldd	r24, Y+25	; 0x19
     b5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <__stack+0x701>
     b64:	9a 8f       	std	Y+26, r25	; 0x1a
     b66:	89 8f       	std	Y+25, r24	; 0x19
     b68:	00 00       	nop
     b6a:	c1 59       	subi	r28, 0x91	; 145
     b6c:	df 4f       	sbci	r29, 0xFF	; 255
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <LCD_Init>:

void LCD_Init(void)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	2e 97       	sbiw	r28, 0x0e	; 14
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
    LCD_DDR = 0xFF;
     b96:	87 e3       	ldi	r24, 0x37	; 55
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 ea       	ldi	r26, 0xA0	; 160
     ba6:	b1 e4       	ldi	r27, 0x41	; 65
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	ab 83       	std	Y+3, r26	; 0x03
     bae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e7       	ldi	r20, 0x7A	; 122
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	69 81       	ldd	r22, Y+1	; 0x01
     bba:	7a 81       	ldd	r23, Y+2	; 0x02
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	af 83       	std	Y+7, r26	; 0x07
     bce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	6d 81       	ldd	r22, Y+5	; 0x05
     bda:	7e 81       	ldd	r23, Y+6	; 0x06
     bdc:	8f 81       	ldd	r24, Y+7	; 0x07
     bde:	98 85       	ldd	r25, Y+8	; 0x08
     be0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <LCD_Init+0x70>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9a 87       	std	Y+10, r25	; 0x0a
     bee:	89 87       	std	Y+9, r24	; 0x09
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <LCD_Init+0xee>
	else if (__tmp > 65535)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	57 e4       	ldi	r21, 0x47	; 71
     bfa:	6d 81       	ldd	r22, Y+5	; 0x05
     bfc:	7e 81       	ldd	r23, Y+6	; 0x06
     bfe:	8f 81       	ldd	r24, Y+7	; 0x07
     c00:	98 85       	ldd	r25, Y+8	; 0x08
     c02:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <LCD_Init+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	69 81       	ldd	r22, Y+1	; 0x01
     c14:	7a 81       	ldd	r23, Y+2	; 0x02
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9a 87       	std	Y+10, r25	; 0x0a
     c30:	89 87       	std	Y+9, r24	; 0x09
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <LCD_Init+0xd0>
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9c 87       	std	Y+12, r25	; 0x0c
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
     c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_Init+0xbe>
     c44:	9c 87       	std	Y+12, r25	; 0x0c
     c46:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9a 87       	std	Y+10, r25	; 0x0a
     c50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	89 2b       	or	r24, r25
     c58:	69 f7       	brne	.-38     	; 0xc34 <LCD_Init+0xb2>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <LCD_Init+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	6d 81       	ldd	r22, Y+5	; 0x05
     c5e:	7e 81       	ldd	r23, Y+6	; 0x06
     c60:	8f 81       	ldd	r24, Y+7	; 0x07
     c62:	98 85       	ldd	r25, Y+8	; 0x08
     c64:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9a 87       	std	Y+10, r25	; 0x0a
     c6e:	89 87       	std	Y+9, r24	; 0x09
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	9e 87       	std	Y+14, r25	; 0x0e
     c76:	8d 87       	std	Y+13, r24	; 0x0d
     c78:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCD_Init+0xfa>
     c80:	9e 87       	std	Y+14, r25	; 0x0e
     c82:	8d 87       	std	Y+13, r24	; 0x0d
    _delay_ms(20);
    LCD_Command(0x02);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
    LCD_Command(0x28);
     c8a:	88 e2       	ldi	r24, 0x28	; 40
     c8c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
    LCD_Command(0x0C);
     c90:	8c e0       	ldi	r24, 0x0C	; 12
     c92:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
    LCD_Command(0x06);
     c96:	86 e0       	ldi	r24, 0x06	; 6
     c98:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
    LCD_Command(0x01);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
}
     ca2:	00 00       	nop
     ca4:	2e 96       	adiw	r28, 0x0e	; 14
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <LCD_Clear>:

void LCD_Clear(void)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	6c 97       	sbiw	r28, 0x1c	; 28
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
    LCD_Command(0x01);     // Clear display
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 ea       	ldi	r26, 0xA0	; 160
     cd6:	b0 e4       	ldi	r27, 0x40	; 64
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	ab 83       	std	Y+3, r26	; 0x03
     cde:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	53 e4       	ldi	r21, 0x43	; 67
     ce8:	69 81       	ldd	r22, Y+1	; 0x01
     cea:	7a 81       	ldd	r23, Y+2	; 0x02
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	8b 8b       	std	Y+19, r24	; 0x13
     cfa:	9c 8b       	std	Y+20, r25	; 0x14
     cfc:	ad 8b       	std	Y+21, r26	; 0x15
     cfe:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	6b 89       	ldd	r22, Y+19	; 0x13
     d0a:	7c 89       	ldd	r23, Y+20	; 0x14
     d0c:	8d 89       	ldd	r24, Y+21	; 0x15
     d0e:	9e 89       	ldd	r25, Y+22	; 0x16
     d10:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     d14:	88 23       	and	r24, r24
     d16:	2c f4       	brge	.+10     	; 0xd22 <LCD_Clear+0x6c>
		__ticks = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	98 8f       	std	Y+24, r25	; 0x18
     d1e:	8f 8b       	std	Y+23, r24	; 0x17
     d20:	3f c0       	rjmp	.+126    	; 0xda0 <LCD_Clear+0xea>
	else if (__tmp > 65535)
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	6b 89       	ldd	r22, Y+19	; 0x13
     d2c:	7c 89       	ldd	r23, Y+20	; 0x14
     d2e:	8d 89       	ldd	r24, Y+21	; 0x15
     d30:	9e 89       	ldd	r25, Y+22	; 0x16
     d32:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     d36:	18 16       	cp	r1, r24
     d38:	4c f5       	brge	.+82     	; 0xd8c <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	98 8f       	std	Y+24, r25	; 0x18
     d60:	8f 8b       	std	Y+23, r24	; 0x17
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <LCD_Clear+0xcc>
     d64:	89 e1       	ldi	r24, 0x19	; 25
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9a 8f       	std	Y+26, r25	; 0x1a
     d6a:	89 8f       	std	Y+25, r24	; 0x19
     d6c:	89 8d       	ldd	r24, Y+25	; 0x19
     d6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LCD_Clear+0xba>
     d74:	9a 8f       	std	Y+26, r25	; 0x1a
     d76:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	98 8f       	std	Y+24, r25	; 0x18
     d80:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d82:	8f 89       	ldd	r24, Y+23	; 0x17
     d84:	98 8d       	ldd	r25, Y+24	; 0x18
     d86:	89 2b       	or	r24, r25
     d88:	69 f7       	brne	.-38     	; 0xd64 <LCD_Clear+0xae>
     d8a:	14 c0       	rjmp	.+40     	; 0xdb4 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8c:	6b 89       	ldd	r22, Y+19	; 0x13
     d8e:	7c 89       	ldd	r23, Y+20	; 0x14
     d90:	8d 89       	ldd	r24, Y+21	; 0x15
     d92:	9e 89       	ldd	r25, Y+22	; 0x16
     d94:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	98 8f       	std	Y+24, r25	; 0x18
     d9e:	8f 8b       	std	Y+23, r24	; 0x17
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	9c 8f       	std	Y+28, r25	; 0x1c
     da6:	8b 8f       	std	Y+27, r24	; 0x1b
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCD_Clear+0xf6>
     db0:	9c 8f       	std	Y+28, r25	; 0x1c
     db2:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(5);          // بدل 2ms خلّيها 5ms للآمان
    LCD_Command(0x80);     // Go to DDRAM address 0 (Home)
     db4:	80 e8       	ldi	r24, 0x80	; 128
     db6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e8       	ldi	r26, 0x80	; 128
     dc0:	bf e3       	ldi	r27, 0x3F	; 63
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	af 83       	std	Y+7, r26	; 0x07
     dc8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	6d 81       	ldd	r22, Y+5	; 0x05
     dd4:	7e 81       	ldd	r23, Y+6	; 0x06
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 87       	std	Y+9, r24	; 0x09
     de4:	9a 87       	std	Y+10, r25	; 0x0a
     de6:	ab 87       	std	Y+11, r26	; 0x0b
     de8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	69 85       	ldd	r22, Y+9	; 0x09
     df4:	7a 85       	ldd	r23, Y+10	; 0x0a
     df6:	8b 85       	ldd	r24, Y+11	; 0x0b
     df8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfa:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     dfe:	88 23       	and	r24, r24
     e00:	2c f4       	brge	.+10     	; 0xe0c <LCD_Clear+0x156>
		__ticks = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <LCD_Clear+0x1d4>
	else if (__tmp > 65535)
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	3f ef       	ldi	r19, 0xFF	; 255
     e10:	4f e7       	ldi	r20, 0x7F	; 127
     e12:	57 e4       	ldi	r21, 0x47	; 71
     e14:	69 85       	ldd	r22, Y+9	; 0x09
     e16:	7a 85       	ldd	r23, Y+10	; 0x0a
     e18:	8b 85       	ldd	r24, Y+11	; 0x0b
     e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e1c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     e20:	18 16       	cp	r1, r24
     e22:	4c f5       	brge	.+82     	; 0xe76 <LCD_Clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e2       	ldi	r20, 0x20	; 32
     e2a:	51 e4       	ldi	r21, 0x41	; 65
     e2c:	6d 81       	ldd	r22, Y+5	; 0x05
     e2e:	7e 81       	ldd	r23, Y+6	; 0x06
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 87       	std	Y+14, r25	; 0x0e
     e4a:	8d 87       	std	Y+13, r24	; 0x0d
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <LCD_Clear+0x1b6>
     e4e:	89 e1       	ldi	r24, 0x19	; 25
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	98 8b       	std	Y+16, r25	; 0x10
     e54:	8f 87       	std	Y+15, r24	; 0x0f
     e56:	8f 85       	ldd	r24, Y+15	; 0x0f
     e58:	98 89       	ldd	r25, Y+16	; 0x10
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <LCD_Clear+0x1a4>
     e5e:	98 8b       	std	Y+16, r25	; 0x10
     e60:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	9e 87       	std	Y+14, r25	; 0x0e
     e6a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	89 2b       	or	r24, r25
     e72:	69 f7       	brne	.-38     	; 0xe4e <LCD_Clear+0x198>
    _delay_ms(1);
}
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <LCD_Clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e76:	69 85       	ldd	r22, Y+9	; 0x09
     e78:	7a 85       	ldd	r23, Y+10	; 0x0a
     e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e7e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e 87       	std	Y+14, r25	; 0x0e
     e88:	8d 87       	std	Y+13, r24	; 0x0d
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	9a 8b       	std	Y+18, r25	; 0x12
     e90:	89 8b       	std	Y+17, r24	; 0x11
     e92:	89 89       	ldd	r24, Y+17	; 0x11
     e94:	9a 89       	ldd	r25, Y+18	; 0x12
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <LCD_Clear+0x1e0>
     e9a:	9a 8b       	std	Y+18, r25	; 0x12
     e9c:	89 8b       	std	Y+17, r24	; 0x11
     e9e:	00 00       	nop
     ea0:	6c 96       	adiw	r28, 0x1c	; 28
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <LCD_WriteChar>:

void LCD_WriteChar(char c)
{
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	cf 54       	subi	r28, 0x4F	; 79
     ec0:	d1 09       	sbc	r29, r1
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	9e 01       	movw	r18, r28
     ece:	21 5b       	subi	r18, 0xB1	; 177
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	f9 01       	movw	r30, r18
     ed4:	80 83       	st	Z, r24
    LCD_PORT = (LCD_PORT & 0x0F) | (c & 0xF0);
     ed6:	88 e3       	ldi	r24, 0x38	; 56
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	28 e3       	ldi	r18, 0x38	; 56
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	f9 01       	movw	r30, r18
     ee0:	20 81       	ld	r18, Z
     ee2:	42 2f       	mov	r20, r18
     ee4:	4f 70       	andi	r20, 0x0F	; 15
     ee6:	9e 01       	movw	r18, r28
     ee8:	21 5b       	subi	r18, 0xB1	; 177
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	20 7f       	andi	r18, 0xF0	; 240
     ef2:	24 2b       	or	r18, r20
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
    LCD_PORT |= (1<<RS);
     ef8:	88 e3       	ldi	r24, 0x38	; 56
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	28 e3       	ldi	r18, 0x38	; 56
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	22 60       	ori	r18, 0x02	; 2
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
     f0a:	88 e3       	ldi	r24, 0x38	; 56
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	28 e3       	ldi	r18, 0x38	; 56
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	21 60       	ori	r18, 0x01	; 1
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a0 e8       	ldi	r26, 0x80	; 128
     f22:	bf e3       	ldi	r27, 0x3F	; 63
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	ab 83       	std	Y+3, r26	; 0x03
     f2a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f2c:	2b ea       	ldi	r18, 0xAB	; 171
     f2e:	3a ea       	ldi	r19, 0xAA	; 170
     f30:	4a ea       	ldi	r20, 0xAA	; 170
     f32:	5e e3       	ldi	r21, 0x3E	; 62
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	7a 81       	ldd	r23, Y+2	; 0x02
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8b ab       	std	Y+51, r24	; 0x33
     f46:	9c ab       	std	Y+52, r25	; 0x34
     f48:	ad ab       	std	Y+53, r26	; 0x35
     f4a:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5e e3       	ldi	r21, 0x3E	; 62
     f54:	69 81       	ldd	r22, Y+1	; 0x01
     f56:	7a 81       	ldd	r23, Y+2	; 0x02
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8f ab       	std	Y+55, r24	; 0x37
     f66:	98 af       	std	Y+56, r25	; 0x38
     f68:	a9 af       	std	Y+57, r26	; 0x39
     f6a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	6b a9       	ldd	r22, Y+51	; 0x33
     f76:	7c a9       	ldd	r23, Y+52	; 0x34
     f78:	8d a9       	ldd	r24, Y+53	; 0x35
     f7a:	9e a9       	ldd	r25, Y+54	; 0x36
     f7c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
     f80:	88 23       	and	r24, r24
     f82:	1c f4       	brge	.+6      	; 0xf8a <LCD_WriteChar+0xd8>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	8b af       	std	Y+59, r24	; 0x3b
     f88:	0c c1       	rjmp	.+536    	; 0x11a2 <LCD_WriteChar+0x2f0>
	else if (__tmp2 > 65535)
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	3f ef       	ldi	r19, 0xFF	; 255
     f8e:	4f e7       	ldi	r20, 0x7F	; 127
     f90:	57 e4       	ldi	r21, 0x47	; 71
     f92:	6f a9       	ldd	r22, Y+55	; 0x37
     f94:	78 ad       	ldd	r23, Y+56	; 0x38
     f96:	89 ad       	ldd	r24, Y+57	; 0x39
     f98:	9a ad       	ldd	r25, Y+58	; 0x3a
     f9a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <LCD_WriteChar+0xf2>
     fa2:	c1 c0       	rjmp	.+386    	; 0x1126 <LCD_WriteChar+0x274>
	{
		_delay_ms(__us / 1000.0);
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a e7       	ldi	r20, 0x7A	; 122
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	69 81       	ldd	r22, Y+1	; 0x01
     fae:	7a 81       	ldd	r23, Y+2	; 0x02
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8c af       	std	Y+60, r24	; 0x3c
     fbe:	9d af       	std	Y+61, r25	; 0x3d
     fc0:	ae af       	std	Y+62, r26	; 0x3e
     fc2:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	8e 01       	movw	r16, r28
     fc6:	00 5c       	subi	r16, 0xC0	; 192
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a e7       	ldi	r20, 0x7A	; 122
     fd0:	53 e4       	ldi	r21, 0x43	; 67
     fd2:	6c ad       	ldd	r22, Y+60	; 0x3c
     fd4:	7d ad       	ldd	r23, Y+61	; 0x3d
     fd6:	8e ad       	ldd	r24, Y+62	; 0x3e
     fd8:	9f ad       	ldd	r25, Y+63	; 0x3f
     fda:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fec:	ce 01       	movw	r24, r28
     fee:	80 5c       	subi	r24, 0xC0	; 192
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	fc 01       	movw	r30, r24
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    1008:	88 23       	and	r24, r24
    100a:	4c f4       	brge	.+18     	; 0x101e <LCD_WriteChar+0x16c>
		__ticks = 1;
    100c:	ce 01       	movw	r24, r28
    100e:	8c 5b       	subi	r24, 0xBC	; 188
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	31 83       	std	Z+1, r19	; 0x01
    101a:	20 83       	st	Z, r18
    101c:	69 c0       	rjmp	.+210    	; 0x10f0 <LCD_WriteChar+0x23e>
	else if (__tmp > 65535)
    101e:	ce 01       	movw	r24, r28
    1020:	80 5c       	subi	r24, 0xC0	; 192
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	fc 01       	movw	r30, r24
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f0       	brlt	.+2      	; 0x1040 <LCD_WriteChar+0x18e>
    103e:	46 c0       	rjmp	.+140    	; 0x10cc <LCD_WriteChar+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	6c ad       	ldd	r22, Y+60	; 0x3c
    104a:	7d ad       	ldd	r23, Y+61	; 0x3d
    104c:	8e ad       	ldd	r24, Y+62	; 0x3e
    104e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1050:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8e 01       	movw	r16, r28
    105a:	0c 5b       	subi	r16, 0xBC	; 188
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	f8 01       	movw	r30, r16
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	24 c0       	rjmp	.+72     	; 0x10ba <LCD_WriteChar+0x208>
    1072:	ce 01       	movw	r24, r28
    1074:	8a 5b       	subi	r24, 0xBA	; 186
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	29 e1       	ldi	r18, 0x19	; 25
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	fc 01       	movw	r30, r24
    107e:	31 83       	std	Z+1, r19	; 0x01
    1080:	20 83       	st	Z, r18
    1082:	ce 01       	movw	r24, r28
    1084:	8a 5b       	subi	r24, 0xBA	; 186
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	fc 01       	movw	r30, r24
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_WriteChar+0x1dc>
    1092:	9e 01       	movw	r18, r28
    1094:	2a 5b       	subi	r18, 0xBA	; 186
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	f9 01       	movw	r30, r18
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	ce 01       	movw	r24, r28
    10a0:	8c 5b       	subi	r24, 0xBC	; 188
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	9e 01       	movw	r18, r28
    10a6:	2c 5b       	subi	r18, 0xBC	; 188
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	f9 01       	movw	r30, r18
    10ac:	20 81       	ld	r18, Z
    10ae:	31 81       	ldd	r19, Z+1	; 0x01
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	31 09       	sbc	r19, r1
    10b4:	fc 01       	movw	r30, r24
    10b6:	31 83       	std	Z+1, r19	; 0x01
    10b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	ce 01       	movw	r24, r28
    10bc:	8c 5b       	subi	r24, 0xBC	; 188
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	fc 01       	movw	r30, r24
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	89 2b       	or	r24, r25
    10c8:	a1 f6       	brne	.-88     	; 0x1072 <LCD_WriteChar+0x1c0>
    10ca:	6b c0       	rjmp	.+214    	; 0x11a2 <LCD_WriteChar+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10cc:	8e 01       	movw	r16, r28
    10ce:	0c 5b       	subi	r16, 0xBC	; 188
    10d0:	1f 4f       	sbci	r17, 0xFF	; 255
    10d2:	ce 01       	movw	r24, r28
    10d4:	80 5c       	subi	r24, 0xC0	; 192
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	fc 01       	movw	r30, r24
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	f8 01       	movw	r30, r16
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	ce 01       	movw	r24, r28
    10f2:	88 5b       	subi	r24, 0xB8	; 184
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	9e 01       	movw	r18, r28
    10f8:	2c 5b       	subi	r18, 0xBC	; 188
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	f9 01       	movw	r30, r18
    10fe:	20 81       	ld	r18, Z
    1100:	31 81       	ldd	r19, Z+1	; 0x01
    1102:	fc 01       	movw	r30, r24
    1104:	31 83       	std	Z+1, r19	; 0x01
    1106:	20 83       	st	Z, r18
    1108:	ce 01       	movw	r24, r28
    110a:	88 5b       	subi	r24, 0xB8	; 184
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <LCD_WriteChar+0x262>
    1118:	9e 01       	movw	r18, r28
    111a:	28 5b       	subi	r18, 0xB8	; 184
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	f9 01       	movw	r30, r18
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	3e c0       	rjmp	.+124    	; 0x11a2 <LCD_WriteChar+0x2f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	53 e4       	ldi	r21, 0x43	; 67
    112e:	6b a9       	ldd	r22, Y+51	; 0x33
    1130:	7c a9       	ldd	r23, Y+52	; 0x34
    1132:	8d a9       	ldd	r24, Y+53	; 0x35
    1134:	9e a9       	ldd	r25, Y+54	; 0x36
    1136:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <LCD_WriteChar+0x2de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    113e:	8e 01       	movw	r16, r28
    1140:	06 5b       	subi	r16, 0xB6	; 182
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	6f a9       	ldd	r22, Y+55	; 0x37
    1146:	78 ad       	ldd	r23, Y+56	; 0x38
    1148:	89 ad       	ldd	r24, Y+57	; 0x39
    114a:	9a ad       	ldd	r25, Y+58	; 0x3a
    114c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	f8 01       	movw	r30, r16
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
    115a:	ce 01       	movw	r24, r28
    115c:	84 5b       	subi	r24, 0xB4	; 180
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	9e 01       	movw	r18, r28
    1162:	26 5b       	subi	r18, 0xB6	; 182
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	31 81       	ldd	r19, Z+1	; 0x01
    116c:	fc 01       	movw	r30, r24
    116e:	31 83       	std	Z+1, r19	; 0x01
    1170:	20 83       	st	Z, r18
    1172:	ce 01       	movw	r24, r28
    1174:	84 5b       	subi	r24, 0xB4	; 180
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	fc 01       	movw	r30, r24
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <LCD_WriteChar+0x2cc>
    1182:	9e 01       	movw	r18, r28
    1184:	24 5b       	subi	r18, 0xB4	; 180
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	f9 01       	movw	r30, r18
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	1c c0       	rjmp	.+56     	; 0x11c8 <LCD_WriteChar+0x316>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1190:	6b a9       	ldd	r22, Y+51	; 0x33
    1192:	7c a9       	ldd	r23, Y+52	; 0x34
    1194:	8d a9       	ldd	r24, Y+53	; 0x35
    1196:	9e a9       	ldd	r25, Y+54	; 0x36
    1198:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	8b af       	std	Y+59, r24	; 0x3b
    11a2:	ce 01       	movw	r24, r28
    11a4:	82 5b       	subi	r24, 0xB2	; 178
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	2b ad       	ldd	r18, Y+59	; 0x3b
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11ae:	ce 01       	movw	r24, r28
    11b0:	82 5b       	subi	r24, 0xB2	; 178
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	2a 95       	dec	r18
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <LCD_WriteChar+0x308>
    11be:	ce 01       	movw	r24, r28
    11c0:	82 5b       	subi	r24, 0xB2	; 178
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
    11c8:	88 e3       	ldi	r24, 0x38	; 56
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e3       	ldi	r18, 0x38	; 56
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	20 81       	ld	r18, Z
    11d4:	2e 7f       	andi	r18, 0xFE	; 254
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18

    LCD_PORT = (LCD_PORT & 0x0F) | (c<<4);
    11da:	88 e3       	ldi	r24, 0x38	; 56
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	28 e3       	ldi	r18, 0x38	; 56
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	f9 01       	movw	r30, r18
    11e4:	20 81       	ld	r18, Z
    11e6:	42 2f       	mov	r20, r18
    11e8:	4f 70       	andi	r20, 0x0F	; 15
    11ea:	9e 01       	movw	r18, r28
    11ec:	21 5b       	subi	r18, 0xB1	; 177
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	22 2f       	mov	r18, r18
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	22 95       	swap	r18
    11fa:	32 95       	swap	r19
    11fc:	30 7f       	andi	r19, 0xF0	; 240
    11fe:	32 27       	eor	r19, r18
    1200:	20 7f       	andi	r18, 0xF0	; 240
    1202:	32 27       	eor	r19, r18
    1204:	24 2b       	or	r18, r20
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
    LCD_PORT |= (1<<EN);
    120a:	88 e3       	ldi	r24, 0x38	; 56
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	28 e3       	ldi	r18, 0x38	; 56
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	f9 01       	movw	r30, r18
    1214:	20 81       	ld	r18, Z
    1216:	21 60       	ori	r18, 0x01	; 1
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e8       	ldi	r26, 0x80	; 128
    1222:	bf e3       	ldi	r27, 0x3F	; 63
    1224:	8d 83       	std	Y+5, r24	; 0x05
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	af 83       	std	Y+7, r26	; 0x07
    122a:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    122c:	2b ea       	ldi	r18, 0xAB	; 171
    122e:	3a ea       	ldi	r19, 0xAA	; 170
    1230:	4a ea       	ldi	r20, 0xAA	; 170
    1232:	5e e3       	ldi	r21, 0x3E	; 62
    1234:	6d 81       	ldd	r22, Y+5	; 0x05
    1236:	7e 81       	ldd	r23, Y+6	; 0x06
    1238:	8f 81       	ldd	r24, Y+7	; 0x07
    123a:	98 85       	ldd	r25, Y+8	; 0x08
    123c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 8b       	std	Y+23, r24	; 0x17
    1246:	98 8f       	std	Y+24, r25	; 0x18
    1248:	a9 8f       	std	Y+25, r26	; 0x19
    124a:	ba 8f       	std	Y+26, r27	; 0x1a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5e e3       	ldi	r21, 0x3E	; 62
    1254:	6d 81       	ldd	r22, Y+5	; 0x05
    1256:	7e 81       	ldd	r23, Y+6	; 0x06
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8b 8f       	std	Y+27, r24	; 0x1b
    1266:	9c 8f       	std	Y+28, r25	; 0x1c
    1268:	ad 8f       	std	Y+29, r26	; 0x1d
    126a:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	6f 89       	ldd	r22, Y+23	; 0x17
    1276:	78 8d       	ldd	r23, Y+24	; 0x18
    1278:	89 8d       	ldd	r24, Y+25	; 0x19
    127a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    127c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    1280:	88 23       	and	r24, r24
    1282:	1c f4       	brge	.+6      	; 0x128a <LCD_WriteChar+0x3d8>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8f 8f       	std	Y+31, r24	; 0x1f
    1288:	b2 c0       	rjmp	.+356    	; 0x13ee <LCD_WriteChar+0x53c>
	else if (__tmp2 > 65535)
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1294:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1296:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1298:	9e 8d       	ldd	r25, Y+30	; 0x1e
    129a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    129e:	18 16       	cp	r1, r24
    12a0:	0c f0       	brlt	.+2      	; 0x12a4 <LCD_WriteChar+0x3f2>
    12a2:	7b c0       	rjmp	.+246    	; 0x139a <LCD_WriteChar+0x4e8>
	{
		_delay_ms(__us / 1000.0);
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a e7       	ldi	r20, 0x7A	; 122
    12aa:	54 e4       	ldi	r21, 0x44	; 68
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	88 a3       	std	Y+32, r24	; 0x20
    12be:	99 a3       	std	Y+33, r25	; 0x21
    12c0:	aa a3       	std	Y+34, r26	; 0x22
    12c2:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	68 a1       	ldd	r22, Y+32	; 0x20
    12ce:	79 a1       	ldd	r23, Y+33	; 0x21
    12d0:	8a a1       	ldd	r24, Y+34	; 0x22
    12d2:	9b a1       	ldd	r25, Y+35	; 0x23
    12d4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8c a3       	std	Y+36, r24	; 0x24
    12de:	9d a3       	std	Y+37, r25	; 0x25
    12e0:	ae a3       	std	Y+38, r26	; 0x26
    12e2:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	6c a1       	ldd	r22, Y+36	; 0x24
    12ee:	7d a1       	ldd	r23, Y+37	; 0x25
    12f0:	8e a1       	ldd	r24, Y+38	; 0x26
    12f2:	9f a1       	ldd	r25, Y+39	; 0x27
    12f4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <LCD_WriteChar+0x454>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	99 a7       	std	Y+41, r25	; 0x29
    1302:	88 a7       	std	Y+40, r24	; 0x28
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <LCD_WriteChar+0x4d2>
	else if (__tmp > 65535)
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	6c a1       	ldd	r22, Y+36	; 0x24
    1310:	7d a1       	ldd	r23, Y+37	; 0x25
    1312:	8e a1       	ldd	r24, Y+38	; 0x26
    1314:	9f a1       	ldd	r25, Y+39	; 0x27
    1316:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <LCD_WriteChar+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	68 a1       	ldd	r22, Y+32	; 0x20
    1328:	79 a1       	ldd	r23, Y+33	; 0x21
    132a:	8a a1       	ldd	r24, Y+34	; 0x22
    132c:	9b a1       	ldd	r25, Y+35	; 0x23
    132e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	99 a7       	std	Y+41, r25	; 0x29
    1344:	88 a7       	std	Y+40, r24	; 0x28
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <LCD_WriteChar+0x4b4>
    1348:	89 e1       	ldi	r24, 0x19	; 25
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9b a7       	std	Y+43, r25	; 0x2b
    134e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1350:	8a a5       	ldd	r24, Y+42	; 0x2a
    1352:	9b a5       	ldd	r25, Y+43	; 0x2b
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_WriteChar+0x4a2>
    1358:	9b a7       	std	Y+43, r25	; 0x2b
    135a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	88 a5       	ldd	r24, Y+40	; 0x28
    135e:	99 a5       	ldd	r25, Y+41	; 0x29
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	99 a7       	std	Y+41, r25	; 0x29
    1364:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	88 a5       	ldd	r24, Y+40	; 0x28
    1368:	99 a5       	ldd	r25, Y+41	; 0x29
    136a:	89 2b       	or	r24, r25
    136c:	69 f7       	brne	.-38     	; 0x1348 <LCD_WriteChar+0x496>
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <LCD_WriteChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6c a1       	ldd	r22, Y+36	; 0x24
    1372:	7d a1       	ldd	r23, Y+37	; 0x25
    1374:	8e a1       	ldd	r24, Y+38	; 0x26
    1376:	9f a1       	ldd	r25, Y+39	; 0x27
    1378:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	99 a7       	std	Y+41, r25	; 0x29
    1382:	88 a7       	std	Y+40, r24	; 0x28
    1384:	88 a5       	ldd	r24, Y+40	; 0x28
    1386:	99 a5       	ldd	r25, Y+41	; 0x29
    1388:	9d a7       	std	Y+45, r25	; 0x2d
    138a:	8c a7       	std	Y+44, r24	; 0x2c
    138c:	8c a5       	ldd	r24, Y+44	; 0x2c
    138e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_WriteChar+0x4de>
    1394:	9d a7       	std	Y+45, r25	; 0x2d
    1396:	8c a7       	std	Y+44, r24	; 0x2c
    1398:	2a c0       	rjmp	.+84     	; 0x13ee <LCD_WriteChar+0x53c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	53 e4       	ldi	r21, 0x43	; 67
    13a2:	6f 89       	ldd	r22, Y+23	; 0x17
    13a4:	78 8d       	ldd	r23, Y+24	; 0x18
    13a6:	89 8d       	ldd	r24, Y+25	; 0x19
    13a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13aa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	ac f4       	brge	.+42     	; 0x13dc <LCD_WriteChar+0x52a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    13b2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13b4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ba:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9f a7       	std	Y+47, r25	; 0x2f
    13c4:	8e a7       	std	Y+46, r24	; 0x2e
    13c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    13c8:	9f a5       	ldd	r25, Y+47	; 0x2f
    13ca:	99 ab       	std	Y+49, r25	; 0x31
    13cc:	88 ab       	std	Y+48, r24	; 0x30
    13ce:	88 a9       	ldd	r24, Y+48	; 0x30
    13d0:	99 a9       	ldd	r25, Y+49	; 0x31
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_WriteChar+0x520>
    13d6:	99 ab       	std	Y+49, r25	; 0x31
    13d8:	88 ab       	std	Y+48, r24	; 0x30
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <LCD_WriteChar+0x548>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13dc:	6f 89       	ldd	r22, Y+23	; 0x17
    13de:	78 8d       	ldd	r23, Y+24	; 0x18
    13e0:	89 8d       	ldd	r24, Y+25	; 0x19
    13e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13e4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8f 8f       	std	Y+31, r24	; 0x1f
    13ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f0:	8a ab       	std	Y+50, r24	; 0x32
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13f2:	8a a9       	ldd	r24, Y+50	; 0x32
    13f4:	8a 95       	dec	r24
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_WriteChar+0x542>
    13f8:	8a ab       	std	Y+50, r24	; 0x32
    _delay_us(1);
    LCD_PORT &= ~(1<<EN);
    13fa:	88 e3       	ldi	r24, 0x38	; 56
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	28 e3       	ldi	r18, 0x38	; 56
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	20 81       	ld	r18, Z
    1406:	2e 7f       	andi	r18, 0xFE	; 254
    1408:	fc 01       	movw	r30, r24
    140a:	20 83       	st	Z, r18
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e0       	ldi	r26, 0x00	; 0
    1412:	b0 e4       	ldi	r27, 0x40	; 64
    1414:	89 87       	std	Y+9, r24	; 0x09
    1416:	9a 87       	std	Y+10, r25	; 0x0a
    1418:	ab 87       	std	Y+11, r26	; 0x0b
    141a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	53 e4       	ldi	r21, 0x43	; 67
    1424:	69 85       	ldd	r22, Y+9	; 0x09
    1426:	7a 85       	ldd	r23, Y+10	; 0x0a
    1428:	8b 85       	ldd	r24, Y+11	; 0x0b
    142a:	9c 85       	ldd	r25, Y+12	; 0x0c
    142c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	8d 87       	std	Y+13, r24	; 0x0d
    1436:	9e 87       	std	Y+14, r25	; 0x0e
    1438:	af 87       	std	Y+15, r26	; 0x0f
    143a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	6d 85       	ldd	r22, Y+13	; 0x0d
    1446:	7e 85       	ldd	r23, Y+14	; 0x0e
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	98 89       	ldd	r25, Y+16	; 0x10
    144c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    1450:	88 23       	and	r24, r24
    1452:	2c f4       	brge	.+10     	; 0x145e <LCD_WriteChar+0x5ac>
		__ticks = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9a 8b       	std	Y+18, r25	; 0x12
    145a:	89 8b       	std	Y+17, r24	; 0x11
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <LCD_WriteChar+0x62a>
	else if (__tmp > 65535)
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	6d 85       	ldd	r22, Y+13	; 0x0d
    1468:	7e 85       	ldd	r23, Y+14	; 0x0e
    146a:	8f 85       	ldd	r24, Y+15	; 0x0f
    146c:	98 89       	ldd	r25, Y+16	; 0x10
    146e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    1472:	18 16       	cp	r1, r24
    1474:	4c f5       	brge	.+82     	; 0x14c8 <LCD_WriteChar+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	69 85       	ldd	r22, Y+9	; 0x09
    1480:	7a 85       	ldd	r23, Y+10	; 0x0a
    1482:	8b 85       	ldd	r24, Y+11	; 0x0b
    1484:	9c 85       	ldd	r25, Y+12	; 0x0c
    1486:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9a 8b       	std	Y+18, r25	; 0x12
    149c:	89 8b       	std	Y+17, r24	; 0x11
    149e:	0f c0       	rjmp	.+30     	; 0x14be <LCD_WriteChar+0x60c>
    14a0:	89 e1       	ldi	r24, 0x19	; 25
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 8b       	std	Y+20, r25	; 0x14
    14a6:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a8:	8b 89       	ldd	r24, Y+19	; 0x13
    14aa:	9c 89       	ldd	r25, Y+20	; 0x14
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <LCD_WriteChar+0x5fa>
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	9a 89       	ldd	r25, Y+18	; 0x12
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	9a 8b       	std	Y+18, r25	; 0x12
    14bc:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14be:	89 89       	ldd	r24, Y+17	; 0x11
    14c0:	9a 89       	ldd	r25, Y+18	; 0x12
    14c2:	89 2b       	or	r24, r25
    14c4:	69 f7       	brne	.-38     	; 0x14a0 <LCD_WriteChar+0x5ee>
    _delay_ms(2);
}
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <LCD_WriteChar+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    14ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    14cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ce:	98 89       	ldd	r25, Y+16	; 0x10
    14d0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9a 8b       	std	Y+18, r25	; 0x12
    14da:	89 8b       	std	Y+17, r24	; 0x11
    14dc:	89 89       	ldd	r24, Y+17	; 0x11
    14de:	9a 89       	ldd	r25, Y+18	; 0x12
    14e0:	9e 8b       	std	Y+22, r25	; 0x16
    14e2:	8d 8b       	std	Y+21, r24	; 0x15
    14e4:	8d 89       	ldd	r24, Y+21	; 0x15
    14e6:	9e 89       	ldd	r25, Y+22	; 0x16
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <LCD_WriteChar+0x636>
    14ec:	9e 8b       	std	Y+22, r25	; 0x16
    14ee:	8d 8b       	std	Y+21, r24	; 0x15
    14f0:	00 00       	nop
    14f2:	c1 5b       	subi	r28, 0xB1	; 177
    14f4:	df 4f       	sbci	r29, 0xFF	; 255
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <LCD_WriteString>:

void LCD_WriteString(const char* str)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	00 d0       	rcall	.+0      	; 0x1510 <LCD_WriteString+0x6>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    while(*str)
    1518:	0b c0       	rjmp	.+22     	; 0x1530 <LCD_WriteString+0x26>
    {
        LCD_WriteChar(*str++);
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	9c 01       	movw	r18, r24
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	3a 83       	std	Y+2, r19	; 0x02
    1526:	29 83       	std	Y+1, r18	; 0x01
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <LCD_WriteChar>
    _delay_ms(2);
}

void LCD_WriteString(const char* str)
{
    while(*str)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	fc 01       	movw	r30, r24
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	79 f7       	brne	.-34     	; 0x151a <LCD_WriteString+0x10>
    {
        LCD_WriteChar(*str++);
    }
}
    153c:	00 00       	nop
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <LCD_WriteInteger>:

void LCD_WriteInteger(int num)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	62 97       	sbiw	r28, 0x12	; 18
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	89 8b       	std	Y+17, r24	; 0x11
    char buffer[16];
    itoa(num, buffer, 10);
    1560:	89 89       	ldd	r24, Y+17	; 0x11
    1562:	9a 89       	ldd	r25, Y+18	; 0x12
    1564:	4a e0       	ldi	r20, 0x0A	; 10
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	9e 01       	movw	r18, r28
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	b9 01       	movw	r22, r18
    1570:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <itoa>
    LCD_WriteString(buffer);
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_WriteString>
}
    157c:	00 00       	nop
    157e:	62 96       	adiw	r28, 0x12	; 18
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <LCD_CreateCustomChar>:

void LCD_CreateCustomChar(uint8_t location, uint8_t *pattern)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	00 d0       	rcall	.+0      	; 0x1596 <LCD_CreateCustomChar+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <LCD_CreateCustomChar+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8a 83       	std	Y+2, r24	; 0x02
    159e:	7c 83       	std	Y+4, r23	; 0x04
    15a0:	6b 83       	std	Y+3, r22	; 0x03
    location &= 0x07;                 // مسموح 0..7
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	87 70       	andi	r24, 0x07	; 7
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    LCD_Command(0x40 | (location<<3)); // عنوان CGRAM = 0x40 + (loc*8)
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
    for (uint8_t i = 0; i < 8; i++)
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <LCD_CreateCustomChar+0x50>
        LCD_WriteChar(pattern[i]);    // نكتب صفوف الباترن كـ Data
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
    15d6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <LCD_WriteChar>

void LCD_CreateCustomChar(uint8_t location, uint8_t *pattern)
{
    location &= 0x07;                 // مسموح 0..7
    LCD_Command(0x40 | (location<<3)); // عنوان CGRAM = 0x40 + (loc*8)
    for (uint8_t i = 0; i < 8; i++)
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	78 f3       	brcs	.-34     	; 0x15c4 <LCD_CreateCustomChar+0x34>
        LCD_WriteChar(pattern[i]);    // نكتب صفوف الباترن كـ Data
    LCD_Command(0x80);                // رجوع لـ DDRAM
    15e6:	80 e8       	ldi	r24, 0x80	; 128
    15e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
}
    15ec:	00 00       	nop
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <LCD_GoTo>:

void LCD_GoTo(uint8_t row, uint8_t col)
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	00 d0       	rcall	.+0      	; 0x1602 <LCD_GoTo+0x6>
    1602:	1f 92       	push	r1
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	8a 83       	std	Y+2, r24	; 0x02
    160a:	6b 83       	std	Y+3, r22	; 0x03
    // row: 0 أو 1 / col: 0..15
    uint8_t base = (row == 0) ? 0x00 : 0x40;
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	88 23       	and	r24, r24
    1610:	11 f4       	brne	.+4      	; 0x1616 <LCD_GoTo+0x1a>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <LCD_GoTo+0x1c>
    1616:	80 e4       	ldi	r24, 0x40	; 64
    1618:	89 83       	std	Y+1, r24	; 0x01
    LCD_Command(0x80 | (base + col));
    161a:	99 81       	ldd	r25, Y+1	; 0x01
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	89 0f       	add	r24, r25
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Command>
}
    1626:	00 00       	nop
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <show_value>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

static void show_value(uint16_t adc)
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	66 97       	sbiw	r28, 0x16	; 22
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	9e 8b       	std	Y+22, r25	; 0x16
    164a:	8d 8b       	std	Y+21, r24	; 0x15
    /* Map ADC (0..1023) -> LEDs (0..8) */
    uint8_t leds = (uint32_t)adc * 8 / 1023;
    164c:	8d 89       	ldd	r24, Y+21	; 0x15
    164e:	9e 89       	ldd	r25, Y+22	; 0x16
    1650:	cc 01       	movw	r24, r24
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	aa 1f       	adc	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	aa 1f       	adc	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	aa 1f       	adc	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	33 e0       	ldi	r19, 0x03	; 3
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__udivmodsi4>
    167e:	da 01       	movw	r26, r20
    1680:	c9 01       	movw	r24, r18
    1682:	89 83       	std	Y+1, r24	; 0x01
    leds_set_count(leds);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <leds_set_count>

    /* Percentage (0..100) with simple rounding */
    uint16_t pct = (uint32_t)adc * 100 / 1023;
    168a:	8d 89       	ldd	r24, Y+21	; 0x15
    168c:	9e 89       	ldd	r25, Y+22	; 0x16
    168e:	9c 01       	movw	r18, r24
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	84 e6       	ldi	r24, 0x64	; 100
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	dc 01       	movw	r26, r24
    169a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__muluhisi3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	2f ef       	ldi	r18, 0xFF	; 255
    16a4:	33 e0       	ldi	r19, 0x03	; 3
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__udivmodsi4>
    16b2:	da 01       	movw	r26, r20
    16b4:	c9 01       	movw	r24, r18
    16b6:	9b 83       	std	Y+3, r25	; 0x03
    16b8:	8a 83       	std	Y+2, r24	; 0x02

    char line[17];
    LCD_GoTo(0,0);
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <LCD_GoTo>
    snprintf(line, sizeof(line), "ADC:%4u      ", adc);
    16c2:	8e 89       	ldd	r24, Y+22	; 0x16
    16c4:	8f 93       	push	r24
    16c6:	8d 89       	ldd	r24, Y+21	; 0x15
    16c8:	8f 93       	push	r24
    16ca:	80 e6       	ldi	r24, 0x60	; 96
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	89 2f       	mov	r24, r25
    16d0:	8f 93       	push	r24
    16d2:	80 e6       	ldi	r24, 0x60	; 96
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	8f 93       	push	r24
    16d8:	1f 92       	push	r1
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	8f 93       	push	r24
    16de:	ce 01       	movw	r24, r28
    16e0:	04 96       	adiw	r24, 0x04	; 4
    16e2:	29 2f       	mov	r18, r25
    16e4:	2f 93       	push	r18
    16e6:	8f 93       	push	r24
    16e8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <snprintf>
    16ec:	8d b7       	in	r24, 0x3d	; 61
    16ee:	9e b7       	in	r25, 0x3e	; 62
    16f0:	08 96       	adiw	r24, 0x08	; 8
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    LCD_WriteString(line);
    16fc:	ce 01       	movw	r24, r28
    16fe:	04 96       	adiw	r24, 0x04	; 4
    1700:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_WriteString>

    LCD_GoTo(1,0);
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <LCD_GoTo>
    snprintf(line, sizeof(line), "Pct:%3u%%     ", pct);
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	8f 93       	push	r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	8f 93       	push	r24
    1714:	8e e6       	ldi	r24, 0x6E	; 110
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	89 2f       	mov	r24, r25
    171a:	8f 93       	push	r24
    171c:	8e e6       	ldi	r24, 0x6E	; 110
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	8f 93       	push	r24
    1722:	1f 92       	push	r1
    1724:	81 e1       	ldi	r24, 0x11	; 17
    1726:	8f 93       	push	r24
    1728:	ce 01       	movw	r24, r28
    172a:	04 96       	adiw	r24, 0x04	; 4
    172c:	29 2f       	mov	r18, r25
    172e:	2f 93       	push	r18
    1730:	8f 93       	push	r24
    1732:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <snprintf>
    1736:	8d b7       	in	r24, 0x3d	; 61
    1738:	9e b7       	in	r25, 0x3e	; 62
    173a:	08 96       	adiw	r24, 0x08	; 8
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    LCD_WriteString(line);
    1746:	ce 01       	movw	r24, r28
    1748:	04 96       	adiw	r24, 0x04	; 4
    174a:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_WriteString>
}
    174e:	00 00       	nop
    1750:	66 96       	adiw	r28, 0x16	; 22
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <main>:

int main(void)
{
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	6e 97       	sbiw	r28, 0x1e	; 30
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    leds_init();
    1776:	0e 94 a4 00 	call	0x148	; 0x148 <leds_init>
    LCD_Init();
    177a:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_Init>
    adc_init();
    177e:	0e 94 41 00 	call	0x82	; 0x82 <adc_init>

    LCD_GoTo(0,0);
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <LCD_GoTo>
    LCD_WriteString("Analog to LEDs");
    178a:	8d e7       	ldi	r24, 0x7D	; 125
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_WriteString>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a8 ec       	ldi	r26, 0xC8	; 200
    1798:	b2 e4       	ldi	r27, 0x42	; 66
    179a:	8f 83       	std	Y+7, r24	; 0x07
    179c:	98 87       	std	Y+8, r25	; 0x08
    179e:	a9 87       	std	Y+9, r26	; 0x09
    17a0:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a e7       	ldi	r20, 0x7A	; 122
    17a8:	55 e4       	ldi	r21, 0x45	; 69
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8b 87       	std	Y+11, r24	; 0x0b
    17bc:	9c 87       	std	Y+12, r25	; 0x0c
    17be:	ad 87       	std	Y+13, r26	; 0x0d
    17c0:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <main+0x82>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	98 8b       	std	Y+16, r25	; 0x10
    17e0:	8f 87       	std	Y+15, r24	; 0x0f
    17e2:	3f c0       	rjmp	.+126    	; 0x1862 <main+0x100>
	else if (__tmp > 65535)
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	4c f5       	brge	.+82     	; 0x184e <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <main+0xe2>
    1826:	80 e9       	ldi	r24, 0x90	; 144
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	9a 8b       	std	Y+18, r25	; 0x12
    182c:	89 8b       	std	Y+17, r24	; 0x11
    182e:	89 89       	ldd	r24, Y+17	; 0x11
    1830:	9a 89       	ldd	r25, Y+18	; 0x12
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <main+0xd0>
    1836:	9a 8b       	std	Y+18, r25	; 0x12
    1838:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	98 89       	ldd	r25, Y+16	; 0x10
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	98 8b       	std	Y+16, r25	; 0x10
    1842:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1844:	8f 85       	ldd	r24, Y+15	; 0x0f
    1846:	98 89       	ldd	r25, Y+16	; 0x10
    1848:	89 2b       	or	r24, r25
    184a:	69 f7       	brne	.-38     	; 0x1826 <main+0xc4>
    184c:	14 c0       	rjmp	.+40     	; 0x1876 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1850:	7c 85       	ldd	r23, Y+12	; 0x0c
    1852:	8d 85       	ldd	r24, Y+13	; 0x0d
    1854:	9e 85       	ldd	r25, Y+14	; 0x0e
    1856:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	98 8b       	std	Y+16, r25	; 0x10
    1860:	8f 87       	std	Y+15, r24	; 0x0f
    1862:	8f 85       	ldd	r24, Y+15	; 0x0f
    1864:	98 89       	ldd	r25, Y+16	; 0x10
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
    186a:	8b 89       	ldd	r24, Y+19	; 0x13
    186c:	9c 89       	ldd	r25, Y+20	; 0x14
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <main+0x10c>
    1872:	9c 8b       	std	Y+20, r25	; 0x14
    1874:	8b 8b       	std	Y+19, r24	; 0x13
    _delay_ms(100);
    LCD_Clear();
    1876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_Clear>

    while (1)
    {
        uint16_t val = adc_read(ADC_CHANNEL_DEFAULT);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_read>
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
        show_value(val);
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	0e 94 1a 0b 	call	0x1634	; 0x1634 <show_value>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a8 ec       	ldi	r26, 0xC8	; 200
    1892:	b2 e4       	ldi	r27, 0x42	; 66
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	9a 83       	std	Y+2, r25	; 0x02
    1898:	ab 83       	std	Y+3, r26	; 0x03
    189a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a e7       	ldi	r20, 0x7A	; 122
    18a2:	55 e4       	ldi	r21, 0x45	; 69
    18a4:	69 81       	ldd	r22, Y+1	; 0x01
    18a6:	7a 81       	ldd	r23, Y+2	; 0x02
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8d 8b       	std	Y+21, r24	; 0x15
    18b6:	9e 8b       	std	Y+22, r25	; 0x16
    18b8:	af 8b       	std	Y+23, r26	; 0x17
    18ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__cmpsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <main+0x17c>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9a 8f       	std	Y+26, r25	; 0x1a
    18da:	89 8f       	std	Y+25, r24	; 0x19
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <main+0x1fa>
	else if (__tmp > 65535)
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	6d 89       	ldd	r22, Y+21	; 0x15
    18e8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
    18ec:	98 8d       	ldd	r25, Y+24	; 0x18
    18ee:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__gesf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	69 81       	ldd	r22, Y+1	; 0x01
    1900:	7a 81       	ldd	r23, Y+2	; 0x02
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9a 8f       	std	Y+26, r25	; 0x1a
    191c:	89 8f       	std	Y+25, r24	; 0x19
    191e:	0f c0       	rjmp	.+30     	; 0x193e <main+0x1dc>
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	9c 8f       	std	Y+28, r25	; 0x1c
    1926:	8b 8f       	std	Y+27, r24	; 0x1b
    1928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <main+0x1ca>
    1930:	9c 8f       	std	Y+28, r25	; 0x1c
    1932:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	89 8d       	ldd	r24, Y+25	; 0x19
    1936:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9a 8f       	std	Y+26, r25	; 0x1a
    193c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	89 8d       	ldd	r24, Y+25	; 0x19
    1940:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1942:	89 2b       	or	r24, r25
    1944:	69 f7       	brne	.-38     	; 0x1920 <main+0x1be>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9a 8f       	std	Y+26, r25	; 0x1a
    195a:	89 8f       	std	Y+25, r24	; 0x19
    195c:	89 8d       	ldd	r24, Y+25	; 0x19
    195e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1960:	9e 8f       	std	Y+30, r25	; 0x1e
    1962:	8d 8f       	std	Y+29, r24	; 0x1d
    1964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <main+0x206>
    196c:	9e 8f       	std	Y+30, r25	; 0x1e
    196e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(100);
    }
    1970:	84 cf       	rjmp	.-248    	; 0x187a <main+0x118>

00001972 <__udivmodsi4>:
    1972:	a1 e2       	ldi	r26, 0x21	; 33
    1974:	1a 2e       	mov	r1, r26
    1976:	aa 1b       	sub	r26, r26
    1978:	bb 1b       	sub	r27, r27
    197a:	fd 01       	movw	r30, r26
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <__udivmodsi4_ep>

0000197e <__udivmodsi4_loop>:
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	ee 1f       	adc	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	a2 17       	cp	r26, r18
    1988:	b3 07       	cpc	r27, r19
    198a:	e4 07       	cpc	r30, r20
    198c:	f5 07       	cpc	r31, r21
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__udivmodsi4_ep>
    1990:	a2 1b       	sub	r26, r18
    1992:	b3 0b       	sbc	r27, r19
    1994:	e4 0b       	sbc	r30, r20
    1996:	f5 0b       	sbc	r31, r21

00001998 <__udivmodsi4_ep>:
    1998:	66 1f       	adc	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	1a 94       	dec	r1
    19a2:	69 f7       	brne	.-38     	; 0x197e <__udivmodsi4_loop>
    19a4:	60 95       	com	r22
    19a6:	70 95       	com	r23
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
    19b0:	bd 01       	movw	r22, r26
    19b2:	cf 01       	movw	r24, r30
    19b4:	08 95       	ret

000019b6 <__muluhisi3>:
    19b6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__umulhisi3>
    19ba:	a5 9f       	mul	r26, r21
    19bc:	90 0d       	add	r25, r0
    19be:	b4 9f       	mul	r27, r20
    19c0:	90 0d       	add	r25, r0
    19c2:	a4 9f       	mul	r26, r20
    19c4:	80 0d       	add	r24, r0
    19c6:	91 1d       	adc	r25, r1
    19c8:	11 24       	eor	r1, r1
    19ca:	08 95       	ret

000019cc <__umulhisi3>:
    19cc:	a2 9f       	mul	r26, r18
    19ce:	b0 01       	movw	r22, r0
    19d0:	b3 9f       	mul	r27, r19
    19d2:	c0 01       	movw	r24, r0
    19d4:	a3 9f       	mul	r26, r19
    19d6:	70 0d       	add	r23, r0
    19d8:	81 1d       	adc	r24, r1
    19da:	11 24       	eor	r1, r1
    19dc:	91 1d       	adc	r25, r1
    19de:	b2 9f       	mul	r27, r18
    19e0:	70 0d       	add	r23, r0
    19e2:	81 1d       	adc	r24, r1
    19e4:	11 24       	eor	r1, r1
    19e6:	91 1d       	adc	r25, r1
    19e8:	08 95       	ret

000019ea <__cmpsf2>:
    19ea:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_cmp>
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <__cmpsf2+0x8>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	08 95       	ret

000019f4 <__divsf3>:
    19f4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__divsf3x>
    19f8:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>
    19fc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fp_pscB>
    1a00:	58 f0       	brcs	.+22     	; 0x1a18 <__divsf3+0x24>
    1a02:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_pscA>
    1a06:	40 f0       	brcs	.+16     	; 0x1a18 <__divsf3+0x24>
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <__divsf3+0x20>
    1a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <__divsf3+0x24>
    1a0e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1a12:	51 11       	cpse	r21, r1
    1a14:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1a18:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>

00001a1c <__divsf3x>:
    1a1c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_split3>
    1a20:	68 f3       	brcs	.-38     	; 0x19fc <__divsf3+0x8>

00001a22 <__divsf3_pse>:
    1a22:	99 23       	and	r25, r25
    1a24:	b1 f3       	breq	.-20     	; 0x1a12 <__divsf3+0x1e>
    1a26:	55 23       	and	r21, r21
    1a28:	91 f3       	breq	.-28     	; 0x1a0e <__divsf3+0x1a>
    1a2a:	95 1b       	sub	r25, r21
    1a2c:	55 0b       	sbc	r21, r21
    1a2e:	bb 27       	eor	r27, r27
    1a30:	aa 27       	eor	r26, r26
    1a32:	62 17       	cp	r22, r18
    1a34:	73 07       	cpc	r23, r19
    1a36:	84 07       	cpc	r24, r20
    1a38:	38 f0       	brcs	.+14     	; 0x1a48 <__divsf3_pse+0x26>
    1a3a:	9f 5f       	subi	r25, 0xFF	; 255
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	44 1f       	adc	r20, r20
    1a44:	aa 1f       	adc	r26, r26
    1a46:	a9 f3       	breq	.-22     	; 0x1a32 <__divsf3_pse+0x10>
    1a48:	35 d0       	rcall	.+106    	; 0x1ab4 <__divsf3_pse+0x92>
    1a4a:	0e 2e       	mov	r0, r30
    1a4c:	3a f0       	brmi	.+14     	; 0x1a5c <__divsf3_pse+0x3a>
    1a4e:	e0 e8       	ldi	r30, 0x80	; 128
    1a50:	32 d0       	rcall	.+100    	; 0x1ab6 <__divsf3_pse+0x94>
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	e6 95       	lsr	r30
    1a58:	00 1c       	adc	r0, r0
    1a5a:	ca f7       	brpl	.-14     	; 0x1a4e <__divsf3_pse+0x2c>
    1a5c:	2b d0       	rcall	.+86     	; 0x1ab4 <__divsf3_pse+0x92>
    1a5e:	fe 2f       	mov	r31, r30
    1a60:	29 d0       	rcall	.+82     	; 0x1ab4 <__divsf3_pse+0x92>
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	26 17       	cp	r18, r22
    1a6c:	37 07       	cpc	r19, r23
    1a6e:	48 07       	cpc	r20, r24
    1a70:	ab 07       	cpc	r26, r27
    1a72:	b0 e8       	ldi	r27, 0x80	; 128
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <__divsf3_pse+0x56>
    1a76:	bb 0b       	sbc	r27, r27
    1a78:	80 2d       	mov	r24, r0
    1a7a:	bf 01       	movw	r22, r30
    1a7c:	ff 27       	eor	r31, r31
    1a7e:	93 58       	subi	r25, 0x83	; 131
    1a80:	5f 4f       	sbci	r21, 0xFF	; 255
    1a82:	3a f0       	brmi	.+14     	; 0x1a92 <__divsf3_pse+0x70>
    1a84:	9e 3f       	cpi	r25, 0xFE	; 254
    1a86:	51 05       	cpc	r21, r1
    1a88:	78 f0       	brcs	.+30     	; 0x1aa8 <__divsf3_pse+0x86>
    1a8a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1a8e:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	e4 f3       	brlt	.-8      	; 0x1a8e <__divsf3_pse+0x6c>
    1a96:	98 3e       	cpi	r25, 0xE8	; 232
    1a98:	d4 f3       	brlt	.-12     	; 0x1a8e <__divsf3_pse+0x6c>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	f7 95       	ror	r31
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	c9 f7       	brne	.-14     	; 0x1a9a <__divsf3_pse+0x78>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	91 1d       	adc	r25, r1
    1aac:	96 95       	lsr	r25
    1aae:	87 95       	ror	r24
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret
    1ab4:	e1 e0       	ldi	r30, 0x01	; 1
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	bb 1f       	adc	r27, r27
    1abe:	62 17       	cp	r22, r18
    1ac0:	73 07       	cpc	r23, r19
    1ac2:	84 07       	cpc	r24, r20
    1ac4:	ba 07       	cpc	r27, r26
    1ac6:	20 f0       	brcs	.+8      	; 0x1ad0 <__divsf3_pse+0xae>
    1ac8:	62 1b       	sub	r22, r18
    1aca:	73 0b       	sbc	r23, r19
    1acc:	84 0b       	sbc	r24, r20
    1ace:	ba 0b       	sbc	r27, r26
    1ad0:	ee 1f       	adc	r30, r30
    1ad2:	88 f7       	brcc	.-30     	; 0x1ab6 <__divsf3_pse+0x94>
    1ad4:	e0 95       	com	r30
    1ad6:	08 95       	ret

00001ad8 <__fixunssfsi>:
    1ad8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_splitA>
    1adc:	88 f0       	brcs	.+34     	; 0x1b00 <__fixunssfsi+0x28>
    1ade:	9f 57       	subi	r25, 0x7F	; 127
    1ae0:	98 f0       	brcs	.+38     	; 0x1b08 <__fixunssfsi+0x30>
    1ae2:	b9 2f       	mov	r27, r25
    1ae4:	99 27       	eor	r25, r25
    1ae6:	b7 51       	subi	r27, 0x17	; 23
    1ae8:	b0 f0       	brcs	.+44     	; 0x1b16 <__fixunssfsi+0x3e>
    1aea:	e1 f0       	breq	.+56     	; 0x1b24 <__fixunssfsi+0x4c>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	1a f0       	brmi	.+6      	; 0x1afc <__fixunssfsi+0x24>
    1af6:	ba 95       	dec	r27
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__fixunssfsi+0x14>
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <__fixunssfsi+0x4c>
    1afc:	b1 30       	cpi	r27, 0x01	; 1
    1afe:	91 f0       	breq	.+36     	; 0x1b24 <__fixunssfsi+0x4c>
    1b00:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__fp_zero>
    1b04:	b1 e0       	ldi	r27, 0x01	; 1
    1b06:	08 95       	ret
    1b08:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_zero>
    1b0c:	67 2f       	mov	r22, r23
    1b0e:	78 2f       	mov	r23, r24
    1b10:	88 27       	eor	r24, r24
    1b12:	b8 5f       	subi	r27, 0xF8	; 248
    1b14:	39 f0       	breq	.+14     	; 0x1b24 <__fixunssfsi+0x4c>
    1b16:	b9 3f       	cpi	r27, 0xF9	; 249
    1b18:	cc f3       	brlt	.-14     	; 0x1b0c <__fixunssfsi+0x34>
    1b1a:	86 95       	lsr	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	b3 95       	inc	r27
    1b22:	d9 f7       	brne	.-10     	; 0x1b1a <__fixunssfsi+0x42>
    1b24:	3e f4       	brtc	.+14     	; 0x1b34 <__fixunssfsi+0x5c>
    1b26:	90 95       	com	r25
    1b28:	80 95       	com	r24
    1b2a:	70 95       	com	r23
    1b2c:	61 95       	neg	r22
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	08 95       	ret

00001b36 <__fp_cmp>:
    1b36:	99 0f       	add	r25, r25
    1b38:	00 08       	sbc	r0, r0
    1b3a:	55 0f       	add	r21, r21
    1b3c:	aa 0b       	sbc	r26, r26
    1b3e:	e0 e8       	ldi	r30, 0x80	; 128
    1b40:	fe ef       	ldi	r31, 0xFE	; 254
    1b42:	16 16       	cp	r1, r22
    1b44:	17 06       	cpc	r1, r23
    1b46:	e8 07       	cpc	r30, r24
    1b48:	f9 07       	cpc	r31, r25
    1b4a:	c0 f0       	brcs	.+48     	; 0x1b7c <__fp_cmp+0x46>
    1b4c:	12 16       	cp	r1, r18
    1b4e:	13 06       	cpc	r1, r19
    1b50:	e4 07       	cpc	r30, r20
    1b52:	f5 07       	cpc	r31, r21
    1b54:	98 f0       	brcs	.+38     	; 0x1b7c <__fp_cmp+0x46>
    1b56:	62 1b       	sub	r22, r18
    1b58:	73 0b       	sbc	r23, r19
    1b5a:	84 0b       	sbc	r24, r20
    1b5c:	95 0b       	sbc	r25, r21
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <__fp_cmp+0x38>
    1b60:	0a 26       	eor	r0, r26
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <__fp_cmp+0x46>
    1b64:	23 2b       	or	r18, r19
    1b66:	24 2b       	or	r18, r20
    1b68:	25 2b       	or	r18, r21
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <__fp_cmp+0x3e>
    1b6c:	08 95       	ret
    1b6e:	0a 26       	eor	r0, r26
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <__fp_cmp+0x3e>
    1b72:	a1 40       	sbci	r26, 0x01	; 1
    1b74:	a6 95       	lsr	r26
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	81 1d       	adc	r24, r1
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	08 95       	ret

00001b7e <__fp_inf>:
    1b7e:	97 f9       	bld	r25, 7
    1b80:	9f 67       	ori	r25, 0x7F	; 127
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	08 95       	ret

00001b8a <__fp_nan>:
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	80 ec       	ldi	r24, 0xC0	; 192
    1b8e:	08 95       	ret

00001b90 <__fp_pscA>:
    1b90:	00 24       	eor	r0, r0
    1b92:	0a 94       	dec	r0
    1b94:	16 16       	cp	r1, r22
    1b96:	17 06       	cpc	r1, r23
    1b98:	18 06       	cpc	r1, r24
    1b9a:	09 06       	cpc	r0, r25
    1b9c:	08 95       	ret

00001b9e <__fp_pscB>:
    1b9e:	00 24       	eor	r0, r0
    1ba0:	0a 94       	dec	r0
    1ba2:	12 16       	cp	r1, r18
    1ba4:	13 06       	cpc	r1, r19
    1ba6:	14 06       	cpc	r1, r20
    1ba8:	05 06       	cpc	r0, r21
    1baa:	08 95       	ret

00001bac <__fp_round>:
    1bac:	09 2e       	mov	r0, r25
    1bae:	03 94       	inc	r0
    1bb0:	00 0c       	add	r0, r0
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <__fp_round+0xc>
    1bb4:	88 23       	and	r24, r24
    1bb6:	52 f0       	brmi	.+20     	; 0x1bcc <__fp_round+0x20>
    1bb8:	bb 0f       	add	r27, r27
    1bba:	40 f4       	brcc	.+16     	; 0x1bcc <__fp_round+0x20>
    1bbc:	bf 2b       	or	r27, r31
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <__fp_round+0x18>
    1bc0:	60 ff       	sbrs	r22, 0
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <__fp_round+0x20>
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	08 95       	ret

00001bce <__fp_split3>:
    1bce:	57 fd       	sbrc	r21, 7
    1bd0:	90 58       	subi	r25, 0x80	; 128
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	59 f0       	breq	.+22     	; 0x1bee <__fp_splitA+0x10>
    1bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <__fp_splitA+0x1a>
    1bdc:	47 95       	ror	r20

00001bde <__fp_splitA>:
    1bde:	88 0f       	add	r24, r24
    1be0:	97 fb       	bst	r25, 7
    1be2:	99 1f       	adc	r25, r25
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <__fp_splitA+0x20>
    1be6:	9f 3f       	cpi	r25, 0xFF	; 255
    1be8:	79 f0       	breq	.+30     	; 0x1c08 <__fp_splitA+0x2a>
    1bea:	87 95       	ror	r24
    1bec:	08 95       	ret
    1bee:	12 16       	cp	r1, r18
    1bf0:	13 06       	cpc	r1, r19
    1bf2:	14 06       	cpc	r1, r20
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	f2 cf       	rjmp	.-28     	; 0x1bdc <__fp_split3+0xe>
    1bf8:	46 95       	lsr	r20
    1bfa:	f1 df       	rcall	.-30     	; 0x1bde <__fp_splitA>
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <__fp_splitA+0x30>
    1bfe:	16 16       	cp	r1, r22
    1c00:	17 06       	cpc	r1, r23
    1c02:	18 06       	cpc	r1, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	f1 cf       	rjmp	.-30     	; 0x1bea <__fp_splitA+0xc>
    1c08:	86 95       	lsr	r24
    1c0a:	71 05       	cpc	r23, r1
    1c0c:	61 05       	cpc	r22, r1
    1c0e:	08 94       	sec
    1c10:	08 95       	ret

00001c12 <__fp_zero>:
    1c12:	e8 94       	clt

00001c14 <__fp_szero>:
    1c14:	bb 27       	eor	r27, r27
    1c16:	66 27       	eor	r22, r22
    1c18:	77 27       	eor	r23, r23
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <__gesf2>:
    1c20:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_cmp>
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <__gesf2+0x8>
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	08 95       	ret

00001c2a <__mulsf3>:
    1c2a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__mulsf3x>
    1c2e:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>
    1c32:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_pscA>
    1c36:	38 f0       	brcs	.+14     	; 0x1c46 <__mulsf3+0x1c>
    1c38:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fp_pscB>
    1c3c:	20 f0       	brcs	.+8      	; 0x1c46 <__mulsf3+0x1c>
    1c3e:	95 23       	and	r25, r21
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <__mulsf3+0x1c>
    1c42:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1c46:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>
    1c4a:	11 24       	eor	r1, r1
    1c4c:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>

00001c50 <__mulsf3x>:
    1c50:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_split3>
    1c54:	70 f3       	brcs	.-36     	; 0x1c32 <__mulsf3+0x8>

00001c56 <__mulsf3_pse>:
    1c56:	95 9f       	mul	r25, r21
    1c58:	c1 f3       	breq	.-16     	; 0x1c4a <__mulsf3+0x20>
    1c5a:	95 0f       	add	r25, r21
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	55 1f       	adc	r21, r21
    1c60:	62 9f       	mul	r22, r18
    1c62:	f0 01       	movw	r30, r0
    1c64:	72 9f       	mul	r23, r18
    1c66:	bb 27       	eor	r27, r27
    1c68:	f0 0d       	add	r31, r0
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	63 9f       	mul	r22, r19
    1c6e:	aa 27       	eor	r26, r26
    1c70:	f0 0d       	add	r31, r0
    1c72:	b1 1d       	adc	r27, r1
    1c74:	aa 1f       	adc	r26, r26
    1c76:	64 9f       	mul	r22, r20
    1c78:	66 27       	eor	r22, r22
    1c7a:	b0 0d       	add	r27, r0
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	66 1f       	adc	r22, r22
    1c80:	82 9f       	mul	r24, r18
    1c82:	22 27       	eor	r18, r18
    1c84:	b0 0d       	add	r27, r0
    1c86:	a1 1d       	adc	r26, r1
    1c88:	62 1f       	adc	r22, r18
    1c8a:	73 9f       	mul	r23, r19
    1c8c:	b0 0d       	add	r27, r0
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	62 1f       	adc	r22, r18
    1c92:	83 9f       	mul	r24, r19
    1c94:	a0 0d       	add	r26, r0
    1c96:	61 1d       	adc	r22, r1
    1c98:	22 1f       	adc	r18, r18
    1c9a:	74 9f       	mul	r23, r20
    1c9c:	33 27       	eor	r19, r19
    1c9e:	a0 0d       	add	r26, r0
    1ca0:	61 1d       	adc	r22, r1
    1ca2:	23 1f       	adc	r18, r19
    1ca4:	84 9f       	mul	r24, r20
    1ca6:	60 0d       	add	r22, r0
    1ca8:	21 1d       	adc	r18, r1
    1caa:	82 2f       	mov	r24, r18
    1cac:	76 2f       	mov	r23, r22
    1cae:	6a 2f       	mov	r22, r26
    1cb0:	11 24       	eor	r1, r1
    1cb2:	9f 57       	subi	r25, 0x7F	; 127
    1cb4:	50 40       	sbci	r21, 0x00	; 0
    1cb6:	9a f0       	brmi	.+38     	; 0x1cde <__mulsf3_pse+0x88>
    1cb8:	f1 f0       	breq	.+60     	; 0x1cf6 <__mulsf3_pse+0xa0>
    1cba:	88 23       	and	r24, r24
    1cbc:	4a f0       	brmi	.+18     	; 0x1cd0 <__mulsf3_pse+0x7a>
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	91 50       	subi	r25, 0x01	; 1
    1ccc:	50 40       	sbci	r21, 0x00	; 0
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__mulsf3_pse+0x64>
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	80 f0       	brcs	.+32     	; 0x1cf6 <__mulsf3_pse+0xa0>
    1cd6:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1cda:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	e4 f3       	brlt	.-8      	; 0x1cda <__mulsf3_pse+0x84>
    1ce2:	98 3e       	cpi	r25, 0xE8	; 232
    1ce4:	d4 f3       	brlt	.-12     	; 0x1cda <__mulsf3_pse+0x84>
    1ce6:	86 95       	lsr	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	b7 95       	ror	r27
    1cee:	f7 95       	ror	r31
    1cf0:	e7 95       	ror	r30
    1cf2:	9f 5f       	subi	r25, 0xFF	; 255
    1cf4:	c1 f7       	brne	.-16     	; 0x1ce6 <__mulsf3_pse+0x90>
    1cf6:	fe 2b       	or	r31, r30
    1cf8:	88 0f       	add	r24, r24
    1cfa:	91 1d       	adc	r25, r1
    1cfc:	96 95       	lsr	r25
    1cfe:	87 95       	ror	r24
    1d00:	97 f9       	bld	r25, 7
    1d02:	08 95       	ret

00001d04 <itoa>:
    1d04:	45 32       	cpi	r20, 0x25	; 37
    1d06:	51 05       	cpc	r21, r1
    1d08:	20 f4       	brcc	.+8      	; 0x1d12 <itoa+0xe>
    1d0a:	42 30       	cpi	r20, 0x02	; 2
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <itoa+0xe>
    1d0e:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__itoa_ncheck>
    1d12:	fb 01       	movw	r30, r22
    1d14:	10 82       	st	Z, r1
    1d16:	cb 01       	movw	r24, r22
    1d18:	08 95       	ret

00001d1a <__itoa_ncheck>:
    1d1a:	bb 27       	eor	r27, r27
    1d1c:	4a 30       	cpi	r20, 0x0A	; 10
    1d1e:	31 f4       	brne	.+12     	; 0x1d2c <__itoa_ncheck+0x12>
    1d20:	99 23       	and	r25, r25
    1d22:	22 f4       	brpl	.+8      	; 0x1d2c <__itoa_ncheck+0x12>
    1d24:	bd e2       	ldi	r27, 0x2D	; 45
    1d26:	90 95       	com	r25
    1d28:	81 95       	neg	r24
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__utoa_common>

00001d30 <__utoa_ncheck>:
    1d30:	bb 27       	eor	r27, r27

00001d32 <__utoa_common>:
    1d32:	fb 01       	movw	r30, r22
    1d34:	55 27       	eor	r21, r21
    1d36:	aa 27       	eor	r26, r26
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	aa 1f       	adc	r26, r26
    1d3e:	a4 17       	cp	r26, r20
    1d40:	10 f0       	brcs	.+4      	; 0x1d46 <__utoa_common+0x14>
    1d42:	a4 1b       	sub	r26, r20
    1d44:	83 95       	inc	r24
    1d46:	50 51       	subi	r21, 0x10	; 16
    1d48:	b9 f7       	brne	.-18     	; 0x1d38 <__utoa_common+0x6>
    1d4a:	a0 5d       	subi	r26, 0xD0	; 208
    1d4c:	aa 33       	cpi	r26, 0x3A	; 58
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <__utoa_common+0x20>
    1d50:	a9 5d       	subi	r26, 0xD9	; 217
    1d52:	a1 93       	st	Z+, r26
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	79 f7       	brne	.-34     	; 0x1d36 <__utoa_common+0x4>
    1d58:	b1 11       	cpse	r27, r1
    1d5a:	b1 93       	st	Z+, r27
    1d5c:	11 92       	st	Z+, r1
    1d5e:	cb 01       	movw	r24, r22
    1d60:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <strrev>

00001d64 <snprintf>:
    1d64:	ae e0       	ldi	r26, 0x0E	; 14
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 eb       	ldi	r30, 0xB8	; 184
    1d6a:	fe e0       	ldi	r31, 0x0E	; 14
    1d6c:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x1c>
    1d70:	0d 89       	ldd	r16, Y+21	; 0x15
    1d72:	1e 89       	ldd	r17, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	26 e0       	ldi	r18, 0x06	; 6
    1d7a:	2c 83       	std	Y+4, r18	; 0x04
    1d7c:	1a 83       	std	Y+2, r17	; 0x02
    1d7e:	09 83       	std	Y+1, r16	; 0x01
    1d80:	97 ff       	sbrs	r25, 7
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <snprintf+0x24>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e8       	ldi	r25, 0x80	; 128
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	ae 01       	movw	r20, r28
    1d90:	45 5e       	subi	r20, 0xE5	; 229
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	69 8d       	ldd	r22, Y+25	; 0x19
    1d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d98:	ce 01       	movw	r24, r28
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <vfprintf>
    1da0:	4d 81       	ldd	r20, Y+5	; 0x05
    1da2:	5e 81       	ldd	r21, Y+6	; 0x06
    1da4:	57 fd       	sbrc	r21, 7
    1da6:	0a c0       	rjmp	.+20     	; 0x1dbc <snprintf+0x58>
    1da8:	2f 81       	ldd	r18, Y+7	; 0x07
    1daa:	38 85       	ldd	r19, Y+8	; 0x08
    1dac:	42 17       	cp	r20, r18
    1dae:	53 07       	cpc	r21, r19
    1db0:	0c f4       	brge	.+2      	; 0x1db4 <snprintf+0x50>
    1db2:	9a 01       	movw	r18, r20
    1db4:	f8 01       	movw	r30, r16
    1db6:	e2 0f       	add	r30, r18
    1db8:	f3 1f       	adc	r31, r19
    1dba:	10 82       	st	Z, r1
    1dbc:	2e 96       	adiw	r28, 0x0e	; 14
    1dbe:	e4 e0       	ldi	r30, 0x04	; 4
    1dc0:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x1c>

00001dc4 <vfprintf>:
    1dc4:	ab e0       	ldi	r26, 0x0B	; 11
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1dca:	fe e0       	ldi	r31, 0x0E	; 14
    1dcc:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__prologue_saves__>
    1dd0:	6c 01       	movw	r12, r24
    1dd2:	7b 01       	movw	r14, r22
    1dd4:	8a 01       	movw	r16, r20
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	17 82       	std	Z+7, r1	; 0x07
    1dda:	16 82       	std	Z+6, r1	; 0x06
    1ddc:	83 81       	ldd	r24, Z+3	; 0x03
    1dde:	81 ff       	sbrs	r24, 1
    1de0:	cc c1       	rjmp	.+920    	; 0x217a <vfprintf+0x3b6>
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	3c 01       	movw	r6, r24
    1de8:	f6 01       	movw	r30, r12
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	f7 01       	movw	r30, r14
    1dee:	93 fd       	sbrc	r25, 3
    1df0:	85 91       	lpm	r24, Z+
    1df2:	93 ff       	sbrs	r25, 3
    1df4:	81 91       	ld	r24, Z+
    1df6:	7f 01       	movw	r14, r30
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <vfprintf+0x3a>
    1dfc:	ba c1       	rjmp	.+884    	; 0x2172 <vfprintf+0x3ae>
    1dfe:	85 32       	cpi	r24, 0x25	; 37
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <vfprintf+0x4c>
    1e02:	93 fd       	sbrc	r25, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	93 ff       	sbrs	r25, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	7f 01       	movw	r14, r30
    1e0c:	85 32       	cpi	r24, 0x25	; 37
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <vfprintf+0x56>
    1e10:	b6 01       	movw	r22, r12
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    1e18:	e7 cf       	rjmp	.-50     	; 0x1de8 <vfprintf+0x24>
    1e1a:	91 2c       	mov	r9, r1
    1e1c:	21 2c       	mov	r2, r1
    1e1e:	31 2c       	mov	r3, r1
    1e20:	ff e1       	ldi	r31, 0x1F	; 31
    1e22:	f3 15       	cp	r31, r3
    1e24:	d8 f0       	brcs	.+54     	; 0x1e5c <vfprintf+0x98>
    1e26:	8b 32       	cpi	r24, 0x2B	; 43
    1e28:	79 f0       	breq	.+30     	; 0x1e48 <vfprintf+0x84>
    1e2a:	38 f4       	brcc	.+14     	; 0x1e3a <vfprintf+0x76>
    1e2c:	80 32       	cpi	r24, 0x20	; 32
    1e2e:	79 f0       	breq	.+30     	; 0x1e4e <vfprintf+0x8a>
    1e30:	83 32       	cpi	r24, 0x23	; 35
    1e32:	a1 f4       	brne	.+40     	; 0x1e5c <vfprintf+0x98>
    1e34:	23 2d       	mov	r18, r3
    1e36:	20 61       	ori	r18, 0x10	; 16
    1e38:	1d c0       	rjmp	.+58     	; 0x1e74 <vfprintf+0xb0>
    1e3a:	8d 32       	cpi	r24, 0x2D	; 45
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <vfprintf+0x92>
    1e3e:	80 33       	cpi	r24, 0x30	; 48
    1e40:	69 f4       	brne	.+26     	; 0x1e5c <vfprintf+0x98>
    1e42:	23 2d       	mov	r18, r3
    1e44:	21 60       	ori	r18, 0x01	; 1
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <vfprintf+0xb0>
    1e48:	83 2d       	mov	r24, r3
    1e4a:	82 60       	ori	r24, 0x02	; 2
    1e4c:	38 2e       	mov	r3, r24
    1e4e:	e3 2d       	mov	r30, r3
    1e50:	e4 60       	ori	r30, 0x04	; 4
    1e52:	3e 2e       	mov	r3, r30
    1e54:	2a c0       	rjmp	.+84     	; 0x1eaa <vfprintf+0xe6>
    1e56:	f3 2d       	mov	r31, r3
    1e58:	f8 60       	ori	r31, 0x08	; 8
    1e5a:	1d c0       	rjmp	.+58     	; 0x1e96 <vfprintf+0xd2>
    1e5c:	37 fc       	sbrc	r3, 7
    1e5e:	2d c0       	rjmp	.+90     	; 0x1eba <vfprintf+0xf6>
    1e60:	20 ed       	ldi	r18, 0xD0	; 208
    1e62:	28 0f       	add	r18, r24
    1e64:	2a 30       	cpi	r18, 0x0A	; 10
    1e66:	40 f0       	brcs	.+16     	; 0x1e78 <vfprintf+0xb4>
    1e68:	8e 32       	cpi	r24, 0x2E	; 46
    1e6a:	b9 f4       	brne	.+46     	; 0x1e9a <vfprintf+0xd6>
    1e6c:	36 fc       	sbrc	r3, 6
    1e6e:	81 c1       	rjmp	.+770    	; 0x2172 <vfprintf+0x3ae>
    1e70:	23 2d       	mov	r18, r3
    1e72:	20 64       	ori	r18, 0x40	; 64
    1e74:	32 2e       	mov	r3, r18
    1e76:	19 c0       	rjmp	.+50     	; 0x1eaa <vfprintf+0xe6>
    1e78:	36 fe       	sbrs	r3, 6
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <vfprintf+0xc4>
    1e7c:	8a e0       	ldi	r24, 0x0A	; 10
    1e7e:	98 9e       	mul	r9, r24
    1e80:	20 0d       	add	r18, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	92 2e       	mov	r9, r18
    1e86:	11 c0       	rjmp	.+34     	; 0x1eaa <vfprintf+0xe6>
    1e88:	ea e0       	ldi	r30, 0x0A	; 10
    1e8a:	2e 9e       	mul	r2, r30
    1e8c:	20 0d       	add	r18, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	22 2e       	mov	r2, r18
    1e92:	f3 2d       	mov	r31, r3
    1e94:	f0 62       	ori	r31, 0x20	; 32
    1e96:	3f 2e       	mov	r3, r31
    1e98:	08 c0       	rjmp	.+16     	; 0x1eaa <vfprintf+0xe6>
    1e9a:	8c 36       	cpi	r24, 0x6C	; 108
    1e9c:	21 f4       	brne	.+8      	; 0x1ea6 <vfprintf+0xe2>
    1e9e:	83 2d       	mov	r24, r3
    1ea0:	80 68       	ori	r24, 0x80	; 128
    1ea2:	38 2e       	mov	r3, r24
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0xe6>
    1ea6:	88 36       	cpi	r24, 0x68	; 104
    1ea8:	41 f4       	brne	.+16     	; 0x1eba <vfprintf+0xf6>
    1eaa:	f7 01       	movw	r30, r14
    1eac:	93 fd       	sbrc	r25, 3
    1eae:	85 91       	lpm	r24, Z+
    1eb0:	93 ff       	sbrs	r25, 3
    1eb2:	81 91       	ld	r24, Z+
    1eb4:	7f 01       	movw	r14, r30
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	b3 cf       	rjmp	.-154    	; 0x1e20 <vfprintf+0x5c>
    1eba:	98 2f       	mov	r25, r24
    1ebc:	9f 7d       	andi	r25, 0xDF	; 223
    1ebe:	95 54       	subi	r25, 0x45	; 69
    1ec0:	93 30       	cpi	r25, 0x03	; 3
    1ec2:	28 f4       	brcc	.+10     	; 0x1ece <vfprintf+0x10a>
    1ec4:	0c 5f       	subi	r16, 0xFC	; 252
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	9f e3       	ldi	r25, 0x3F	; 63
    1eca:	99 83       	std	Y+1, r25	; 0x01
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <vfprintf+0x124>
    1ece:	83 36       	cpi	r24, 0x63	; 99
    1ed0:	31 f0       	breq	.+12     	; 0x1ede <vfprintf+0x11a>
    1ed2:	83 37       	cpi	r24, 0x73	; 115
    1ed4:	71 f0       	breq	.+28     	; 0x1ef2 <vfprintf+0x12e>
    1ed6:	83 35       	cpi	r24, 0x53	; 83
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <vfprintf+0x118>
    1eda:	59 c0       	rjmp	.+178    	; 0x1f8e <vfprintf+0x1ca>
    1edc:	21 c0       	rjmp	.+66     	; 0x1f20 <vfprintf+0x15c>
    1ede:	f8 01       	movw	r30, r16
    1ee0:	80 81       	ld	r24, Z
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	0e 5f       	subi	r16, 0xFE	; 254
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	88 24       	eor	r8, r8
    1eea:	83 94       	inc	r8
    1eec:	91 2c       	mov	r9, r1
    1eee:	53 01       	movw	r10, r6
    1ef0:	13 c0       	rjmp	.+38     	; 0x1f18 <vfprintf+0x154>
    1ef2:	28 01       	movw	r4, r16
    1ef4:	f2 e0       	ldi	r31, 0x02	; 2
    1ef6:	4f 0e       	add	r4, r31
    1ef8:	51 1c       	adc	r5, r1
    1efa:	f8 01       	movw	r30, r16
    1efc:	a0 80       	ld	r10, Z
    1efe:	b1 80       	ldd	r11, Z+1	; 0x01
    1f00:	36 fe       	sbrs	r3, 6
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <vfprintf+0x146>
    1f04:	69 2d       	mov	r22, r9
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <vfprintf+0x14a>
    1f0a:	6f ef       	ldi	r22, 0xFF	; 255
    1f0c:	7f ef       	ldi	r23, 0xFF	; 255
    1f0e:	c5 01       	movw	r24, r10
    1f10:	0e 94 ce 10 	call	0x219c	; 0x219c <strnlen>
    1f14:	4c 01       	movw	r8, r24
    1f16:	82 01       	movw	r16, r4
    1f18:	f3 2d       	mov	r31, r3
    1f1a:	ff 77       	andi	r31, 0x7F	; 127
    1f1c:	3f 2e       	mov	r3, r31
    1f1e:	16 c0       	rjmp	.+44     	; 0x1f4c <vfprintf+0x188>
    1f20:	28 01       	movw	r4, r16
    1f22:	22 e0       	ldi	r18, 0x02	; 2
    1f24:	42 0e       	add	r4, r18
    1f26:	51 1c       	adc	r5, r1
    1f28:	f8 01       	movw	r30, r16
    1f2a:	a0 80       	ld	r10, Z
    1f2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f2e:	36 fe       	sbrs	r3, 6
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <vfprintf+0x174>
    1f32:	69 2d       	mov	r22, r9
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <vfprintf+0x178>
    1f38:	6f ef       	ldi	r22, 0xFF	; 255
    1f3a:	7f ef       	ldi	r23, 0xFF	; 255
    1f3c:	c5 01       	movw	r24, r10
    1f3e:	0e 94 c3 10 	call	0x2186	; 0x2186 <strnlen_P>
    1f42:	4c 01       	movw	r8, r24
    1f44:	f3 2d       	mov	r31, r3
    1f46:	f0 68       	ori	r31, 0x80	; 128
    1f48:	3f 2e       	mov	r3, r31
    1f4a:	82 01       	movw	r16, r4
    1f4c:	33 fc       	sbrc	r3, 3
    1f4e:	1b c0       	rjmp	.+54     	; 0x1f86 <vfprintf+0x1c2>
    1f50:	82 2d       	mov	r24, r2
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	88 16       	cp	r8, r24
    1f56:	99 06       	cpc	r9, r25
    1f58:	b0 f4       	brcc	.+44     	; 0x1f86 <vfprintf+0x1c2>
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	80 e2       	ldi	r24, 0x20	; 32
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    1f64:	2a 94       	dec	r2
    1f66:	f4 cf       	rjmp	.-24     	; 0x1f50 <vfprintf+0x18c>
    1f68:	f5 01       	movw	r30, r10
    1f6a:	37 fc       	sbrc	r3, 7
    1f6c:	85 91       	lpm	r24, Z+
    1f6e:	37 fe       	sbrs	r3, 7
    1f70:	81 91       	ld	r24, Z+
    1f72:	5f 01       	movw	r10, r30
    1f74:	b6 01       	movw	r22, r12
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    1f7c:	21 10       	cpse	r2, r1
    1f7e:	2a 94       	dec	r2
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	82 1a       	sub	r8, r18
    1f84:	91 08       	sbc	r9, r1
    1f86:	81 14       	cp	r8, r1
    1f88:	91 04       	cpc	r9, r1
    1f8a:	71 f7       	brne	.-36     	; 0x1f68 <vfprintf+0x1a4>
    1f8c:	e8 c0       	rjmp	.+464    	; 0x215e <vfprintf+0x39a>
    1f8e:	84 36       	cpi	r24, 0x64	; 100
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <vfprintf+0x1d2>
    1f92:	89 36       	cpi	r24, 0x69	; 105
    1f94:	41 f5       	brne	.+80     	; 0x1fe6 <vfprintf+0x222>
    1f96:	f8 01       	movw	r30, r16
    1f98:	37 fe       	sbrs	r3, 7
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <vfprintf+0x1e6>
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0c 5f       	subi	r16, 0xFC	; 252
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0x1f6>
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	07 2e       	mov	r0, r23
    1fb0:	00 0c       	add	r0, r0
    1fb2:	88 0b       	sbc	r24, r24
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	0e 5f       	subi	r16, 0xFE	; 254
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	f3 2d       	mov	r31, r3
    1fbc:	ff 76       	andi	r31, 0x6F	; 111
    1fbe:	3f 2e       	mov	r3, r31
    1fc0:	97 ff       	sbrs	r25, 7
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <vfprintf+0x212>
    1fc4:	90 95       	com	r25
    1fc6:	80 95       	com	r24
    1fc8:	70 95       	com	r23
    1fca:	61 95       	neg	r22
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	f0 68       	ori	r31, 0x80	; 128
    1fd4:	3f 2e       	mov	r3, r31
    1fd6:	2a e0       	ldi	r18, 0x0A	; 10
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	a3 01       	movw	r20, r6
    1fdc:	0e 94 25 11 	call	0x224a	; 0x224a <__ultoa_invert>
    1fe0:	88 2e       	mov	r8, r24
    1fe2:	86 18       	sub	r8, r6
    1fe4:	45 c0       	rjmp	.+138    	; 0x2070 <vfprintf+0x2ac>
    1fe6:	85 37       	cpi	r24, 0x75	; 117
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <vfprintf+0x232>
    1fea:	23 2d       	mov	r18, r3
    1fec:	2f 7e       	andi	r18, 0xEF	; 239
    1fee:	b2 2e       	mov	r11, r18
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	25 c0       	rjmp	.+74     	; 0x2040 <vfprintf+0x27c>
    1ff6:	93 2d       	mov	r25, r3
    1ff8:	99 7f       	andi	r25, 0xF9	; 249
    1ffa:	b9 2e       	mov	r11, r25
    1ffc:	8f 36       	cpi	r24, 0x6F	; 111
    1ffe:	c1 f0       	breq	.+48     	; 0x2030 <vfprintf+0x26c>
    2000:	18 f4       	brcc	.+6      	; 0x2008 <vfprintf+0x244>
    2002:	88 35       	cpi	r24, 0x58	; 88
    2004:	79 f0       	breq	.+30     	; 0x2024 <vfprintf+0x260>
    2006:	b5 c0       	rjmp	.+362    	; 0x2172 <vfprintf+0x3ae>
    2008:	80 37       	cpi	r24, 0x70	; 112
    200a:	19 f0       	breq	.+6      	; 0x2012 <vfprintf+0x24e>
    200c:	88 37       	cpi	r24, 0x78	; 120
    200e:	21 f0       	breq	.+8      	; 0x2018 <vfprintf+0x254>
    2010:	b0 c0       	rjmp	.+352    	; 0x2172 <vfprintf+0x3ae>
    2012:	e9 2f       	mov	r30, r25
    2014:	e0 61       	ori	r30, 0x10	; 16
    2016:	be 2e       	mov	r11, r30
    2018:	b4 fe       	sbrs	r11, 4
    201a:	0d c0       	rjmp	.+26     	; 0x2036 <vfprintf+0x272>
    201c:	fb 2d       	mov	r31, r11
    201e:	f4 60       	ori	r31, 0x04	; 4
    2020:	bf 2e       	mov	r11, r31
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <vfprintf+0x272>
    2024:	34 fe       	sbrs	r3, 4
    2026:	0a c0       	rjmp	.+20     	; 0x203c <vfprintf+0x278>
    2028:	29 2f       	mov	r18, r25
    202a:	26 60       	ori	r18, 0x06	; 6
    202c:	b2 2e       	mov	r11, r18
    202e:	06 c0       	rjmp	.+12     	; 0x203c <vfprintf+0x278>
    2030:	28 e0       	ldi	r18, 0x08	; 8
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <vfprintf+0x27c>
    2036:	20 e1       	ldi	r18, 0x10	; 16
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <vfprintf+0x27c>
    203c:	20 e1       	ldi	r18, 0x10	; 16
    203e:	32 e0       	ldi	r19, 0x02	; 2
    2040:	f8 01       	movw	r30, r16
    2042:	b7 fe       	sbrs	r11, 7
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <vfprintf+0x290>
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	0c 5f       	subi	r16, 0xFC	; 252
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <vfprintf+0x29c>
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 5f       	subi	r16, 0xFE	; 254
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	a3 01       	movw	r20, r6
    2062:	0e 94 25 11 	call	0x224a	; 0x224a <__ultoa_invert>
    2066:	88 2e       	mov	r8, r24
    2068:	86 18       	sub	r8, r6
    206a:	fb 2d       	mov	r31, r11
    206c:	ff 77       	andi	r31, 0x7F	; 127
    206e:	3f 2e       	mov	r3, r31
    2070:	36 fe       	sbrs	r3, 6
    2072:	0d c0       	rjmp	.+26     	; 0x208e <vfprintf+0x2ca>
    2074:	23 2d       	mov	r18, r3
    2076:	2e 7f       	andi	r18, 0xFE	; 254
    2078:	a2 2e       	mov	r10, r18
    207a:	89 14       	cp	r8, r9
    207c:	58 f4       	brcc	.+22     	; 0x2094 <vfprintf+0x2d0>
    207e:	34 fe       	sbrs	r3, 4
    2080:	0b c0       	rjmp	.+22     	; 0x2098 <vfprintf+0x2d4>
    2082:	32 fc       	sbrc	r3, 2
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <vfprintf+0x2d4>
    2086:	83 2d       	mov	r24, r3
    2088:	8e 7e       	andi	r24, 0xEE	; 238
    208a:	a8 2e       	mov	r10, r24
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <vfprintf+0x2d4>
    208e:	b8 2c       	mov	r11, r8
    2090:	a3 2c       	mov	r10, r3
    2092:	03 c0       	rjmp	.+6      	; 0x209a <vfprintf+0x2d6>
    2094:	b8 2c       	mov	r11, r8
    2096:	01 c0       	rjmp	.+2      	; 0x209a <vfprintf+0x2d6>
    2098:	b9 2c       	mov	r11, r9
    209a:	a4 fe       	sbrs	r10, 4
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <vfprintf+0x2f8>
    209e:	fe 01       	movw	r30, r28
    20a0:	e8 0d       	add	r30, r8
    20a2:	f1 1d       	adc	r31, r1
    20a4:	80 81       	ld	r24, Z
    20a6:	80 33       	cpi	r24, 0x30	; 48
    20a8:	21 f4       	brne	.+8      	; 0x20b2 <vfprintf+0x2ee>
    20aa:	9a 2d       	mov	r25, r10
    20ac:	99 7e       	andi	r25, 0xE9	; 233
    20ae:	a9 2e       	mov	r10, r25
    20b0:	09 c0       	rjmp	.+18     	; 0x20c4 <vfprintf+0x300>
    20b2:	a2 fe       	sbrs	r10, 2
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <vfprintf+0x2fe>
    20b6:	b3 94       	inc	r11
    20b8:	b3 94       	inc	r11
    20ba:	04 c0       	rjmp	.+8      	; 0x20c4 <vfprintf+0x300>
    20bc:	8a 2d       	mov	r24, r10
    20be:	86 78       	andi	r24, 0x86	; 134
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <vfprintf+0x300>
    20c2:	b3 94       	inc	r11
    20c4:	a3 fc       	sbrc	r10, 3
    20c6:	11 c0       	rjmp	.+34     	; 0x20ea <vfprintf+0x326>
    20c8:	a0 fe       	sbrs	r10, 0
    20ca:	06 c0       	rjmp	.+12     	; 0x20d8 <vfprintf+0x314>
    20cc:	b2 14       	cp	r11, r2
    20ce:	88 f4       	brcc	.+34     	; 0x20f2 <vfprintf+0x32e>
    20d0:	28 0c       	add	r2, r8
    20d2:	92 2c       	mov	r9, r2
    20d4:	9b 18       	sub	r9, r11
    20d6:	0e c0       	rjmp	.+28     	; 0x20f4 <vfprintf+0x330>
    20d8:	b2 14       	cp	r11, r2
    20da:	60 f4       	brcc	.+24     	; 0x20f4 <vfprintf+0x330>
    20dc:	b6 01       	movw	r22, r12
    20de:	80 e2       	ldi	r24, 0x20	; 32
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    20e6:	b3 94       	inc	r11
    20e8:	f7 cf       	rjmp	.-18     	; 0x20d8 <vfprintf+0x314>
    20ea:	b2 14       	cp	r11, r2
    20ec:	18 f4       	brcc	.+6      	; 0x20f4 <vfprintf+0x330>
    20ee:	2b 18       	sub	r2, r11
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <vfprintf+0x332>
    20f2:	98 2c       	mov	r9, r8
    20f4:	21 2c       	mov	r2, r1
    20f6:	a4 fe       	sbrs	r10, 4
    20f8:	10 c0       	rjmp	.+32     	; 0x211a <vfprintf+0x356>
    20fa:	b6 01       	movw	r22, r12
    20fc:	80 e3       	ldi	r24, 0x30	; 48
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    2104:	a2 fe       	sbrs	r10, 2
    2106:	17 c0       	rjmp	.+46     	; 0x2136 <vfprintf+0x372>
    2108:	a1 fc       	sbrc	r10, 1
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <vfprintf+0x34e>
    210c:	88 e7       	ldi	r24, 0x78	; 120
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x352>
    2112:	88 e5       	ldi	r24, 0x58	; 88
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	b6 01       	movw	r22, r12
    2118:	0c c0       	rjmp	.+24     	; 0x2132 <vfprintf+0x36e>
    211a:	8a 2d       	mov	r24, r10
    211c:	86 78       	andi	r24, 0x86	; 134
    211e:	59 f0       	breq	.+22     	; 0x2136 <vfprintf+0x372>
    2120:	a1 fe       	sbrs	r10, 1
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <vfprintf+0x364>
    2124:	8b e2       	ldi	r24, 0x2B	; 43
    2126:	01 c0       	rjmp	.+2      	; 0x212a <vfprintf+0x366>
    2128:	80 e2       	ldi	r24, 0x20	; 32
    212a:	a7 fc       	sbrc	r10, 7
    212c:	8d e2       	ldi	r24, 0x2D	; 45
    212e:	b6 01       	movw	r22, r12
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    2136:	89 14       	cp	r8, r9
    2138:	38 f4       	brcc	.+14     	; 0x2148 <vfprintf+0x384>
    213a:	b6 01       	movw	r22, r12
    213c:	80 e3       	ldi	r24, 0x30	; 48
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    2144:	9a 94       	dec	r9
    2146:	f7 cf       	rjmp	.-18     	; 0x2136 <vfprintf+0x372>
    2148:	8a 94       	dec	r8
    214a:	f3 01       	movw	r30, r6
    214c:	e8 0d       	add	r30, r8
    214e:	f1 1d       	adc	r31, r1
    2150:	80 81       	ld	r24, Z
    2152:	b6 01       	movw	r22, r12
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    215a:	81 10       	cpse	r8, r1
    215c:	f5 cf       	rjmp	.-22     	; 0x2148 <vfprintf+0x384>
    215e:	22 20       	and	r2, r2
    2160:	09 f4       	brne	.+2      	; 0x2164 <vfprintf+0x3a0>
    2162:	42 ce       	rjmp	.-892    	; 0x1de8 <vfprintf+0x24>
    2164:	b6 01       	movw	r22, r12
    2166:	80 e2       	ldi	r24, 0x20	; 32
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fputc>
    216e:	2a 94       	dec	r2
    2170:	f6 cf       	rjmp	.-20     	; 0x215e <vfprintf+0x39a>
    2172:	f6 01       	movw	r30, r12
    2174:	86 81       	ldd	r24, Z+6	; 0x06
    2176:	97 81       	ldd	r25, Z+7	; 0x07
    2178:	02 c0       	rjmp	.+4      	; 0x217e <vfprintf+0x3ba>
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	9f ef       	ldi	r25, 0xFF	; 255
    217e:	2b 96       	adiw	r28, 0x0b	; 11
    2180:	e2 e1       	ldi	r30, 0x12	; 18
    2182:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__epilogue_restores__>

00002186 <strnlen_P>:
    2186:	fc 01       	movw	r30, r24
    2188:	05 90       	lpm	r0, Z+
    218a:	61 50       	subi	r22, 0x01	; 1
    218c:	70 40       	sbci	r23, 0x00	; 0
    218e:	01 10       	cpse	r0, r1
    2190:	d8 f7       	brcc	.-10     	; 0x2188 <strnlen_P+0x2>
    2192:	80 95       	com	r24
    2194:	90 95       	com	r25
    2196:	8e 0f       	add	r24, r30
    2198:	9f 1f       	adc	r25, r31
    219a:	08 95       	ret

0000219c <strnlen>:
    219c:	fc 01       	movw	r30, r24
    219e:	61 50       	subi	r22, 0x01	; 1
    21a0:	70 40       	sbci	r23, 0x00	; 0
    21a2:	01 90       	ld	r0, Z+
    21a4:	01 10       	cpse	r0, r1
    21a6:	d8 f7       	brcc	.-10     	; 0x219e <strnlen+0x2>
    21a8:	80 95       	com	r24
    21aa:	90 95       	com	r25
    21ac:	8e 0f       	add	r24, r30
    21ae:	9f 1f       	adc	r25, r31
    21b0:	08 95       	ret

000021b2 <strrev>:
    21b2:	dc 01       	movw	r26, r24
    21b4:	fc 01       	movw	r30, r24
    21b6:	67 2f       	mov	r22, r23
    21b8:	71 91       	ld	r23, Z+
    21ba:	77 23       	and	r23, r23
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <strrev+0x4>
    21be:	32 97       	sbiw	r30, 0x02	; 2
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <strrev+0x18>
    21c2:	7c 91       	ld	r23, X
    21c4:	6d 93       	st	X+, r22
    21c6:	70 83       	st	Z, r23
    21c8:	62 91       	ld	r22, -Z
    21ca:	ae 17       	cp	r26, r30
    21cc:	bf 07       	cpc	r27, r31
    21ce:	c8 f3       	brcs	.-14     	; 0x21c2 <strrev+0x10>
    21d0:	08 95       	ret

000021d2 <fputc>:
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	fb 01       	movw	r30, r22
    21dc:	23 81       	ldd	r18, Z+3	; 0x03
    21de:	21 fd       	sbrc	r18, 1
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <fputc+0x16>
    21e2:	8f ef       	ldi	r24, 0xFF	; 255
    21e4:	9f ef       	ldi	r25, 0xFF	; 255
    21e6:	2c c0       	rjmp	.+88     	; 0x2240 <fputc+0x6e>
    21e8:	22 ff       	sbrs	r18, 2
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <fputc+0x46>
    21ec:	46 81       	ldd	r20, Z+6	; 0x06
    21ee:	57 81       	ldd	r21, Z+7	; 0x07
    21f0:	24 81       	ldd	r18, Z+4	; 0x04
    21f2:	35 81       	ldd	r19, Z+5	; 0x05
    21f4:	42 17       	cp	r20, r18
    21f6:	53 07       	cpc	r21, r19
    21f8:	44 f4       	brge	.+16     	; 0x220a <fputc+0x38>
    21fa:	a0 81       	ld	r26, Z
    21fc:	b1 81       	ldd	r27, Z+1	; 0x01
    21fe:	9d 01       	movw	r18, r26
    2200:	2f 5f       	subi	r18, 0xFF	; 255
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	31 83       	std	Z+1, r19	; 0x01
    2206:	20 83       	st	Z, r18
    2208:	8c 93       	st	X, r24
    220a:	26 81       	ldd	r18, Z+6	; 0x06
    220c:	37 81       	ldd	r19, Z+7	; 0x07
    220e:	2f 5f       	subi	r18, 0xFF	; 255
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	37 83       	std	Z+7, r19	; 0x07
    2214:	26 83       	std	Z+6, r18	; 0x06
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <fputc+0x6e>
    2218:	8b 01       	movw	r16, r22
    221a:	ec 01       	movw	r28, r24
    221c:	fb 01       	movw	r30, r22
    221e:	00 84       	ldd	r0, Z+8	; 0x08
    2220:	f1 85       	ldd	r31, Z+9	; 0x09
    2222:	e0 2d       	mov	r30, r0
    2224:	09 95       	icall
    2226:	89 2b       	or	r24, r25
    2228:	e1 f6       	brne	.-72     	; 0x21e2 <fputc+0x10>
    222a:	d8 01       	movw	r26, r16
    222c:	16 96       	adiw	r26, 0x06	; 6
    222e:	8d 91       	ld	r24, X+
    2230:	9c 91       	ld	r25, X
    2232:	17 97       	sbiw	r26, 0x07	; 7
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	17 96       	adiw	r26, 0x07	; 7
    2238:	9c 93       	st	X, r25
    223a:	8e 93       	st	-X, r24
    223c:	16 97       	sbiw	r26, 0x06	; 6
    223e:	ce 01       	movw	r24, r28
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	08 95       	ret

0000224a <__ultoa_invert>:
    224a:	fa 01       	movw	r30, r20
    224c:	aa 27       	eor	r26, r26
    224e:	28 30       	cpi	r18, 0x08	; 8
    2250:	51 f1       	breq	.+84     	; 0x22a6 <__ultoa_invert+0x5c>
    2252:	20 31       	cpi	r18, 0x10	; 16
    2254:	81 f1       	breq	.+96     	; 0x22b6 <__ultoa_invert+0x6c>
    2256:	e8 94       	clt
    2258:	6f 93       	push	r22
    225a:	6e 7f       	andi	r22, 0xFE	; 254
    225c:	6e 5f       	subi	r22, 0xFE	; 254
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	af 4f       	sbci	r26, 0xFF	; 255
    2266:	b1 e0       	ldi	r27, 0x01	; 1
    2268:	3e d0       	rcall	.+124    	; 0x22e6 <__ultoa_invert+0x9c>
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	3c d0       	rcall	.+120    	; 0x22e6 <__ultoa_invert+0x9c>
    226e:	67 0f       	add	r22, r23
    2270:	78 1f       	adc	r23, r24
    2272:	89 1f       	adc	r24, r25
    2274:	9a 1f       	adc	r25, r26
    2276:	a1 1d       	adc	r26, r1
    2278:	68 0f       	add	r22, r24
    227a:	79 1f       	adc	r23, r25
    227c:	8a 1f       	adc	r24, r26
    227e:	91 1d       	adc	r25, r1
    2280:	a1 1d       	adc	r26, r1
    2282:	6a 0f       	add	r22, r26
    2284:	71 1d       	adc	r23, r1
    2286:	81 1d       	adc	r24, r1
    2288:	91 1d       	adc	r25, r1
    228a:	a1 1d       	adc	r26, r1
    228c:	20 d0       	rcall	.+64     	; 0x22ce <__ultoa_invert+0x84>
    228e:	09 f4       	brne	.+2      	; 0x2292 <__ultoa_invert+0x48>
    2290:	68 94       	set
    2292:	3f 91       	pop	r19
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	26 9f       	mul	r18, r22
    2298:	11 24       	eor	r1, r1
    229a:	30 19       	sub	r19, r0
    229c:	30 5d       	subi	r19, 0xD0	; 208
    229e:	31 93       	st	Z+, r19
    22a0:	de f6       	brtc	.-74     	; 0x2258 <__ultoa_invert+0xe>
    22a2:	cf 01       	movw	r24, r30
    22a4:	08 95       	ret
    22a6:	46 2f       	mov	r20, r22
    22a8:	47 70       	andi	r20, 0x07	; 7
    22aa:	40 5d       	subi	r20, 0xD0	; 208
    22ac:	41 93       	st	Z+, r20
    22ae:	b3 e0       	ldi	r27, 0x03	; 3
    22b0:	0f d0       	rcall	.+30     	; 0x22d0 <__ultoa_invert+0x86>
    22b2:	c9 f7       	brne	.-14     	; 0x22a6 <__ultoa_invert+0x5c>
    22b4:	f6 cf       	rjmp	.-20     	; 0x22a2 <__ultoa_invert+0x58>
    22b6:	46 2f       	mov	r20, r22
    22b8:	4f 70       	andi	r20, 0x0F	; 15
    22ba:	40 5d       	subi	r20, 0xD0	; 208
    22bc:	4a 33       	cpi	r20, 0x3A	; 58
    22be:	18 f0       	brcs	.+6      	; 0x22c6 <__ultoa_invert+0x7c>
    22c0:	49 5d       	subi	r20, 0xD9	; 217
    22c2:	31 fd       	sbrc	r19, 1
    22c4:	40 52       	subi	r20, 0x20	; 32
    22c6:	41 93       	st	Z+, r20
    22c8:	02 d0       	rcall	.+4      	; 0x22ce <__ultoa_invert+0x84>
    22ca:	a9 f7       	brne	.-22     	; 0x22b6 <__ultoa_invert+0x6c>
    22cc:	ea cf       	rjmp	.-44     	; 0x22a2 <__ultoa_invert+0x58>
    22ce:	b4 e0       	ldi	r27, 0x04	; 4
    22d0:	a6 95       	lsr	r26
    22d2:	97 95       	ror	r25
    22d4:	87 95       	ror	r24
    22d6:	77 95       	ror	r23
    22d8:	67 95       	ror	r22
    22da:	ba 95       	dec	r27
    22dc:	c9 f7       	brne	.-14     	; 0x22d0 <__ultoa_invert+0x86>
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 05       	cpc	r22, r1
    22e2:	71 05       	cpc	r23, r1
    22e4:	08 95       	ret
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	0a 2e       	mov	r0, r26
    22ec:	06 94       	lsr	r0
    22ee:	57 95       	ror	r21
    22f0:	47 95       	ror	r20
    22f2:	37 95       	ror	r19
    22f4:	27 95       	ror	r18
    22f6:	ba 95       	dec	r27
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__ultoa_invert+0xa2>
    22fa:	62 0f       	add	r22, r18
    22fc:	73 1f       	adc	r23, r19
    22fe:	84 1f       	adc	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	a0 1d       	adc	r26, r0
    2304:	08 95       	ret

00002306 <__prologue_saves__>:
    2306:	2f 92       	push	r2
    2308:	3f 92       	push	r3
    230a:	4f 92       	push	r4
    230c:	5f 92       	push	r5
    230e:	6f 92       	push	r6
    2310:	7f 92       	push	r7
    2312:	8f 92       	push	r8
    2314:	9f 92       	push	r9
    2316:	af 92       	push	r10
    2318:	bf 92       	push	r11
    231a:	cf 92       	push	r12
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	ca 1b       	sub	r28, r26
    2330:	db 0b       	sbc	r29, r27
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	09 94       	ijmp

0000233e <__epilogue_restores__>:
    233e:	2a 88       	ldd	r2, Y+18	; 0x12
    2340:	39 88       	ldd	r3, Y+17	; 0x11
    2342:	48 88       	ldd	r4, Y+16	; 0x10
    2344:	5f 84       	ldd	r5, Y+15	; 0x0f
    2346:	6e 84       	ldd	r6, Y+14	; 0x0e
    2348:	7d 84       	ldd	r7, Y+13	; 0x0d
    234a:	8c 84       	ldd	r8, Y+12	; 0x0c
    234c:	9b 84       	ldd	r9, Y+11	; 0x0b
    234e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2350:	b9 84       	ldd	r11, Y+9	; 0x09
    2352:	c8 84       	ldd	r12, Y+8	; 0x08
    2354:	df 80       	ldd	r13, Y+7	; 0x07
    2356:	ee 80       	ldd	r14, Y+6	; 0x06
    2358:	fd 80       	ldd	r15, Y+5	; 0x05
    235a:	0c 81       	ldd	r16, Y+4	; 0x04
    235c:	1b 81       	ldd	r17, Y+3	; 0x03
    235e:	aa 81       	ldd	r26, Y+2	; 0x02
    2360:	b9 81       	ldd	r27, Y+1	; 0x01
    2362:	ce 0f       	add	r28, r30
    2364:	d1 1d       	adc	r29, r1
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	ed 01       	movw	r28, r26
    2372:	08 95       	ret

00002374 <_exit>:
    2374:	f8 94       	cli

00002376 <__stop_program>:
    2376:	ff cf       	rjmp	.-2      	; 0x2376 <__stop_program>
